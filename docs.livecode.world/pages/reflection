{
  "title": "Reflection",
  "story": [
    {
      "type": "paragraph",
      "id": "4c40f20f-ea3d-41fd-8c8c-b2a341fc8092",
      "text": "Reflection ([[Reflection (computer programming)]]) is a term that computer scientists apply to software programs that have the capability to inspect their own structure, for example their [[parse tree]] or [[datatypes]] of input and output parameters. Reflection was first primarily a feature of interpreted languages such as Smalltalk and Lisp. The fact that statements are interpreted means that the programs have access to information created as they were parsed and can often even modify their own structure - [https://en.wikipedia.org/wiki/Smalltalk#Reflection wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "4142e441-acc7-44da-9c03-9732932949c9",
      "text": "Reflection is also a feature of having a meta-model as Smalltalk does. The meta-model is the model that describes the language itself and developers can use the meta-model to do things like walk through, examine, and modify the parse tree of an object. Or find all the instances of a certain kind of structure (e.g., all the instances of the Method class in the meta-model)."
    },
    {
      "type": "paragraph",
      "id": "f6fc79e3-da93-486a-854f-eb7e844b8406",
      "text": "Smalltalk-80 is a totally reflective system, implemented in Smalltalk-80 itself.  Smalltalk-80 provides both structural and computational reflection.  Smalltalk is a structurally reflective system whose structure is defined by Smalltalk-80 objects.  The classes and methods that define the system are themselves objects and fully part of the system that they help define.  The Smalltalk compiler compiles textual source code into method objects, typically instances of <code>CompiledMethod</code>.  These get added to classes by storing them in a class's method dictionary.  The part of the class hierarchy that defines classes can add new classes to the system.  The system is extended by running Smalltalk-80 code that creates or defines classes and methods.  In this way a Smalltalk-80 system is a \"living\" system, carrying around the ability to extend itself at run time."
    },
    {
      "type": "paragraph",
      "id": "282dee86-a54e-458b-883e-bf882dad3569",
      "text": "Since the classes are themselves objects, they can be asked questions such as \"what methods do you implement?\" or \"what fields/slots/instance variables do you define?\".  So objects can easily be inspected, copied, (de)serialized ([[serialization]]) and so on with generic code that applies to any object in the system.[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.33.5755 Metaclasses and Reflection in Smalltalk]"
    },
    {
      "type": "paragraph",
      "id": "85477033-2a70-49b1-827b-971ed9d05f5f",
      "text": "Smalltalk-80 also provides computational reflection, the ability to observe the computational state of the system.  In languages derived from the original Smalltalk-80 the current activation of a method is accessible as an object named via a pseudo-variable (one of the six reserved words), <code>thisContext</code>.  By sending messages to <code>thisContext</code> a method activation can ask questions like \"who sent this message to me\".  These facilities make it possible to implement co-routines ([[coroutine]]) or [[Prolog]]-like back-tracking without modifying the virtual machine.  The exception system is implemented using this facility.  One of the more interesting uses of this is in the Seaside ([[Seaside (software)]]) web framework which relieves the programmer of dealing with the complexity of a Web Browser's back button by storing continuations for each edited page and switching between them as the user navigates a web site.  Programming the web server using Seaside can then be done using a more conventional programming style.[http://scg.unibe.ch/archive/papers/Duca04eSeaside.pdf Seaside â€“ A Multiple Control Flow Web Application Framework]"
    },
    {
      "type": "paragraph",
      "id": "c8c0fc31-6610-4ee1-abe7-552c188192f2",
      "text": "An example of how Smalltalk can use reflection is the mechanism for handling errors. When an object is sent a message that it does not implement, the virtual machine sends the object the <code>doesNotUnderstand:</code> message with a reification ([[reification (computer science)]]) of the message as an argument.  The message (another object, an instance of <code>Message</code>) contains the selector of the message and an <code>Array</code> of its arguments.  In an interactive Smalltalk system the default implementation of <code>doesNotUnderstand:</code> is one that opens an error window (a Notifier) reporting the error to the user.  Through this and the reflective facilities the user can examine the context in which the error occurred, redefine the offending code, and continue, all within the system, using Smalltalk-80's reflective facilities.[http://www.laputan.org/ref89/ref89.html Reflective Facilities in Smalltalk-80][http://publications.csail.mit.edu/lcs/specpub.php?id=840 PROCEDURAL REFLECTION IN PROGRAMMING LANGUAGES]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Reflection"
      },
      "date": 1466322754739,
      "source": {
        "pageTitle": "Smalltalk",
        "pageSlug": "smalltalk",
        "url": "https://en.wikipedia.org/wiki/Smalltalk#Reflection",
        "date": 1466322754738,
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 718256370,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466322781716
    }
  ]
}