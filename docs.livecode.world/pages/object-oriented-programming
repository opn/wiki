{
  "title": "Object-oriented programming",
  "story": [
    {
      "type": "paragraph",
      "id": "ce1a3973-2f94-4c2d-84f4-0b83735779aa",
      "text": "As in other object-oriented languages, the central concept in Smalltalk-80 (but not in Smalltalk-72) is that of an ''object''. "
    },
    {
      "type": "paragraph",
      "id": "1b9137bf180b6197",
      "text": "An object is always an '[[Instance']] of a '[[Class]]. Classes are \"blueprints\" that describe the properties and behaviour of their instances. "
    },
    {
      "type": "paragraph",
      "id": "345439a13d411e7f",
      "text": "For example, a GUI's window class might declare that windows have properties such as the label, the position and whether the window is visible or not. The class might also declare that instances support operations such as opening, closing, moving and hiding. "
    },
    {
      "type": "paragraph",
      "id": "865a12c4bed7153d",
      "text": "Each particular window object would have its own values of those properties, and each of them would be able to perform operations defined by its class - [https://en.wikipedia.org/wiki/Smalltalk#Object-oriented_programming wikipedia]"
    },
    {
      "type": "markdown",
      "id": "f36f2098-4261-41e8-96dd-5ef842a102e9",
      "text": "A Smalltalk object can do exactly three things:\n- Hold state (references to other objects).\n- Receive a message from itself or another object.\n- In the course of processing a message, send messages to itself or another object."
    },
    {
      "type": "paragraph",
      "id": "594f9dc2-3927-4e0d-9838-302d17c87233",
      "text": "The state an object holds is always private to that object. Other objects can query or change that state only by sending requests (messages) to the object to do so. Any message can be sent to any object: when a message is received, the receiver determines whether that message is appropriate. "
    },
    {
      "type": "paragraph",
      "id": "0afaa17c800814d5",
      "text": "[[Alan Kay]] has commented that despite the attention given to objects, messaging is the most important concept in Smalltalk: "
    },
    {
      "type": "html",
      "id": "4c55c45638907d96",
      "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)\n<p>\nPrototypes vs Classes in [http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html squeakfoundation.org]</blockquote>"
    },
    {
      "type": "paragraph",
      "id": "946fac67-acb0-41ea-b658-13c1c6aa1ebf",
      "text": "Smalltalk is a \"pure\" object-oriented programming language, meaning that, unlike Java ([[Java (programming language)]]) and [[C++]], there is no difference between values which are objects and values which are primitive types. In Smalltalk, primitive values such as integers, booleans and characters are also objects, in the sense that they are instances of corresponding classes, and operations on them are invoked by sending messages. A programmer can change or extend (through subclassing ([[Subclass (computer science)]])) the classes that implement primitive values, so that new behavior can be defined for their instances—for example, to implement new control structures—or even so that their existing behavior will be changed. This fact is summarized in the commonly heard phrase \"In Smalltalk everything is an object\", which may be more accurately expressed as \"all values are objects\", as variables are not."
    },
    {
      "type": "paragraph",
      "id": "b00c9a5c-23de-43f8-b65c-f355d6bd573a",
      "text": "Since all values are objects, classes ([[class (computer science)]]) themselves are also objects. Each class is an instance of the ''[[metaclass]]'' of that class. Metaclasses in turn are also objects, and are all instances of a class called Metaclass. Code block ([[#Code blocks]])s—Smalltalk's way of expressing [[anonymous functions]]—are also objects.[ Smalltalk-80 The Language]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Object-oriented programming"
      },
      "date": 1466322712276,
      "source": {
        "pageTitle": "Smalltalk",
        "pageSlug": "smalltalk",
        "url": "https://en.wikipedia.org/wiki/Smalltalk#Object-oriented_programming",
        "date": 1466322712276,
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 718256370,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466322749016
    },
    {
      "type": "edit",
      "id": "ce1a3973-2f94-4c2d-84f4-0b83735779aa",
      "item": {
        "type": "paragraph",
        "id": "ce1a3973-2f94-4c2d-84f4-0b83735779aa",
        "text": "As in other object-oriented languages, the central concept in Smalltalk-80 (but not in Smalltalk-72) is that of an ''object''. "
      },
      "date": 1466508966757
    },
    {
      "type": "add",
      "id": "1b9137bf180b6197",
      "item": {
        "type": "paragraph",
        "id": "1b9137bf180b6197",
        "text": "An object is always an '[[Instance']] of a '[[Class]]. Classes are \"blueprints\" that describe the properties and behaviour of their instances. "
      },
      "after": "ce1a3973-2f94-4c2d-84f4-0b83735779aa",
      "date": 1466509003227
    },
    {
      "type": "add",
      "id": "345439a13d411e7f",
      "item": {
        "type": "paragraph",
        "id": "345439a13d411e7f",
        "text": "For example, a GUI's window class might declare that windows have properties such as the label, the position and whether the window is visible or not. The class might also declare that instances support operations such as opening, closing, moving and hiding. "
      },
      "after": "1b9137bf180b6197",
      "date": 1466509006373
    },
    {
      "type": "add",
      "id": "865a12c4bed7153d",
      "item": {
        "type": "paragraph",
        "id": "865a12c4bed7153d",
        "text": "Each particular window object would have its own values of those properties, and each of them would be able to perform operations defined by its class - [https://en.wikipedia.org/wiki/Smalltalk#Object-oriented_programming wikipedia]"
      },
      "after": "345439a13d411e7f",
      "date": 1466509015151
    },
    {
      "type": "remove",
      "id": "e018922e-3717-4ac9-b6e7-b635d23122ba",
      "date": 1466509034073
    },
    {
      "type": "remove",
      "id": "55c14659-4095-4a71-9ab7-d9b3ea3cb2ba",
      "date": 1466509038232
    },
    {
      "type": "remove",
      "id": "d58de2ad-c6ab-41f8-bf87-02ad9a38c3e7",
      "date": 1466509043079
    },
    {
      "type": "edit",
      "id": "f36f2098-4261-41e8-96dd-5ef842a102e9",
      "item": {
        "type": "paragraph",
        "id": "f36f2098-4261-41e8-96dd-5ef842a102e9",
        "text": "A Smalltalk object can do exactly three things:- Hold state (references to other objects).- Receive a message from itself or another object.- In the course of processing a message, send messages to itself or another object."
      },
      "date": 1466509044736
    },
    {
      "type": "edit",
      "id": "f36f2098-4261-41e8-96dd-5ef842a102e9",
      "item": {
        "type": "markdown",
        "id": "f36f2098-4261-41e8-96dd-5ef842a102e9",
        "text": "A Smalltalk object can do exactly three things:- Hold state (references to other objects).- Receive a message from itself or another object.- In the course of processing a message, send messages to itself or another object."
      },
      "date": 1466509046123
    },
    {
      "type": "edit",
      "id": "f36f2098-4261-41e8-96dd-5ef842a102e9",
      "item": {
        "type": "markdown",
        "id": "f36f2098-4261-41e8-96dd-5ef842a102e9",
        "text": "A Smalltalk object can do exactly three things:\n- Hold state (references to other objects).\n- Receive a message from itself or another object.\n- In the course of processing a message, send messages to itself or another object."
      },
      "date": 1466509056345
    },
    {
      "type": "edit",
      "id": "594f9dc2-3927-4e0d-9838-302d17c87233",
      "item": {
        "type": "paragraph",
        "id": "594f9dc2-3927-4e0d-9838-302d17c87233",
        "text": "The state an object holds is always private to that object. Other objects can query or change that state only by sending requests (messages) to the object to do so. Any message can be sent to any object: when a message is received, the receiver determines whether that message is appropriate. "
      },
      "date": 1466509075200
    },
    {
      "type": "add",
      "id": "0afaa17c800814d5",
      "item": {
        "type": "paragraph",
        "id": "0afaa17c800814d5",
        "text": "Alan Kay has commented that despite the attention given to objects, messaging is the most important concept in Smalltalk: "
      },
      "after": "594f9dc2-3927-4e0d-9838-302d17c87233",
      "date": 1466509084161
    },
    {
      "type": "add",
      "id": "4c55c45638907d96",
      "item": {
        "type": "paragraph",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase).\"[http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html Prototypes vs Classes (e-mail on Squeak list)]</blockquote>"
      },
      "after": "0afaa17c800814d5",
      "date": 1466509107675
    },
    {
      "type": "edit",
      "id": "4c55c45638907d96",
      "item": {
        "type": "html",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase).\"[http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html Prototypes vs Classes (e-mail on Squeak list)]</blockquote>"
      },
      "date": 1466509108719
    },
    {
      "type": "edit",
      "id": "4c55c45638907d96",
      "item": {
        "type": "html",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)\n\nPrototypes vs Classes in [http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html lists.squeakfoundation.org]</blockquote>"
      },
      "date": 1466509174065
    },
    {
      "type": "edit",
      "id": "4c55c45638907d96",
      "item": {
        "type": "html",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)\n<p>\nPrototypes vs Classes in [http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html lists.squeakfoundation.org]</blockquote>"
      },
      "date": 1466509180042
    },
    {
      "type": "edit",
      "id": "4c55c45638907d96",
      "item": {
        "type": "html",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)\n<p>\nPrototypes vs Classes [http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html lists.squeakfoundation.org]</blockquote>"
      },
      "date": 1466509192408
    },
    {
      "type": "edit",
      "id": "4c55c45638907d96",
      "item": {
        "type": "html",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)\n<p>\nPrototypes vs Classes -[http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html lists.squeakfoundation.org]</blockquote>"
      },
      "date": 1466509197351
    },
    {
      "type": "edit",
      "id": "4c55c45638907d96",
      "item": {
        "type": "html",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)\n<p>\nPrototypes vs Classes -[http://squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html lists.squeakfoundation.org]</blockquote>"
      },
      "date": 1466509208863
    },
    {
      "type": "edit",
      "id": "4c55c45638907d96",
      "item": {
        "type": "html",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)\n<p>\nPrototypes vs Classes in[http://squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html lists.squeakfoundation.org]</blockquote>"
      },
      "date": 1466509219928
    },
    {
      "type": "edit",
      "id": "4c55c45638907d96",
      "item": {
        "type": "html",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)\n<p>\nPrototypes vs Classes in[http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html squeakfoundation.org]</blockquote>"
      },
      "date": 1466509241729
    },
    {
      "type": "edit",
      "id": "4c55c45638907d96",
      "item": {
        "type": "html",
        "id": "4c55c45638907d96",
        "text": "<blockquote>The big idea is 'messaging'—that is what the kernel of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase)\n<p>\nPrototypes vs Classes in [http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html squeakfoundation.org]</blockquote>"
      },
      "date": 1466509248665
    },
    {
      "type": "edit",
      "id": "0afaa17c800814d5",
      "item": {
        "type": "paragraph",
        "id": "0afaa17c800814d5",
        "text": "[[Alan Kay]] has commented that despite the attention given to objects, messaging is the most important concept in Smalltalk: "
      },
      "date": 1466509261678
    }
  ]
}