{
  "title": "Wiki as Pattern Language",
  "story": [
    {
      "type": "paragraph",
      "id": "61f1f5d55e546498",
      "text": "\"Wiki is pattern language\" is an artical published by [[Ward Cunningham]] and [[Michael Mehaffy]] in 2013 - [http://dl.acm.org/citation.cfm?id=2725707 acm]"
    },
    {
      "type": "paragraph",
      "id": "aae8f72508cd3ff0",
      "text": "I've quoted extensively from this article below, with a view to reworking it. The text, and discussions in the video below align very well with my practice developing software, and experience working with architects for a number of years on the [[Architectonic Archive]] and [[Architex Anonymous]] with [[Lena Nalbach]]."
    },
    {
      "type": "paragraph",
      "id": "8c56d1d9b30674c1",
      "text": "The two things I find missing somewhat from the discussion are [[Biological Metaphors]], the cybernetic thinking of people like [[Stafford Beer]] ([[Viable Systems Model]], and well - [[Actual Patterns]]. "
    },
    {
      "type": "paragraph",
      "id": "c3863fd805c53beb",
      "text": "I see as a core element of the [[Platform Earth]] project the need both to use \"wiki as pattern language\" as a means of communicating complex systems"
    },
    {
      "type": "markdown",
      "id": "4fc72bbc4ad6f2d3",
      "text": "# Abstract"
    },
    {
      "type": "paragraph",
      "id": "e90d4f2d7bc9936e",
      "text": "We describe the origin of wiki technology, which has become widely influential, and its relationship to\nthe development of pattern languages in software. We show here how the relationship is deeper than\npreviously understood, opening up the possibility of expanded capability for wikis, including a new\ngeneration of “federated” wiki. "
    },
    {
      "type": "paragraph",
      "id": "437bc56169de6427",
      "text": "We draw conclusions about the use of this and related technology to \"curate\" (collectively gather and refine) knowledge systems - [https://dl.acm.org/citation.cfm?id=2725669.2725707 acm.org]"
    },
    {
      "type": "paragraph",
      "id": "0121d7811acac17e",
      "text": "Ward Cunningham and Michael Mehaffy. [http://www.hillside.net/plop/2013/papers/Group6/plop13_preprint_51.pdf pdf] [http://dl.acm.org/citation.cfm?id=2725707 acm]"
    },
    {
      "type": "markdown",
      "id": "8d5dd8da2ab6a39e",
      "text": "# Expressing complexity\n"
    },
    {
      "type": "html",
      "id": "5118ebb441c4d9ee",
      "text": "As Cunningham put it, when asked by programmer Tom Munnecke to\nexplain how “the generativity of a pattern is a way of expressing complexity:”\n<blockquote>That was an idea that excited me, and that seemed more powerful than most notion that I had seen.\n...And that is, language is generative, I follow some rules, and I can't remember when I learned them,\nbut I was probably pretty young. And that idea that I can have a set of rules that generates something\nthat I could value is really important. So the question was, why don't we do everything that way? And\nthe answer was, well we pretty much did, until we let professionals get involved. And they said, no, no,\nno, no, it's really much simpler, you know, and they made it complex by trying to make it simpler,\nbecause they didn't understand how some system of rules could generate behaviors instead of specifying\nbehaviors.<p>(Cunningham, 2011)<blockquote>"
    },
    {
      "type": "paragraph",
      "id": "6a7320fcb2999f86",
      "text": "This generation refers to the capacity to reproduce the essence of a functioning structure without\nhaving to specify all of its characteristics. "
    },
    {
      "type": "paragraph",
      "id": "f35d75ba6e058701",
      "text": "A simple example is the distinction between the way a\ngenetic process generates the blue eyes, say, of a child, which recapitulates the blue eyes of the parent\nwithout having to specify them in minute detail (their intricate retinal pattern, round shape, etc)."
    },
    {
      "type": "paragraph",
      "id": "750167534de04f74",
      "text": "Instead, the genetic process is able to generate, and regenerate, an intricately complex structure from a\nrelatively simple set of language-like instructions.\nThe result of this kind of work is, somewhat paradoxically, to reduce the complexity of the models we use for structuring our world – even as we increase their ability to handle real complexity more\neffectively. "
    },
    {
      "type": "paragraph",
      "id": "c12e8e91a117aee3",
      "text": "This is not so hard to understand, again, if we use an analogy to language. We do not need to draw little pictures to specify everything we see. Instead, we use a flexible language offering immense versatility, with just a small number of generative elements. With just 26 letters and a few other symbols, we can cover plate tectonics, or the plays of Shakespeare, or any of an infinite range of other subjects."
    },
    {
      "type": "paragraph",
      "id": "eeca74bd9da08936",
      "text": "This is, in essence, the structure of natural complexity as well. That is, this is the kind of structure we usually confront as we seek to understand the complexity of a natural system, or a large-scale design problem. When confronted with such a complex phenomenon, we might choose to map all the aspects of its structure. "
    },
    {
      "type": "paragraph",
      "id": "afea2577b1ba35f7",
      "text": "This might, however, lead to an enormous and unwieldy map, posing many of the same structural challenges as the problem itself. But a more elegant solution, mathematically speaking, would be to identify the generative elements that produced the structure, recombine them in another generative process, and let the structure be re-generated. This is a far simpler, more elegant – more “agile” – approach to design.\n"
    },
    {
      "type": "paragraph",
      "id": "89b2bb78b3fba1f7",
      "text": "Many of these principles were refined further within the Agile programming methodology to which\nCunningham contributed, and which has also been widely influential (Cockburn, 2007). One of the\nprinciples of the “Agile Software Manifesto” is in fact to “maximize the work that isn't done” (Beck et\nal., 2001)."
    },
    {
      "type": "markdown",
      "id": "2c19fdb8-9894-4e87-95f6-dc70a9035977",
      "text": "# See also\n"
    },
    {
      "type": "markdown",
      "id": "32e1882b116ce778",
      "text": "- [[Michael Mehaffy]]\n- [[Ward Cunningham]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Wiki as Pattern Language",
        "story": []
      },
      "date": 1469453878042
    },
    {
      "item": {
        "type": "factory",
        "id": "e90d4f2d7bc9936e"
      },
      "id": "e90d4f2d7bc9936e",
      "type": "add",
      "date": 1469453906594
    },
    {
      "type": "edit",
      "id": "e90d4f2d7bc9936e",
      "item": {
        "type": "paragraph",
        "id": "e90d4f2d7bc9936e",
        "text": "We describe the origin of wiki technology, which has become widely influential, and its relationship to\nthe development of pattern languages in software. We show here how the relationship is deeper than\npreviously understood, opening up the possibility of expanded capability for wikis, including a new\ngeneration of “federated” wiki. "
      },
      "date": 1469453915795
    },
    {
      "type": "add",
      "id": "0121d7811acac17e",
      "item": {
        "type": "paragraph",
        "id": "0121d7811acac17e",
        "text": "Ward Cunningham and Michael Mehaffy."
      },
      "after": "e90d4f2d7bc9936e",
      "date": 1469453961421
    },
    {
      "type": "edit",
      "id": "0121d7811acac17e",
      "item": {
        "type": "paragraph",
        "id": "0121d7811acac17e",
        "text": "Ward Cunningham and Michael Mehaffy. [http://www.hillside.net/plop/2013/papers/Group6/plop13_preprint_51.pdf pdf]"
      },
      "date": 1469453977821
    },
    {
      "type": "edit",
      "id": "0121d7811acac17e",
      "item": {
        "type": "paragraph",
        "id": "0121d7811acac17e",
        "text": "Ward Cunningham and Michael Mehaffy. [http://www.hillside.net/plop/2013/papers/Group6/plop13_preprint_51.pdf pdf] [http://dl.acm.org/citation.cfm?id=2725707 acm]"
      },
      "date": 1469454002450
    },
    {
      "type": "fork",
      "site": "about.fed.wiki"
    },
    {
      "type": "add",
      "item": {
        "type": "factory",
        "id": "61f1f5d55e546498"
      },
      "id": "61f1f5d55e546498",
      "date": 1523178862019
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "4fc72bbc4ad6f2d3",
        "text": "# Abstract"
      },
      "after": "e90d4f2d7bc9936e",
      "id": "4fc72bbc4ad6f2d3",
      "date": 1523178864823
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "323ee9f67edb5455",
        "text": "We describe the origin of wiki technology, which has become widely influential, and its relationship to the development of pattern languages in software. We show how the relationship is deeper than previously understood. The deep shared logic points to unrealized potential, with expanded capability for wikis -- including a new generation of \"federated\" wiki. We draw conclusions about the use of this and related technology to \"curate\" (collectively gather and refine) knowledge systems - [https://dl.acm.org/citation.cfm?id=2725669.2725707 acm.org]"
      },
      "after": "4fc72bbc4ad6f2d3",
      "id": "323ee9f67edb5455",
      "date": 1523178867193
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "2c19fdb8-9894-4e87-95f6-dc70a9035977",
        "text": "# See also\n"
      },
      "after": "0121d7811acac17e",
      "id": "2c19fdb8-9894-4e87-95f6-dc70a9035977",
      "date": 1523178877710
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "32e1882b116ce778",
        "text": "- [[Michael Mehaffy]]\n- [[Wiki as pattern language]]"
      },
      "after": "2c19fdb8-9894-4e87-95f6-dc70a9035977",
      "id": "32e1882b116ce778",
      "date": 1523178881392
    },
    {
      "item": {
        "type": "factory",
        "id": "5118ebb441c4d9ee"
      },
      "id": "5118ebb441c4d9ee",
      "type": "add",
      "after": "32e1882b116ce778",
      "date": 1523179042884
    },
    {
      "type": "move",
      "order": [
        "61f1f5d55e546498",
        "e90d4f2d7bc9936e",
        "4fc72bbc4ad6f2d3",
        "323ee9f67edb5455",
        "0121d7811acac17e",
        "5118ebb441c4d9ee",
        "2c19fdb8-9894-4e87-95f6-dc70a9035977",
        "32e1882b116ce778"
      ],
      "id": "5118ebb441c4d9ee",
      "date": 1523179045043
    },
    {
      "type": "edit",
      "id": "5118ebb441c4d9ee",
      "item": {
        "type": "paragraph",
        "id": "5118ebb441c4d9ee",
        "text": "As Cunningham put it, when asked by programmer Tom Munnecke to\nexplain how “the generativity of a pattern is a way of expressing complexity:”\n<blockquote>That was an idea that excited me, and that seemed more powerful than most notion that I had seen.\n...And that is, language is generative, I follow some rules, and I can't remember when I learned them,\nbut I was probably pretty young. And that idea that I can have a set of rules that generates something\nthat I could value is really important. So the question was, why don't we do everything that way? And\nthe answer was, well we pretty much did, until we let professionals get involved. And they said, no, no,\nno, no, it's really much simpler, you know, and they made it complex by trying to make it simpler,\nbecause they didn't understand how some system of rules could generate behaviors instead of specifying\nbehaviors.<p>(Cunningham, 2011)<blockquote>"
      },
      "date": 1523179072897
    },
    {
      "type": "edit",
      "id": "5118ebb441c4d9ee",
      "item": {
        "type": "html",
        "id": "5118ebb441c4d9ee",
        "text": "As Cunningham put it, when asked by programmer Tom Munnecke to\nexplain how “the generativity of a pattern is a way of expressing complexity:”\n<blockquote>That was an idea that excited me, and that seemed more powerful than most notion that I had seen.\n...And that is, language is generative, I follow some rules, and I can't remember when I learned them,\nbut I was probably pretty young. And that idea that I can have a set of rules that generates something\nthat I could value is really important. So the question was, why don't we do everything that way? And\nthe answer was, well we pretty much did, until we let professionals get involved. And they said, no, no,\nno, no, it's really much simpler, you know, and they made it complex by trying to make it simpler,\nbecause they didn't understand how some system of rules could generate behaviors instead of specifying\nbehaviors.<p>(Cunningham, 2011)<blockquote>"
      },
      "date": 1523179073702
    },
    {
      "item": {
        "type": "factory",
        "id": "8d5dd8da2ab6a39e"
      },
      "id": "8d5dd8da2ab6a39e",
      "type": "add",
      "after": "32e1882b116ce778",
      "date": 1523179099354
    },
    {
      "type": "move",
      "order": [
        "61f1f5d55e546498",
        "e90d4f2d7bc9936e",
        "4fc72bbc4ad6f2d3",
        "323ee9f67edb5455",
        "0121d7811acac17e",
        "8d5dd8da2ab6a39e",
        "5118ebb441c4d9ee",
        "2c19fdb8-9894-4e87-95f6-dc70a9035977",
        "32e1882b116ce778"
      ],
      "id": "8d5dd8da2ab6a39e",
      "date": 1523179101123
    },
    {
      "type": "edit",
      "id": "8d5dd8da2ab6a39e",
      "item": {
        "type": "markdown",
        "id": "8d5dd8da2ab6a39e",
        "text": "# Expressing complexity\n"
      },
      "date": 1523179103009
    },
    {
      "item": {
        "type": "factory",
        "id": "6a7320fcb2999f86"
      },
      "id": "6a7320fcb2999f86",
      "type": "add",
      "after": "32e1882b116ce778",
      "date": 1523179196169
    },
    {
      "type": "move",
      "order": [
        "61f1f5d55e546498",
        "e90d4f2d7bc9936e",
        "4fc72bbc4ad6f2d3",
        "323ee9f67edb5455",
        "0121d7811acac17e",
        "8d5dd8da2ab6a39e",
        "5118ebb441c4d9ee",
        "6a7320fcb2999f86",
        "2c19fdb8-9894-4e87-95f6-dc70a9035977",
        "32e1882b116ce778"
      ],
      "id": "6a7320fcb2999f86",
      "date": 1523179197552
    },
    {
      "type": "edit",
      "id": "6a7320fcb2999f86",
      "item": {
        "type": "paragraph",
        "id": "6a7320fcb2999f86",
        "text": "This generation refers to the capacity to reproduce the essence of a functioning structure without\nhaving to specify all of its characteristics. A simple example is the distinction between the way a\ngenetic process generates the blue eyes, say, of a child, which recapitulates the blue eyes of the parent\nwithout having to specify them in minute detail (their intricate retinal pattern, round shape, etc).\nInstead, the genetic process is able to generate, and regenerate, an intricately complex structure from a\nrelatively simple set of language-like instructions.\nThe result of this kind of work is, somewhat paradoxically, to reduce the complexity of the models we \nuse for structuring our world – even as we increase their ability to handle real complexity more\neffectively. This is not so hard to understand, again, if we use an analogy to language. We do not need\nto draw little pictures to specify everything we see. Instead, we use a flexible language offering\nimmense versatility, with just a small number of generative elements. With just 26 letters and a few\nother symbols, we can cover plate tectonics, or the plays of Shakespeare, or any of an infinite range of\nother subjects.\nThis is, in essence, the structure of natural complexity as well. That is, this is the kind of structure we\nusually confront as we seek to understand the complexity of a natural system, or a large-scale design\nproblem. When confronted with such a complex phenomenon, we might choose to map all the aspects\nof its structure. This might, however, lead to an enormous and unwieldy map, posing many of the same\nstructural challenges as the problem itself. But a more elegant solution, mathematically speaking,\nwould be to identify the generative elements that produced the structure, recombine them in another\ngenerative process, and let the structure be re-generated. This is a far simpler, more elegant – more\n“agile” – approach to design.\nMany of these principles were refined further within the Agile programming methodology to which\nCunningham contributed, and which has also been widely influential (Cockburn, 2007). One of the\nprinciples of the “Agile Software Manifesto” is in fact to “maximize the work that isn't done” (Beck et\nal., 2001)."
      },
      "date": 1523179199069
    },
    {
      "type": "edit",
      "id": "6a7320fcb2999f86",
      "item": {
        "type": "paragraph",
        "id": "6a7320fcb2999f86",
        "text": "This generation refers to the capacity to reproduce the essence of a functioning structure without\nhaving to specify all of its characteristics. "
      },
      "date": 1523179227847
    },
    {
      "type": "add",
      "id": "f35d75ba6e058701",
      "item": {
        "type": "paragraph",
        "id": "f35d75ba6e058701",
        "text": "A simple example is the distinction between the way a\ngenetic process generates the blue eyes, say, of a child, which recapitulates the blue eyes of the parent\nwithout having to specify them in minute detail (their intricate retinal pattern, round shape, etc)."
      },
      "after": "6a7320fcb2999f86",
      "date": 1523179231471
    },
    {
      "type": "add",
      "id": "750167534de04f74",
      "item": {
        "type": "paragraph",
        "id": "750167534de04f74",
        "text": "Instead, the genetic process is able to generate, and regenerate, an intricately complex structure from a\nrelatively simple set of language-like instructions.\nThe result of this kind of work is, somewhat paradoxically, to reduce the complexity of the models we use for structuring our world – even as we increase their ability to handle real complexity more\neffectively. "
      },
      "after": "f35d75ba6e058701",
      "date": 1523179237305
    },
    {
      "type": "add",
      "id": "c12e8e91a117aee3",
      "item": {
        "type": "paragraph",
        "id": "c12e8e91a117aee3",
        "text": "This is not so hard to understand, again, if we use an analogy to language. We do not need to draw little pictures to specify everything we see. Instead, we use a flexible language offering immense versatility, with just a small number of generative elements. With just 26 letters and a few other symbols, we can cover plate tectonics, or the plays of Shakespeare, or any of an infinite range of other subjects."
      },
      "after": "750167534de04f74",
      "date": 1523179254248
    },
    {
      "type": "add",
      "id": "eeca74bd9da08936",
      "item": {
        "type": "paragraph",
        "id": "eeca74bd9da08936",
        "text": "This is, in essence, the structure of natural complexity as well. That is, this is the kind of structure we usually confront as we seek to understand the complexity of a natural system, or a large-scale design problem. When confronted with such a complex phenomenon, we might choose to map all the aspects of its structure. "
      },
      "after": "c12e8e91a117aee3",
      "date": 1523179273120
    },
    {
      "type": "add",
      "id": "afea2577b1ba35f7",
      "item": {
        "type": "paragraph",
        "id": "afea2577b1ba35f7",
        "text": "This might, however, lead to an enormous and unwieldy map, posing many of the same structural challenges as the problem itself. But a more elegant solution, mathematically speaking, would be to identify the generative elements that produced the structure, recombine them in another generative process, and let the structure be re-generated. This is a far simpler, more elegant – more “agile” – approach to design.\n"
      },
      "after": "eeca74bd9da08936",
      "date": 1523179287707
    },
    {
      "type": "add",
      "id": "89b2bb78b3fba1f7",
      "item": {
        "type": "paragraph",
        "id": "89b2bb78b3fba1f7",
        "text": "Many of these principles were refined further within the Agile programming methodology to which\nCunningham contributed, and which has also been widely influential (Cockburn, 2007). One of the\nprinciples of the “Agile Software Manifesto” is in fact to “maximize the work that isn't done” (Beck et\nal., 2001)."
      },
      "after": "afea2577b1ba35f7",
      "date": 1523179292248
    },
    {
      "type": "edit",
      "id": "323ee9f67edb5455",
      "item": {
        "type": "paragraph",
        "id": "323ee9f67edb5455",
        "text": "We describe the origin of wiki technology, which has become widely influential, and its relationship to the development of pattern languages in software. We show how the relationship is deeper than previously understood. The deep shared logic points to unrealized potential, with expanded capability for wikis -- including a new generation of \"federated\" wiki. "
      },
      "date": 1523179386872
    },
    {
      "type": "add",
      "id": "437bc56169de6427",
      "item": {
        "type": "paragraph",
        "id": "437bc56169de6427",
        "text": "We draw conclusions about the use of this and related technology to \"curate\" (collectively gather and refine) knowledge systems - [https://dl.acm.org/citation.cfm?id=2725669.2725707 acm.org]"
      },
      "after": "323ee9f67edb5455",
      "date": 1523179393316
    },
    {
      "type": "remove",
      "id": "323ee9f67edb5455",
      "date": 1523179394868
    },
    {
      "type": "move",
      "order": [
        "61f1f5d55e546498",
        "4fc72bbc4ad6f2d3",
        "e90d4f2d7bc9936e",
        "437bc56169de6427",
        "0121d7811acac17e",
        "8d5dd8da2ab6a39e",
        "5118ebb441c4d9ee",
        "6a7320fcb2999f86",
        "f35d75ba6e058701",
        "750167534de04f74",
        "c12e8e91a117aee3",
        "eeca74bd9da08936",
        "afea2577b1ba35f7",
        "89b2bb78b3fba1f7",
        "2c19fdb8-9894-4e87-95f6-dc70a9035977",
        "32e1882b116ce778"
      ],
      "id": "e90d4f2d7bc9936e",
      "date": 1523179396967
    },
    {
      "type": "edit",
      "id": "61f1f5d55e546498",
      "item": {
        "type": "paragraph",
        "id": "61f1f5d55e546498",
        "text": "\"Wiki is pattern language\""
      },
      "date": 1523182499700
    },
    {
      "type": "edit",
      "id": "61f1f5d55e546498",
      "item": {
        "type": "paragraph",
        "id": "61f1f5d55e546498",
        "text": "\"Wiki is pattern language\" is an artical published by [[Ward Cunningham]] and [["
      },
      "date": 1523182556497
    },
    {
      "type": "edit",
      "id": "61f1f5d55e546498",
      "item": {
        "type": "paragraph",
        "id": "61f1f5d55e546498",
        "text": "\"Wiki is pattern language\" is an artical published by [[Ward Cunningham]] and [[Michael Mehaffy]] in 2011."
      },
      "date": 1523182587922
    },
    {
      "type": "edit",
      "id": "32e1882b116ce778",
      "item": {
        "type": "markdown",
        "id": "32e1882b116ce778",
        "text": "- [[Michael Mehaffy]]\n- [[Ward Cunningham]]"
      },
      "date": 1523182606858
    },
    {
      "type": "edit",
      "id": "61f1f5d55e546498",
      "item": {
        "type": "paragraph",
        "id": "61f1f5d55e546498",
        "text": "\"Wiki is pattern language\" is an artical published by [[Ward Cunningham]] and [[Michael Mehaffy]] in 2013. I've quoted extensively from this article below, with a view to reworking it."
      },
      "date": 1523182662638
    },
    {
      "type": "edit",
      "id": "61f1f5d55e546498",
      "item": {
        "type": "paragraph",
        "id": "61f1f5d55e546498",
        "text": "\"Wiki is pattern language\" is an artical published by [[Ward Cunningham]] and [[Michael Mehaffy]] in 2013 - [http://dl.acm.org/citation.cfm?id=2725707 acm]"
      },
      "date": 1523182676596
    },
    {
      "type": "add",
      "id": "aae8f72508cd3ff0",
      "item": {
        "type": "paragraph",
        "id": "aae8f72508cd3ff0",
        "text": "I've quoted extensively from this article below, with a view to reworking it. The text, and discussions in the video below align very well with my practice developing software, and experience working with architects for a number of years on the [[Architectonic Archive]] and [[Architex Anonymous]] with [[Lena Nalbach]]."
      },
      "after": "61f1f5d55e546498",
      "date": 1523182807927
    },
    {
      "type": "add",
      "id": "8c56d1d9b30674c1",
      "item": {
        "type": "paragraph",
        "id": "8c56d1d9b30674c1",
        "text": "The two things I find missing somewhat from the discussion are [[Biological Metaphors]], the cybernetic thinking of people like [[Stafford Beer]] ([[Viable Systems Model]], and well - [[Actual Patterns]]. "
      },
      "after": "aae8f72508cd3ff0",
      "date": 1523182984069
    },
    {
      "type": "add",
      "id": "c3863fd805c53beb",
      "item": {
        "type": "paragraph",
        "id": "c3863fd805c53beb",
        "text": "I see as a core element of the [[Platform Earth]] project the need both to use \"wiki as pattern language\" as a means of communicating complex systems"
      },
      "after": "8c56d1d9b30674c1",
      "date": 1523183007523
    }
  ]
}