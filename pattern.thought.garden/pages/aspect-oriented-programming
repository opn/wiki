{
  "title": "Aspect-oriented programming",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Aspect-oriented programming"
      },
      "date": 1507112483406,
      "source": {
        "pageTitle": "Aspect-oriented programming",
        "pageSlug": "Aspect-oriented_programming",
        "url": "https://en.wikipedia.org/wiki/Aspect-oriented_programming",
        "date": 1507112483406,
        "link_dictionary": {
          "wiki_links": {
            "Comparison to other programming paradigms": {
              "section_number": 9,
              "section_level": 2,
              "dot_number": 5
            },
            "See also": {
              "section_number": 13,
              "section_level": 2,
              "dot_number": 9
            },
            "Motivation and basic concepts": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "External links": {
              "section_number": 16,
              "section_level": 2,
              "dot_number": 12
            },
            "Join point models": {
              "section_number": 3,
              "section_level": 2,
              "dot_number": 3
            },
            "Notes and references": {
              "section_number": 14,
              "section_level": 2,
              "dot_number": 10
            },
            "Adoption issues": {
              "section_number": 10,
              "section_level": 2,
              "dot_number": 6
            },
            "Implementation": {
              "section_number": 7,
              "section_level": 2,
              "dot_number": 4
            },
            "History": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Implementations": {
              "section_number": 12,
              "section_level": 2,
              "dot_number": 8
            },
            "Criticism": {
              "section_number": 11,
              "section_level": 2,
              "dot_number": 7
            },
            "Further reading": {
              "section_number": 15,
              "section_level": 2,
              "dot_number": 11
            }
          },
          "default": {
            "transport": "https://rest.livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://rest.livecode.world/mediawiki/transportAgain",
        "rev": 796473373,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "add",
      "id": "38db11f5-3ab6-4d94-b222-d22fa2820502",
      "item": {
        "type": "factory",
        "id": "38db11f5-3ab6-4d94-b222-d22fa2820502"
      },
      "date": 1507112483410
    },
    {
      "type": "edit",
      "id": "38db11f5-3ab6-4d94-b222-d22fa2820502",
      "item": {
        "id": "38db11f5-3ab6-4d94-b222-d22fa2820502",
        "type": "paragraph",
        "text": "In computing, aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding additional behavior to existing code (an advice) without modifying the code itself, instead separately specifying which code is modified via a \"pointcut\" specification, such as \"log all function calls when the function's name begins with 'set'\". This allows behaviors that are not central to the business logic (such as logging) to be added to a program without cluttering the code, core to the functionality. AOP forms a basis for aspect-oriented software development - [https://en.wikipedia.org/wiki/Aspect-oriented_programming wikipedia]"
      },
      "date": 1507112483410
    },
    {
      "order": [
        "38db11f5-3ab6-4d94-b222-d22fa2820502"
      ],
      "id": "pID",
      "type": "move",
      "date": 1507112483410
    },
    {
      "type": "add",
      "id": "818b6995-da33-4ae9-8ea0-1a8c23a1ec50",
      "after": "38db11f5-3ab6-4d94-b222-d22fa2820502",
      "item": {
        "type": "factory",
        "id": "818b6995-da33-4ae9-8ea0-1a8c23a1ec50"
      },
      "date": 1507112483560
    },
    {
      "type": "edit",
      "id": "818b6995-da33-4ae9-8ea0-1a8c23a1ec50",
      "item": {
        "id": "818b6995-da33-4ae9-8ea0-1a8c23a1ec50",
        "type": "paragraph",
        "text": "AOP includes programming methods and tools that support the modularization of concerns at the level of the source code, while \"aspect-oriented software development\" refers to a whole engineering discipline."
      },
      "date": 1507112483560
    },
    {
      "type": "add",
      "id": "96ff0b1c-e623-40e0-994e-080adb068529",
      "after": "818b6995-da33-4ae9-8ea0-1a8c23a1ec50",
      "item": {
        "type": "factory",
        "id": "96ff0b1c-e623-40e0-994e-080adb068529"
      },
      "date": 1507112483561
    },
    {
      "type": "edit",
      "id": "96ff0b1c-e623-40e0-994e-080adb068529",
      "item": {
        "id": "96ff0b1c-e623-40e0-994e-080adb068529",
        "type": "paragraph",
        "text": "Aspect-oriented programming entails breaking down program logic into distinct parts (so-called concerns, cohesive areas of functionality). Nearly all programming paradigms support some level of grouping and encapsulation of concerns into separate, independent entities by providing abstractions (e.g., functions, procedures, modules, classes, methods) that can be used for implementing, abstracting and composing these concerns. Some concerns \"cut across\" multiple abstractions in a program, and defy these forms of implementation. These concerns are called cross-cutting concerns or horizontal concerns."
      },
      "date": 1507112483561
    },
    {
      "type": "add",
      "id": "3fcb57bb-976d-45d4-aa21-8d4c9591276c",
      "after": "96ff0b1c-e623-40e0-994e-080adb068529",
      "item": {
        "type": "factory",
        "id": "3fcb57bb-976d-45d4-aa21-8d4c9591276c"
      },
      "date": 1507112483562
    },
    {
      "type": "edit",
      "id": "3fcb57bb-976d-45d4-aa21-8d4c9591276c",
      "item": {
        "id": "3fcb57bb-976d-45d4-aa21-8d4c9591276c",
        "type": "paragraph",
        "text": "Logging exemplifies a crosscutting concern because a logging strategy necessarily affects every logged part of the system. Logging thereby crosscuts all logged classes and methods."
      },
      "date": 1507112483562
    },
    {
      "type": "add",
      "id": "eb7502f3-efaa-4a31-8e93-86df84823e8b",
      "after": "3fcb57bb-976d-45d4-aa21-8d4c9591276c",
      "item": {
        "type": "factory",
        "id": "eb7502f3-efaa-4a31-8e93-86df84823e8b"
      },
      "date": 1507112483562
    },
    {
      "type": "edit",
      "id": "eb7502f3-efaa-4a31-8e93-86df84823e8b",
      "item": {
        "id": "eb7502f3-efaa-4a31-8e93-86df84823e8b",
        "type": "paragraph",
        "text": "All AOP implementations have some crosscutting expressions that encapsulate each concern in one place. The difference between implementations lies in the power, safety, and usability of the constructs provided. For example, interceptors that specify the methods to intercept express a limited form of crosscutting, without much support for type-safety or debugging. AspectJ has a number of such expressions and encapsulates them in a special class, an aspect. For example, an aspect can alter the behavior of the base code (the non-aspect part of a program) by applying advice (additional behavior) at various join points (points in a program) specified in a quantification or query called a pointcut (that detects whether a given join point matches). An aspect can also make binary-compatible structural changes to other classes, like adding members or parents."
      },
      "date": 1507112483562
    },
    {
      "order": [
        "38db11f5-3ab6-4d94-b222-d22fa2820502",
        "818b6995-da33-4ae9-8ea0-1a8c23a1ec50",
        "96ff0b1c-e623-40e0-994e-080adb068529",
        "3fcb57bb-976d-45d4-aa21-8d4c9591276c",
        "eb7502f3-efaa-4a31-8e93-86df84823e8b"
      ],
      "id": "pID",
      "type": "move",
      "date": 1507112483562
    },
    {
      "type": "add",
      "id": "fb15b761-4317-4dbc-95fa-69cfd4974bb7",
      "after": "eb7502f3-efaa-4a31-8e93-86df84823e8b",
      "item": {
        "type": "factory",
        "id": "fb15b761-4317-4dbc-95fa-69cfd4974bb7"
      },
      "date": 1507112483563
    },
    {
      "type": "edit",
      "id": "fb15b761-4317-4dbc-95fa-69cfd4974bb7",
      "item": {
        "id": "fb15b761-4317-4dbc-95fa-69cfd4974bb7",
        "type": "markdown",
        "text": "# See also\n* [[History]]\n* [[Motivation and basic concepts]]\n* [[Join point models]]\n* [[Implementation]]\n* [[Comparison to other programming paradigms]]\n* [[Adoption issues]]\n* [[Criticism]]\n* [[Implementations]]\n* [[See also]]\n* [[Notes and references]]\n* [[Further reading]]\n* [[External links]]"
      },
      "date": 1507112483563
    },
    {
      "type": "fork",
      "date": 1507112489483
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "38db11f5-3ab6-4d94-b222-d22fa2820502",
      "text": "In computing, aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding additional behavior to existing code (an advice) without modifying the code itself, instead separately specifying which code is modified via a \"pointcut\" specification, such as \"log all function calls when the function's name begins with 'set'\". This allows behaviors that are not central to the business logic (such as logging) to be added to a program without cluttering the code, core to the functionality. AOP forms a basis for aspect-oriented software development - [https://en.wikipedia.org/wiki/Aspect-oriented_programming wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "818b6995-da33-4ae9-8ea0-1a8c23a1ec50",
      "text": "AOP includes programming methods and tools that support the modularization of concerns at the level of the source code, while \"aspect-oriented software development\" refers to a whole engineering discipline."
    },
    {
      "type": "paragraph",
      "id": "96ff0b1c-e623-40e0-994e-080adb068529",
      "text": "Aspect-oriented programming entails breaking down program logic into distinct parts (so-called concerns, cohesive areas of functionality). Nearly all programming paradigms support some level of grouping and encapsulation of concerns into separate, independent entities by providing abstractions (e.g., functions, procedures, modules, classes, methods) that can be used for implementing, abstracting and composing these concerns. Some concerns \"cut across\" multiple abstractions in a program, and defy these forms of implementation. These concerns are called cross-cutting concerns or horizontal concerns."
    },
    {
      "type": "paragraph",
      "id": "3fcb57bb-976d-45d4-aa21-8d4c9591276c",
      "text": "Logging exemplifies a crosscutting concern because a logging strategy necessarily affects every logged part of the system. Logging thereby crosscuts all logged classes and methods."
    },
    {
      "type": "paragraph",
      "id": "eb7502f3-efaa-4a31-8e93-86df84823e8b",
      "text": "All AOP implementations have some crosscutting expressions that encapsulate each concern in one place. The difference between implementations lies in the power, safety, and usability of the constructs provided. For example, interceptors that specify the methods to intercept express a limited form of crosscutting, without much support for type-safety or debugging. AspectJ has a number of such expressions and encapsulates them in a special class, an aspect. For example, an aspect can alter the behavior of the base code (the non-aspect part of a program) by applying advice (additional behavior) at various join points (points in a program) specified in a quantification or query called a pointcut (that detects whether a given join point matches). An aspect can also make binary-compatible structural changes to other classes, like adding members or parents."
    },
    {
      "type": "markdown",
      "id": "fb15b761-4317-4dbc-95fa-69cfd4974bb7",
      "text": "# See also\n* [[History]]\n* [[Motivation and basic concepts]]\n* [[Join point models]]\n* [[Implementation]]\n* [[Comparison to other programming paradigms]]\n* [[Adoption issues]]\n* [[Criticism]]\n* [[Implementations]]\n* [[See also]]\n* [[Notes and references]]\n* [[Further reading]]\n* [[External links]]"
    }
  ]
}