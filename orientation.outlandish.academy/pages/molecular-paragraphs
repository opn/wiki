{"journal":[{"date":1423001572812,"error":{"msg":"","response":"","type":"error"},"item":{"story":"","title":"Molecular Paragraphs"},"type":"create"},{"date":1423001583954,"type":"fork"},{"date":1423001586894,"id":"6252452b9c41662e","item":{"id":"6252452b9c41662e","text":"In federated wiki the lowly paragraph (and in a broader sense the 'item') has a special place. Paragraphs have their own IDs and edit histories. They can define diferent formats (Markdown, HTML, Plain Text) and still live on the same page.","type":"paragraph"},"type":"add"},{"after":"6252452b9c41662e","date":1423001589344,"id":"1fc5944887661110","item":{"id":"1fc5944887661110","text":"We call non-text paragraphs \u0022items\u0022 but they work the same way. When the Federated Wiki client hits an \u0022image\u0022 item, it calls the image processing code, and produces the image from the encoded data on that page. The image is not an embedded object, a reference to a resource elsewhere. It's actually code stored on the page, which follows the page when you fork it.","type":"paragraph"},"type":"add"},{"after":"1fc5944887661110","date":1423001592111,"id":"980a02d10df44f64","item":{"id":"980a02d10df44f64","text":"The same goes for CSV data. A comma separated datasource on a page is just as draggable and copyable as a paragraph, even though it is parsed as data. The ByteBeat plugin is a novelty, but shows how audio can be an output of a plugin. The MathJax plugin shows how mathematical markup can produce a graphic representation of a formula.","type":"paragraph"},"type":"add"},{"after":"980a02d10df44f64","date":1423001594104,"id":"382d0d5710bfc767","item":{"id":"382d0d5710bfc767","text":"In a \u0022normal\u0022 system, all of these objects would live outside the page. Here they live inside it, and benefit by being able to converse with one another and inherit general page capabilities.","type":"paragraph"},"type":"add"},{"date":1423001628116,"id":"1fc5944887661110","item":{"id":"1fc5944887661110","text":"We call non-text paragraphs \u0022items\u0022 but they work the same way. When the Federated Wiki client hits an \u0022image\u0022 item, it calls the image processing code, and produces the image from the encoded data on that page item. The image is not an embedded object, a reference to a resource elsewhere. It's actually code stored on the page, which follows the page when you fork it.","type":"paragraph"},"type":"edit"},{"date":1423001674627,"id":"382d0d5710bfc767","item":{"id":"382d0d5710bfc767","text":"In a \u0022normal\u0022 system, all of these objects would live outside the page. Here they live inside it as equal citizens, and benefit by being able to converse with one another and inherit general page capabilities.","type":"paragraph"},"type":"edit"},{"date":1423001824733,"id":"6252452b9c41662e","item":{"id":"6252452b9c41662e","text":"In federated wiki the lowly paragraph (and in a broader sense the 'item') has a special place. Paragraphs have their own IDs and edit histories. They are draggable. They can define diferent formats (Markdown, HTML, Plain Text) and still live on the same page.","type":"paragraph"},"type":"edit"},{"date":1423006212999,"id":"1fc5944887661110","item":{"id":"1fc5944887661110","text":"We call non-text paragraphs \u0022items\u0022 but they work the same way. When the Federated Wiki client hits an \u0022image\u0022 item, it calls the image processing code, and produces the image from the encoded data in that page item. The image is not an embedded object, a reference to a resource elsewhere. It's actually code stored on the page, which follows the page when you fork it.","type":"paragraph"},"type":"edit"},{"date":1423006241002,"id":"382d0d5710bfc767","item":{"id":"382d0d5710bfc767","text":"In a \u0022normal\u0022 system, all of these objects would live outside the page. Here they live inside it as equal citizens, and benefit by being able to converse with one another and through inheriting general page capabilities.","type":"paragraph"},"type":"edit"},{"date":1423006275176,"id":"980a02d10df44f64","item":{"id":"980a02d10df44f64","text":"The same goes for numerical data. A comma separated datasource on a page is just as draggable and copyable as a paragraph, even though it is parsed as data. The ByteBeat plugin is a novelty, but shows how audio can be an output of a plugin. The MathJax plugin shows how mathematical markup can produce a graphic representation of a formula.","type":"paragraph"},"type":"edit"},{"date":1423097552002,"id":"1fc5944887661110","item":{"id":"1fc5944887661110","text":"We call non-text paragraphs \u0022items\u0022 but they work the same way. When the Federated Wiki client hits an \u0022image\u0022 item, it calls the image processing code, and produces the image from the encoded data in that page item. The image is not an embedded object. It's not a reference to a resource elsewhere. It's actually code stored on the page, which follows the page when you fork it.","type":"paragraph"},"type":"edit"},{"date":1423097578257,"id":"980a02d10df44f64","item":{"id":"980a02d10df44f64","text":"The same goes for numerical data. A comma separated datasource on a page is just as draggable and copyable as a paragraph, even though it is parsed as data. Another example - the ByteBeat plugin is a novelty, but shows how audio can be an output of a plugin. The MathJax plugin shows how mathematical markup can produce a graphic representation of a formula.","type":"paragraph"},"type":"edit"},{"date":1424292363426,"site":"orientation.hapgood.net","type":"fork"}],"story":[{"id":"6252452b9c41662e","text":"In federated wiki the lowly paragraph (and in a broader sense the 'item') has a special place. Paragraphs have their own IDs and edit histories. They are draggable. They can define diferent formats (Markdown, HTML, Plain Text) and still live on the same page.","type":"paragraph"},{"id":"1fc5944887661110","text":"We call non-text paragraphs \u0022items\u0022 but they work the same way. When the Federated Wiki client hits an \u0022image\u0022 item, it calls the image processing code, and produces the image from the encoded data in that page item. The image is not an embedded object. It's not a reference to a resource elsewhere. It's actually code stored on the page, which follows the page when you fork it.","type":"paragraph"},{"id":"980a02d10df44f64","text":"The same goes for numerical data. A comma separated datasource on a page is just as draggable and copyable as a paragraph, even though it is parsed as data. Another example - the ByteBeat plugin is a novelty, but shows how audio can be an output of a plugin. The MathJax plugin shows how mathematical markup can produce a graphic representation of a formula.","type":"paragraph"},{"id":"382d0d5710bfc767","text":"In a \u0022normal\u0022 system, all of these objects would live outside the page. Here they live inside it as equal citizens, and benefit by being able to converse with one another and through inheriting general page capabilities.","type":"paragraph"}],"title":"Molecular Paragraphs"}