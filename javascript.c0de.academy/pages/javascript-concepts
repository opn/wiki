{
  "title": "Javascript Concepts",
  "story": [
    {
      "type": "paragraph",
      "id": "3751dc2a38f0d8ea",
      "text": "Here we discuss some of the core ideas used in [[Javascript]]:"
    },
    {
      "type": "markdown",
      "id": "5418298a0722ebec",
      "text": "- [[JavaScript Callbacks]]\n- [[JavaScript Scope]]"
    },
    {
      "id": "3f9b9388d952ca56",
      "type": "reference",
      "site": "nrn.io",
      "slug": "javascript-callbacks",
      "title": "JavaScript Callbacks",
      "text": "Callbacks are a central idea in JavaScript due to it's asynchronous nature."
    },
    {
      "id": "11a1f90f63f6b2a2",
      "type": "reference",
      "site": "nrn.io",
      "slug": "javascript-scope",
      "title": "JavaScript Scope",
      "text": "JavaScript has lexical, function level scoping. This means that any inner scope has access to the outer scope where it is defined, no matter when/how it is invoked."
    },
    {
      "id": "0b7b2db2c6677fed",
      "type": "reference",
      "site": "nrn.io",
      "slug": "javascript-inheritance",
      "title": "JavaScript Inheritance",
      "text": "JavaScript has single, prototypical inheritance. This means that each object can inherit from exactly one other object, any other object. And they can form a chain."
    },
    {
      "id": "a01f3bf818fcc581",
      "type": "reference",
      "site": "nrn.io",
      "slug": "javascript-streams",
      "title": "JavaScript Streams",
      "text": "Streams are an awesome asynchronous io abstraction. Streams come from the Unix tradition, and are one of the most important factors in node modules ability to uphold the [http://en.wikipedia.org/wiki/Unix_philosophy Unix philosophy]."
    },
    {
      "id": "bca43ff6f1b47b1c",
      "type": "reference",
      "site": "nrn.io",
      "slug": "javascript-invocation-context",
      "title": "JavaScript Invocation Context",
      "text": "Invocation context is the key to managing the value of `this` within a function. `this` is one way to facilitate code reuse, by making our functions more general. Instead of operating on one specific object in the scope in which they are declared, they can instead operate on the object that is their invocation context."
    },
    {
      "id": "b9521192b80b4aee",
      "type": "reference",
      "site": "nrn.io",
      "slug": "javascript-higher-level-abstractions",
      "title": "JavaScript Higher Level Abstractions",
      "text": "These resources build on the rest of our knowledge to create expressive, reusable, easy to interact with code."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Javascript Concepts",
        "story": []
      },
      "date": 1523432860515
    },
    {
      "item": {
        "type": "factory",
        "id": "3751dc2a38f0d8ea"
      },
      "id": "3751dc2a38f0d8ea",
      "type": "add",
      "date": 1523432861539
    },
    {
      "type": "edit",
      "id": "3751dc2a38f0d8ea",
      "item": {
        "type": "paragraph",
        "id": "3751dc2a38f0d8ea",
        "text": "Here we discuss some of the core ideas used in [[Javascript]]:"
      },
      "date": 1523432863080
    },
    {
      "item": {
        "type": "factory",
        "id": "5418298a0722ebec"
      },
      "id": "5418298a0722ebec",
      "type": "add",
      "after": "3751dc2a38f0d8ea",
      "date": 1523432883570
    },
    {
      "type": "edit",
      "id": "5418298a0722ebec",
      "item": {
        "type": "paragraph",
        "id": "5418298a0722ebec",
        "text": "- [[JavaScript Callbacks]]"
      },
      "date": 1523432888258
    },
    {
      "type": "edit",
      "id": "5418298a0722ebec",
      "item": {
        "type": "markdown",
        "id": "5418298a0722ebec",
        "text": "- [[JavaScript Callbacks]]"
      },
      "date": 1523432889958
    },
    {
      "type": "add",
      "item": {
        "id": "3f9b9388d952ca56",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-callbacks",
        "title": "JavaScript Callbacks",
        "text": "Callbacks are a central idea in JavaScript due to it's asynchronous nature."
      },
      "after": "5418298a0722ebec",
      "id": "3f9b9388d952ca56",
      "date": 1523432914914
    },
    {
      "type": "edit",
      "id": "5418298a0722ebec",
      "item": {
        "type": "markdown",
        "id": "5418298a0722ebec",
        "text": "- [[JavaScript Callbacks]]\n- [[JavaScript Scope]]"
      },
      "date": 1523432929626
    },
    {
      "type": "add",
      "item": {
        "id": "11a1f90f63f6b2a2",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-scope",
        "title": "JavaScript Scope",
        "text": "JavaScript has lexical, function level scoping. This means that any inner scope has access to the outer scope where it is defined, no matter when/how it is invoked."
      },
      "after": "3f9b9388d952ca56",
      "id": "11a1f90f63f6b2a2",
      "date": 1523432936347
    },
    {
      "type": "add",
      "item": {
        "id": "0b7b2db2c6677fed",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-inheritance",
        "title": "JavaScript Inheritance",
        "text": "JavaScript has single, prototypical inheritance. This means that each object can inherit from exactly one other object, any other object. And they can form a chain."
      },
      "after": "11a1f90f63f6b2a2",
      "id": "0b7b2db2c6677fed",
      "date": 1523432945810
    },
    {
      "type": "add",
      "item": {
        "id": "a01f3bf818fcc581",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-streams",
        "title": "JavaScript Streams",
        "text": "Streams are an awesome asynchronous io abstraction. Streams come from the Unix tradition, and are one of the most important factors in node modules ability to uphold the [http://en.wikipedia.org/wiki/Unix_philosophy Unix philosophy]."
      },
      "after": "0b7b2db2c6677fed",
      "id": "a01f3bf818fcc581",
      "date": 1523432947602
    },
    {
      "type": "add",
      "item": {
        "id": "bca43ff6f1b47b1c",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-invocation-context",
        "title": "JavaScript Invocation Context",
        "text": "Invocation context is the key to managing the value of `this` within a function. `this` is one way to facilitate code reuse, by making our functions more general. Instead of operating on one specific object in the scope in which they are declared, they can instead operate on the object that is their invocation context."
      },
      "after": "a01f3bf818fcc581",
      "id": "bca43ff6f1b47b1c",
      "date": 1523432949882
    },
    {
      "type": "add",
      "item": {
        "id": "b9521192b80b4aee",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-higher-level-abstractions",
        "title": "JavaScript Higher Level Abstractions",
        "text": "These resources build on the rest of our knowledge to create expressive, reusable, easy to interact with code."
      },
      "after": "bca43ff6f1b47b1c",
      "id": "b9521192b80b4aee",
      "date": 1523432952148
    }
  ]
}