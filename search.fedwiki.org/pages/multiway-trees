{
  "title": "Multiway Trees",
  "story": [
    {
      "type": "paragraph",
      "id": "1f2dc4636d47aa5c",
      "text": "Tree structures lend themselves to external searching, if we choose an appropriate representation for grouped nodes. From Knuth volume 3, section 6.2.4."
    },
    {
      "type": "paragraph",
      "id": "d2af3c994482ad80",
      "text": "See test in javascript. [http://c2.com/b-tree.html page]"
    },
    {
      "type": "paragraph",
      "id": "92555beb8bcf0086",
      "text": "The b-tree, discovered in 1970, makes both search and update guaranteed efficient. A b-tree of order m satisfies these properties."
    },
    {
      "type": "markdown",
      "id": "d80732bbc064f08e",
      "text": "* Every node has at most m children.\n* Every interior node has at least m/2 children.\n* The root has at least 2 children, unless it is a leaf.\n* All leaves appear on the same level, carry no info.\n* A nonleaf node with k children has k-1 keys."
    },
    {
      "type": "paragraph",
      "id": "c3031429193deed5",
      "text": "A node p with j keys will have j+1 pointers."
    },
    {
      "type": "code",
      "id": "8be1dfbdbf54b3b3",
      "text": "p0, k1, p1, k2, p2 ... pj-1, kj, pj"
    },
    {
      "type": "paragraph",
      "id": "75ddc965151143b0",
      "text": "Search: if p does not contain k, search non-null pi where k is between ki and ki+1."
    },
    {
      "type": "paragraph",
      "id": "f1e8f30873b5ffda",
      "text": "Insert: if p is full, split and update p's parent. Add a level when root splits."
    },
    {
      "type": "paragraph",
      "id": "9c0ab3453b2772e4",
      "text": "Delete: left as exercise 6."
    },
    {
      "type": "paragraph",
      "id": "255277396c30aeee",
      "text": "The b+-tree varies k with node level, omits records from interior nodes and links each leaf to its successor for sequential access."
    },
    {
      "type": "paragraph",
      "id": "324ce251eda42dee",
      "text": "The b*-tree delays splits by moving keys to siblings. When sibling fills, we split two nodes into three, each 2/3 full."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Multiway Trees",
        "story": []
      },
      "date": 1450030589152
    },
    {
      "item": {
        "type": "factory",
        "id": "1f2dc4636d47aa5c"
      },
      "id": "1f2dc4636d47aa5c",
      "type": "add",
      "date": 1450030617807
    },
    {
      "type": "edit",
      "id": "1f2dc4636d47aa5c",
      "item": {
        "type": "paragraph",
        "id": "1f2dc4636d47aa5c",
        "text": "Tree structures lend themselves to external searching, if we choose an appropriate representation. From Knuth volume 3, section 6.2.4."
      },
      "date": 1450030747128
    },
    {
      "type": "edit",
      "id": "1f2dc4636d47aa5c",
      "item": {
        "type": "paragraph",
        "id": "1f2dc4636d47aa5c",
        "text": "Tree structures lend themselves to external searching, if we choose an appropriate representation for grouped nodes. From Knuth volume 3, section 6.2.4."
      },
      "date": 1450030801487
    },
    {
      "item": {
        "type": "factory",
        "id": "92555beb8bcf0086"
      },
      "id": "92555beb8bcf0086",
      "type": "add",
      "after": "1f2dc4636d47aa5c",
      "date": 1450030908761
    },
    {
      "type": "edit",
      "id": "92555beb8bcf0086",
      "item": {
        "type": "paragraph",
        "id": "92555beb8bcf0086",
        "text": "The b-tree, discovered in 1970, makes both search and update guaranteed efficient. A b-tree of order m satisfies these properties."
      },
      "date": 1450031024304
    },
    {
      "type": "add",
      "id": "d80732bbc064f08e",
      "item": {
        "type": "paragraph",
        "id": "d80732bbc064f08e",
        "text": "* Every node has at most m children."
      },
      "after": "92555beb8bcf0086",
      "date": 1450031064196
    },
    {
      "type": "edit",
      "id": "d80732bbc064f08e",
      "item": {
        "type": "markdown",
        "id": "d80732bbc064f08e",
        "text": "* Every node has at most m children."
      },
      "date": 1450031066679
    },
    {
      "type": "edit",
      "id": "d80732bbc064f08e",
      "item": {
        "type": "markdown",
        "id": "d80732bbc064f08e",
        "text": "* Every node has at most m children.\n* Every interior node has at least m/2 children.\n* The root has at least 2 children, unless it is a leaf.\n* All leaves appear on the same level, carry no info.\n* A nonleaf node with k children has k-1 keys."
      },
      "date": 1450031255198
    },
    {
      "item": {
        "type": "factory",
        "id": "8be1dfbdbf54b3b3"
      },
      "id": "8be1dfbdbf54b3b3",
      "type": "add",
      "after": "d80732bbc064f08e",
      "date": 1450031417768
    },
    {
      "type": "edit",
      "id": "8be1dfbdbf54b3b3",
      "item": {
        "type": "code",
        "id": "8be1dfbdbf54b3b3",
        "text": "p0, k1, p1, k2, p2 ... pj-1, kj, pj"
      },
      "date": 1450031497828
    },
    {
      "item": {
        "type": "factory",
        "id": "c3031429193deed5"
      },
      "id": "c3031429193deed5",
      "type": "add",
      "after": "8be1dfbdbf54b3b3",
      "date": 1450031767319
    },
    {
      "type": "edit",
      "id": "c3031429193deed5",
      "item": {
        "type": "paragraph",
        "id": "c3031429193deed5",
        "text": "A node p with j keys will have j+1 pointers."
      },
      "date": 1450032116172
    },
    {
      "type": "move",
      "order": [
        "1f2dc4636d47aa5c",
        "92555beb8bcf0086",
        "d80732bbc064f08e",
        "c3031429193deed5",
        "8be1dfbdbf54b3b3"
      ],
      "id": "c3031429193deed5",
      "date": 1450032119921
    },
    {
      "item": {
        "type": "factory",
        "id": "75ddc965151143b0"
      },
      "id": "75ddc965151143b0",
      "type": "add",
      "after": "8be1dfbdbf54b3b3",
      "date": 1450032124262
    },
    {
      "type": "edit",
      "id": "75ddc965151143b0",
      "item": {
        "type": "paragraph",
        "id": "75ddc965151143b0",
        "text": "Search: if p does not contain k, search non-null pi where k is between ki and ki+1."
      },
      "date": 1450032416390
    },
    {
      "type": "add",
      "id": "f1e8f30873b5ffda",
      "item": {
        "type": "paragraph",
        "id": "f1e8f30873b5ffda",
        "text": "Insert: if p is full, split and update p's parent."
      },
      "after": "75ddc965151143b0",
      "date": 1450033133497
    },
    {
      "type": "edit",
      "id": "f1e8f30873b5ffda",
      "item": {
        "type": "paragraph",
        "id": "f1e8f30873b5ffda",
        "text": "Insert: if p is full, split and update p's parent. Add a level when root splits."
      },
      "date": 1450033179927
    },
    {
      "type": "add",
      "id": "255277396c30aeee",
      "item": {
        "type": "paragraph",
        "id": "255277396c30aeee",
        "text": "The b+-tree varies k with node level, omits records from interior nodes and links each leaf to its successor for sequential access."
      },
      "after": "f1e8f30873b5ffda",
      "date": 1450033877639
    },
    {
      "type": "add",
      "id": "324ce251eda42dee",
      "item": {
        "type": "paragraph",
        "id": "324ce251eda42dee",
        "text": "The b*-tree delays splits by moving keys to siblings. When sibling fills, we split two nodes into three, each 2/3 full."
      },
      "after": "255277396c30aeee",
      "date": 1450034190573
    },
    {
      "type": "add",
      "id": "9c0ab3453b2772e4",
      "item": {
        "type": "paragraph",
        "id": "9c0ab3453b2772e4",
        "text": "Delete: left as exercise 6."
      },
      "after": "f1e8f30873b5ffda",
      "date": 1450034406361
    },
    {
      "type": "add",
      "id": "d2af3c994482ad80",
      "item": {
        "type": "paragraph",
        "id": "d2af3c994482ad80",
        "text": "See our test implementation in javascript. [http://c2.com/b-tree.html page]"
      },
      "after": "1f2dc4636d47aa5c",
      "date": 1450060646862
    },
    {
      "type": "edit",
      "id": "d2af3c994482ad80",
      "item": {
        "type": "paragraph",
        "id": "d2af3c994482ad80",
        "text": "See test in javascript. [http://c2.com/b-tree.html page]"
      },
      "date": 1450060768077
    },
    {
      "type": "fork",
      "site": "ward.asia.wiki.org",
      "date": 1450108068549
    },
    {
      "type": "fork",
      "site": "future.fedwiki.org",
      "date": 1503059949645
    }
  ]
}