{
  "title": "DCI Architecture",
  "story": [
    {
      "type": "paragraph",
      "id": "c86f88da103e3558",
      "text": "Here we document the DCI / Data, Collaboration / Context, Interaction approach to software development., as championed by [[Jim Coplien]] and [[Trygve Reenskaug]]"
    },
    {
      "type": "markdown",
      "id": "3ee5b0e22aaff2e1",
      "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION/(CONTEXT), INTERACTION.\nRead more about the [[DCI Architecture]].\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. \n\nSome other quotes from the same article (*some slight remodelling has taken place, in the interest of directness*):"
    },
    {
      "type": "markdown",
      "id": "1a252a9b20cfeaf9",
      "text": "> \"The Model, View, Controller-User approach does a good job of supporting the *thinking* part of computer/human interaction.\n> Unfortunately, object-orientation hasn't fared so well to capture how we reason about *doing*. There is no obvious place for *interactions* to live - either in the GUI or in the code.\n\n> \"Object-oriented programming languages traditionally afford no way to capture collaborations between objects - the algorithms that flow over those collaborations.\"\n>"
    },
    {
      "type": "markdown",
      "id": "1d16537f760ef97a",
      "text": "# Links\n[Long article introducing concepts by [[Jim Coplien]]](https://www.artima.com/articles/dci_vision.html)\n[DCI paradigm paper by [[Trgve Reenskaug]]](http://folk.uio.no/trygver/2008/commonsense.pdf)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "DCI Architecture",
        "story": []
      },
      "date": 1524326536046
    },
    {
      "item": {
        "type": "factory",
        "id": "c86f88da103e3558"
      },
      "id": "c86f88da103e3558",
      "type": "add",
      "date": 1524326539790
    },
    {
      "type": "edit",
      "id": "c86f88da103e3558",
      "item": {
        "type": "paragraph",
        "id": "c86f88da103e3558",
        "text": "Here we document the DCI / Data, Collaboration / Context, Interaction approach to software development., as championed by [[Jim Coplien]] and [[Trygve Reenskaug]]"
      },
      "date": 1524326623076
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION/(CONTEXT), INTERACTION.\nRead more about the [[DCI Architecture]].\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. \n\nSome other quotes from the same article (*some slight remodelling has taken place, in the interest of directness*):"
      },
      "after": "c86f88da103e3558",
      "id": "3ee5b0e22aaff2e1",
      "date": 1524326636120
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1a252a9b20cfeaf9",
        "text": "> \"The Model, View, Controller-User approach does a good job of supporting the *thinking* part of computer/human interaction.\n> Unfortunately, object-orientation hasn't fared so well to capture how we reason about *doing*. There is no obvious place for *interactions* to live - either in the GUI or in the code.\n\n> \"Object-oriented programming languages traditionally afford no way to capture collaborations between objects - the algorithms that flow over those collaborations.\"\n>"
      },
      "after": "3ee5b0e22aaff2e1",
      "id": "1a252a9b20cfeaf9",
      "date": 1524326666616
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1d16537f760ef97a",
        "text": "# Links\n[Long article introducing concepts by [[Jim Coplien]]](https://www.artima.com/articles/dci_vision.html)\n[DCI paradigm paper by [[Trgve Reenskaug]]](http://folk.uio.no/trygver/2008/commonsense.pdf)"
      },
      "after": "1a252a9b20cfeaf9",
      "id": "1d16537f760ef97a",
      "date": 1524326678462
    }
  ]
}