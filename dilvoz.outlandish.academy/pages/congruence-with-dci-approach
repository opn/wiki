{
  "title": "congruence with DCI approach",
  "story": [
    {
      "type": "paragraph",
      "id": "95453ea26feb157b",
      "text": "Here we talk about the relationship between the Data, Context, Interface (DCI) approach to coding / software development - whether this relationship is incidental, or whether it can perhaps be leveraged to make the implementation of [[Argument Mapping]] as [[Operational Simulation Diagrams]] more straightforward, and more visual."
    },
    {
      "type": "markdown",
      "id": "3ee5b0e22aaff2e1",
      "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION/(CONTEXT), INTERACTION.\nRead more about the [[DCI Architecture]].\n\nFor our purpose here, we simply note that this approach is explicit about the existence of INTERACTIONS as a category distinct from objects (or Agents, as I propose to refer to things in argument mapping) in reasoned mental models.\n"
    },
    {
      "type": "markdown",
      "id": "003bf7d232371450",
      "text": "# Example\nIf we build a game in an O-O mode, we might encode 'weight' as an attribute of objects. This would govern the object's behaviour in respect of gravity *not* as an interaction between two objects - the earth and the item in question - but as a 'desire' of the object to move downwards.\n\nThis would probably suffice for a wide range of\ngame experiences.\n\nHowever, if we wish to produce an argument map that models gravitational interaction, then it won't do at all. But where, in an O-O model, would we encode a more realistic interaction?\n\n"
    },
    {
      "type": "markdown",
      "id": "7953de540386108d",
      "text": "# The Question\nIf we consider an argument map as consisting elementally of '**Agents**', '**Contexts**' and '**Interactions**', where Agents exist in (possibly overlapping) Contexts, within which there are possible Interactions, does this give us a sufficiently rich set of primitives with which to build, and do these map well onto various imaginable Use Cases?"
    },
    {
      "type": "markdown",
      "id": "f1c34982c9b1ac98",
      "text": "# List of Use Cases\n- Ethical Framework\n- Complex system modelling\n- Scientific reasoning\n- Political decision-making\n- Rational decision making\n- Conflict clarification\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "congruence with DCI approach",
        "story": []
      },
      "date": 1524324344570
    },
    {
      "item": {
        "type": "factory",
        "id": "95453ea26feb157b"
      },
      "id": "95453ea26feb157b",
      "type": "add",
      "date": 1524324346196
    },
    {
      "type": "edit",
      "id": "95453ea26feb157b",
      "item": {
        "type": "paragraph",
        "id": "95453ea26feb157b",
        "text": "Here we talk about the relationship between the Data, Context, Interface (DCI) approach to coding / software development - whether this relationship is incidental, or whether it can perhaps be leveraged to make the implementation of [[Argument Mapping]] as [[Operational Simulation Diagrams]] more straightforward, and more visual."
      },
      "date": 1524324511352
    },
    {
      "item": {
        "type": "factory",
        "id": "1d16537f760ef97a"
      },
      "id": "1d16537f760ef97a",
      "type": "add",
      "after": "95453ea26feb157b",
      "date": 1524324553648
    },
    {
      "type": "edit",
      "id": "1d16537f760ef97a",
      "item": {
        "type": "markdown",
        "id": "1d16537f760ef97a",
        "text": "# Links\n[]()"
      },
      "date": 1524324579326
    },
    {
      "type": "edit",
      "id": "1d16537f760ef97a",
      "item": {
        "type": "markdown",
        "id": "1d16537f760ef97a",
        "text": "# Links\n[Long article introducing concepts by [[Jim Coplien]]](https://www.artima.com/articles/dci_vision.html)"
      },
      "date": 1524324609872
    },
    {
      "item": {
        "type": "factory",
        "id": "3ee5b0e22aaff2e1"
      },
      "id": "3ee5b0e22aaff2e1",
      "type": "add",
      "after": "1d16537f760ef97a",
      "date": 1524324750342
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, CONTEXT, INTERACTION.\nHere's a summary from an [article]() by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. "
      },
      "date": 1524324873616
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, CONTEXT, INTERACTION.\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. "
      },
      "date": 1524324935074
    },
    {
      "type": "move",
      "order": [
        "95453ea26feb157b",
        "3ee5b0e22aaff2e1",
        "1d16537f760ef97a"
      ],
      "id": "3ee5b0e22aaff2e1",
      "date": 1524324948464
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, CONTEXT, INTERACTION.\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. \nSome other quotes from the same article (*some slight remodelling has taken place, in the interest of directness*):\n> \"The Model, View, Controller-User approach does a good job of supporting the *thinking* part of computer/human interaction.\n> Unfortunately, object-orientation hasn't fared so well to capture how we reason about *doing*. There is no obvious place for *interactions* to live - either in the GUI or in the code.\n> Object-oriented programming languages traditionally afford no way to capture collaborations between objects - the algorithms that flow over those collaborations.\n>"
      },
      "date": 1524325999196
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, CONTEXT, INTERACTION.\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. \n\nSome other quotes from the same article (*some slight remodelling has taken place, in the interest of directness*):"
      },
      "date": 1524326015218
    },
    {
      "type": "add",
      "id": "1a252a9b20cfeaf9",
      "item": {
        "type": "markdown",
        "id": "1a252a9b20cfeaf9",
        "text": "> \"The Model, View, Controller-User approach does a good job of supporting the *thinking* part of computer/human interaction.\n> Unfortunately, object-orientation hasn't fared so well to capture how we reason about *doing*. There is no obvious place for *interactions* to live - either in the GUI or in the code.\n> Object-oriented programming languages traditionally afford no way to capture collaborations between objects - the algorithms that flow over those collaborations.\n>"
      },
      "after": "3ee5b0e22aaff2e1",
      "date": 1524326017944
    },
    {
      "type": "edit",
      "id": "1a252a9b20cfeaf9",
      "item": {
        "type": "markdown",
        "id": "1a252a9b20cfeaf9",
        "text": "> \"The Model, View, Controller-User approach does a good job of supporting the *thinking* part of computer/human interaction.\n> Unfortunately, object-orientation hasn't fared so well to capture how we reason about *doing*. There is no obvious place for *interactions* to live - either in the GUI or in the code.\n\n> Object-oriented programming languages traditionally afford no way to capture collaborations between objects - the algorithms that flow over those collaborations.\n>"
      },
      "date": 1524326024308
    },
    {
      "type": "edit",
      "id": "1a252a9b20cfeaf9",
      "item": {
        "type": "markdown",
        "id": "1a252a9b20cfeaf9",
        "text": "> \"The Model, View, Controller-User approach does a good job of supporting the *thinking* part of computer/human interaction.\n> Unfortunately, object-orientation hasn't fared so well to capture how we reason about *doing*. There is no obvious place for *interactions* to live - either in the GUI or in the code.\n\n> \"Object-oriented programming languages traditionally afford no way to capture collaborations between objects - the algorithms that flow over those collaborations.\"\n>"
      },
      "date": 1524326039504
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION, INTERACTION.\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. \n\nSome other quotes from the same article (*some slight remodelling has taken place, in the interest of directness*):"
      },
      "date": 1524326146790
    },
    {
      "type": "edit",
      "id": "1d16537f760ef97a",
      "item": {
        "type": "markdown",
        "id": "1d16537f760ef97a",
        "text": "# Links\n[Long article introducing concepts by [[Jim Coplien]]](https://www.artima.com/articles/dci_vision.html)\n[DCI paradigm paper by ](http://folk.uio.no/trygver/2008/commonsense.pdf)"
      },
      "date": 1524326268780
    },
    {
      "type": "edit",
      "id": "1d16537f760ef97a",
      "item": {
        "type": "markdown",
        "id": "1d16537f760ef97a",
        "text": "# Links\n[Long article introducing concepts by [[Jim Coplien]]](https://www.artima.com/articles/dci_vision.html)\n[DCI paradigm paper by [[Trgve Reenskaug]]](http://folk.uio.no/trygver/2008/commonsense.pdf)"
      },
      "date": 1524326326340
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION(CONTEXT), INTERACTION.\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. \n\nSome other quotes from the same article (*some slight remodelling has taken place, in the interest of directness*):"
      },
      "date": 1524326354042
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION(/CONTEXT), INTERACTION.\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. \n\nSome other quotes from the same article (*some slight remodelling has taken place, in the interest of directness*):"
      },
      "date": 1524326360456
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION/(CONTEXT), INTERACTION.\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. \n\nSome other quotes from the same article (*some slight remodelling has taken place, in the interest of directness*):"
      },
      "date": 1524326369886
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION/(CONTEXT), INTERACTION.\nRead more about the [[DCI Architecture]].\nHere's a summary from an [article entitled *The DCI Architecture: A New Vision of Object-Oriented Programming*](https://www.artima.com/articles/dci_vision.html) by [[Jim Coplien]]\n> Summary\nObject-oriented programming was supposed to unify the perspectives of the programmer and the end user in computer code: a boon both to usability and program comprehension. While objects capture structure well, they fail to capture system action. DCI is a vision to capture the end user cognitive model of roles and interactions between them. \n\nSome other quotes from the same article (*some slight remodelling has taken place, in the interest of directness*):"
      },
      "date": 1524326530344
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION/(CONTEXT), INTERACTION.\nRead more about the [[DCI Architecture]].\n"
      },
      "date": 1524326661494
    },
    {
      "type": "remove",
      "id": "1a252a9b20cfeaf9",
      "date": 1524326666614
    },
    {
      "type": "remove",
      "id": "1d16537f760ef97a",
      "date": 1524326678456
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION/(CONTEXT), INTERACTION.\nRead more about the [[DCI Architecture]].\n\nFor our purpose here, we simply note that this approach is explicit about the distinct existence of INTERACTIONS in reasoned mental models.\n"
      },
      "date": 1524326782448
    },
    {
      "item": {
        "type": "factory",
        "id": "df6ac4b7f414ac5b"
      },
      "id": "df6ac4b7f414ac5b",
      "type": "add",
      "after": "3ee5b0e22aaff2e1",
      "date": 1524326786202
    },
    {
      "type": "remove",
      "id": "df6ac4b7f414ac5b",
      "date": 1524326792430
    },
    {
      "item": {
        "type": "factory",
        "id": "003bf7d232371450"
      },
      "id": "003bf7d232371450",
      "type": "add",
      "after": "3ee5b0e22aaff2e1",
      "date": 1524326793540
    },
    {
      "type": "edit",
      "id": "003bf7d232371450",
      "item": {
        "type": "markdown",
        "id": "003bf7d232371450",
        "text": "# Example\nIf we build a game, in an OO mode, we might encode 'weight' as an attribute of objects. This would govern the object's behaviour in respect of gravity *not* as an interaction between two objects - the earth and the item in question - but as a 'desire' of the object to move downwards.\n\nHThis is probably suficient for a wide range ofgame instances.\n"
      },
      "date": 1524326944024
    },
    {
      "type": "edit",
      "id": "003bf7d232371450",
      "item": {
        "type": "markdown",
        "id": "003bf7d232371450",
        "text": "# Example\nIf we build a game, in an OO mode, we might encode 'weight' as an attribute of objects. This would govern the object's behaviour in respect of gravity *not* as an interaction between two objects - the earth and the item in question - but as a 'desire' of the object to move downwards.\n\nThis is probably sufficient for a wide range of\ngame instances.\n\nHowever, if we wish to produce an argument map that accurately models gravitational interaction, then it won't do at all. But where, in an OO model, would we encode a more realistic interaction?\n"
      },
      "date": 1524327104118
    },
    {
      "type": "edit",
      "id": "003bf7d232371450",
      "item": {
        "type": "markdown",
        "id": "003bf7d232371450",
        "text": "# Example\nIf we build a game in an OO mode, we might encode 'weight' as an attribute of objects. This would govern the object's behaviour in respect of gravity *not* as an interaction between two objects - the earth and the item in question - but as a 'desire' of the object to move downwards.\n\nThis is probably sufficient for a wide range of\ngame instances.\n\nHowever, if we wish to produce an argument map that accurately models gravitational interaction, then it won't do at all. But where, in an OO model, would we encode a more realistic interaction?\n"
      },
      "date": 1524327123384
    },
    {
      "type": "edit",
      "id": "003bf7d232371450",
      "item": {
        "type": "markdown",
        "id": "003bf7d232371450",
        "text": "# Example\nIf we build a game in an O-O mode, we might encode 'weight' as an attribute of objects. This would govern the object's behaviour in respect of gravity *not* as an interaction between two objects - the earth and the item in question - but as a 'desire' of the object to move downwards.\n\nThis is probably sufficient for a wide range of\ngame instances.\n\nHowever, if we wish to produce an argument map that accurately models gravitational interaction, then it won't do at all. But where, in an OO model, would we encode a more realistic interaction?\n"
      },
      "date": 1524327130132
    },
    {
      "type": "edit",
      "id": "003bf7d232371450",
      "item": {
        "type": "markdown",
        "id": "003bf7d232371450",
        "text": "# Example\nIf we build a game in an O-O mode, we might encode 'weight' as an attribute of objects. This would govern the object's behaviour in respect of gravity *not* as an interaction between two objects - the earth and the item in question - but as a 'desire' of the object to move downwards.\n\nThis would probably suffice for a wide range of\ngame instances.\n\nHowever, if we wish to produce an argument map that accurately models gravitational interaction, then it won't do at all. But where, in an O-O model, would we encode a more realistic interaction?\n\n"
      },
      "date": 1524327174866
    },
    {
      "type": "edit",
      "id": "3ee5b0e22aaff2e1",
      "item": {
        "type": "markdown",
        "id": "3ee5b0e22aaff2e1",
        "text": "# What is DCI?\nThe acronym stands for DATA, COLLABORATION/(CONTEXT), INTERACTION.\nRead more about the [[DCI Architecture]].\n\nFor our purpose here, we simply note that this approach is explicit about the existence of INTERACTIONS as a category distinct from objects (or Agents, as I propose to refer to things in argument mapping) in reasoned mental models.\n"
      },
      "date": 1524328819082
    },
    {
      "type": "edit",
      "id": "003bf7d232371450",
      "item": {
        "type": "markdown",
        "id": "003bf7d232371450",
        "text": "# Example\nIf we build a game in an O-O mode, we might encode 'weight' as an attribute of objects. This would govern the object's behaviour in respect of gravity *not* as an interaction between two objects - the earth and the item in question - but as a 'desire' of the object to move downwards.\n\nThis would probably suffice for a wide range of\ngame instances.\n\nHowever, if we wish to produce an argument map that models gravitational interaction, then it won't do at all. But where, in an O-O model, would we encode a more realistic interaction?\n\n"
      },
      "date": 1524328852992
    },
    {
      "type": "edit",
      "id": "003bf7d232371450",
      "item": {
        "type": "markdown",
        "id": "003bf7d232371450",
        "text": "# Example\nIf we build a game in an O-O mode, we might encode 'weight' as an attribute of objects. This would govern the object's behaviour in respect of gravity *not* as an interaction between two objects - the earth and the item in question - but as a 'desire' of the object to move downwards.\n\nThis would probably suffice for a wide range of\ngame experiences.\n\nHowever, if we wish to produce an argument map that models gravitational interaction, then it won't do at all. But where, in an O-O model, would we encode a more realistic interaction?\n\n"
      },
      "date": 1524328869250
    },
    {
      "item": {
        "type": "factory",
        "id": "7953de540386108d"
      },
      "id": "7953de540386108d",
      "type": "add",
      "after": "003bf7d232371450",
      "date": 1524328888268
    },
    {
      "type": "edit",
      "id": "7953de540386108d",
      "item": {
        "type": "markdown",
        "id": "7953de540386108d",
        "text": "# The Proposition\nIf we consider an argument map as consisting elementally of 'Agents', 'Contexts' and 'Interactions'"
      },
      "date": 1524328984182
    },
    {
      "type": "edit",
      "id": "7953de540386108d",
      "item": {
        "type": "markdown",
        "id": "7953de540386108d",
        "text": "# The Question\nIf we consider an argument map as consisting elementally of '**Agents**', '**Contexts**' and '**Interactions**', where Agents exist in (possibly overlapping) Contexts, within which there are possible Interactions, does this give us a sufficiently rich set of primitives with which to build, and do these map well onto various imaginable Use Cases?"
      },
      "date": 1524329207146
    },
    {
      "item": {
        "type": "factory",
        "id": "f1c34982c9b1ac98"
      },
      "id": "f1c34982c9b1ac98",
      "type": "add",
      "after": "7953de540386108d",
      "date": 1524329231876
    },
    {
      "type": "edit",
      "id": "f1c34982c9b1ac98",
      "item": {
        "type": "markdown",
        "id": "f1c34982c9b1ac98",
        "text": "# List of Use Cases\n- Ethical Framework\n- Complex system modelling\n- Scientific reasoning\n- Political decision-making\n- Rational decision making\n- Conflict clarification\n"
      },
      "date": 1524329335360
    }
  ]
}