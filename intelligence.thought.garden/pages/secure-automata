{
  "title": "Secure Automata",
  "story": [
    {
      "type": "paragraph",
      "id": "e2ff02ad2a9204b7",
      "text": "Language-theoretic security (LangSec) is a design and programming philosophy that\nfocuses on formally correct and verifiable input handling throughout all phases of the software development\nlifecycle in order to prevent a variety of abuses. [http://langsec.org/bof-handout.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "9bcd89c281fd52f7",
      "text": "LangSec offers a practical method of assurance of software free from broad and currently\ndominant classes of bugs and vulnerabilities related to incorrect parsing and interpretation of messages\nbetween software components such as packets, protocol messages, file formats, function parameters, etc. [http://langsec.org/ site]"
    },
    {
      "type": "paragraph",
      "id": "ee6ff721f5bfad75",
      "text": "Occupy Babel explains LangSec in a few slogans addressing ill conceived aspects of our designs. [http://langsec.org/occupy/ page]\n\n"
    },
    {
      "type": "markdown",
      "id": "a9fda1f721f6e93d",
      "text": "# Interspersed"
    },
    {
      "type": "paragraph",
      "id": "02f01887763703c0",
      "text": "Apply full recognition to inputs before processing them!\n\n"
    },
    {
      "type": "paragraph",
      "id": "3bd5c92184006abc",
      "text": "Every piece of software that takes inputs contains a de facto recognizer for accepting valid or expected inputs and rejecting invalid or malicious ones. This recognizer code is often ad hoc, spread throughout the program, and interspersed with processing logic (a \"shotgun parser\"). This lends the processing logic to exploitation and programmers to false assumptions of data safety.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "235adfa32ed668a5",
      "text": "# Powerful\n\n"
    },
    {
      "type": "paragraph",
      "id": "d8f44857ce8adc86",
      "text": "Reduce Computing Power Greed!\t\n\n"
    },
    {
      "type": "paragraph",
      "id": "c758010fc28d3e12",
      "text": "Unneeded computing power in input handling code is a hand-out to attackers. Reduce computing power needed for your protocols, reduce parsing exposure to the necessary minimum! The power that is not there cannot be hijacked.\n\n"
    },
    {
      "type": "paragraph",
      "id": "21f461940dbf3abf",
      "text": "Once created, the glut of computing power cannot be destroyed, because of backward compatibility; repackaging of insecurity goes on forever. Fight it at the origin: reduce the computing power demands of your protocol!\n\n"
    },
    {
      "type": "markdown",
      "id": "5455a78aace26ab6",
      "text": "# Weird\n\n"
    },
    {
      "type": "paragraph",
      "id": "bd09f2612097826a",
      "text": "Stop Weird Machines! Context Free or Regular!\t\n\n"
    },
    {
      "type": "paragraph",
      "id": "3a6ed496b50d54f5",
      "text": "Hard-to-parse protocols require complex parsers. Complex, buggy parsers become weird machines for exploits to run on. Help stop weird machines today: Make your protocol context-free or regular!\n\n"
    },
    {
      "type": "markdown",
      "id": "d4db29d7eaea7db7",
      "text": "# Complete\n\n"
    },
    {
      "type": "paragraph",
      "id": "fb38197799426414",
      "text": "No More Turing-complete Input Languages!\t\n\n"
    },
    {
      "type": "paragraph",
      "id": "409b4730fefc92ba",
      "text": "Protocols and file formats that are Turing-complete input languages are the worst offenders, because for them, recognizing valid or expected inputs is UNDECIDABLE: no amount of programming or testing will get it right.\n\n"
    },
    {
      "type": "paragraph",
      "id": "17b88f98eddd6f17",
      "text": "A Turing-complete input language destroys security for generations of users. Avoid Turing-complete input languages!\n\n"
    },
    {
      "type": "markdown",
      "id": "5d8863bd8e3c0a86",
      "text": "# Ambiguous \n\n"
    },
    {
      "type": "paragraph",
      "id": "d66ad4e6fb29ec3b",
      "text": "Computational Equivalence for All Protocol Endpoints!\t\n\n"
    },
    {
      "type": "paragraph",
      "id": "80085824581f9943",
      "text": "When software components communicate, the messages they send to each other must be interpreted by receivers exactly as they were meant by senders, otherwise ambiguity and therefore insecurity ensues. Protocol endpoints must therefore contain computationally equivalent parsers.\n\n"
    },
    {
      "type": "paragraph",
      "id": "fba5e05afaf39842",
      "text": "But, for non-deterministic pushdown automata (ambiguous context-free grammars) and above, the task of validating parser equivalence is UNDECIDABLE: no amount of programming or testing will get it right.\n\n"
    },
    {
      "type": "paragraph",
      "id": "cc1bec790323f68b",
      "text": "Ensure computational equivalence of protocol endpoints: use only regular and context-free protocols!"
    },
    {
      "type": "pagefold",
      "id": "c2b1890458398541",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "ab7522f908a455de",
      "text": "[[Curing the Vulnerable Parser]]\nDesign Patterns for Secure Input Handling."
    },
    {
      "type": "paragraph",
      "id": "1d12412327690ea8",
      "text": "The argument here is that we must apply considerable reason to be sure that every computer process is not subject to abuse by performing actions not intended by the design."
    },
    {
      "type": "paragraph",
      "id": "602ee4166d636623",
      "text": "We hint at their logic without embracing their formalism when we suggest plugins should be [[Too Stupid to be Wrong]]."
    },
    {
      "type": "paragraph",
      "id": "04f7a8878142848a",
      "text": "Alan Kay argues for reason beyond the simple sequence of a \"story\" when he suggests the [[Three Ways We Must Think]]."
    },
    {
      "type": "paragraph",
      "id": "6a60817d41d529b7",
      "text": "Will we ever solve security or prove otherwise? [https://mail.langsec.org/pipermail/langsec-discuss/20170119/000636.html thread]"
    },
    {
      "type": "paragraph",
      "id": "476edcb1b36f11cb",
      "text": "The Underestimated Dangers of CSV Injection. [http://georgemauer.net/2017/10/07/csv-injection.html post]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Secure Automata",
        "story": []
      },
      "date": 1488729704911
    },
    {
      "item": {
        "type": "factory",
        "id": "e2ff02ad2a9204b7"
      },
      "id": "e2ff02ad2a9204b7",
      "type": "add",
      "date": 1488729735329
    },
    {
      "type": "edit",
      "id": "e2ff02ad2a9204b7",
      "item": {
        "type": "paragraph",
        "id": "e2ff02ad2a9204b7",
        "text": "Language-theoretic security (LangSec) is a design and programming philosophy that\nfocuses on formally correct and verifiable input handling throughout all phases of the software development\nlifecycle. "
      },
      "date": 1488729753685
    },
    {
      "type": "add",
      "id": "9bcd89c281fd52f7",
      "item": {
        "type": "paragraph",
        "id": "9bcd89c281fd52f7",
        "text": "It offers a practical method of assurance of software free from broad and currently\ndominant classes of bugs and vulnerabilities related to incorrect parsing and interpretation of messages\nbetween software components (packets, protocol messages, file formats, function parameters, etc.)."
      },
      "after": "e2ff02ad2a9204b7",
      "date": 1488729783512
    },
    {
      "type": "edit",
      "id": "9bcd89c281fd52f7",
      "item": {
        "type": "paragraph",
        "id": "9bcd89c281fd52f7",
        "text": "It offers a practical method of assurance of software free from broad and currently\ndominant classes of bugs and vulnerabilities related to incorrect parsing and interpretation of messages\nbetween software components such as packets, protocol messages, file formats, function parameters, etc."
      },
      "date": 1488729807801
    },
    {
      "type": "edit",
      "id": "9bcd89c281fd52f7",
      "item": {
        "type": "paragraph",
        "id": "9bcd89c281fd52f7",
        "text": "LangSec offers a practical method of assurance of software free from broad and currently\ndominant classes of bugs and vulnerabilities related to incorrect parsing and interpretation of messages\nbetween software components such as packets, protocol messages, file formats, function parameters, etc."
      },
      "date": 1488729832456
    },
    {
      "type": "edit",
      "id": "e2ff02ad2a9204b7",
      "item": {
        "type": "paragraph",
        "id": "e2ff02ad2a9204b7",
        "text": "Language-theoretic security (LangSec) is a design and programming philosophy that\nfocuses on formally correct and verifiable input handling throughout all phases of the software development\nlifecycle. [http://langsec.org/bof-handout.pdf pdf]"
      },
      "date": 1488729878125
    },
    {
      "type": "add",
      "id": "ee6ff721f5bfad75",
      "item": {
        "type": "paragraph",
        "id": "ee6ff721f5bfad75",
        "text": "Occupy Babel explains LangSec in a few slogans. [http://langsec.org/occupy/ page]\n\n"
      },
      "after": "9bcd89c281fd52f7",
      "date": 1488730550102
    },
    {
      "type": "add",
      "id": "a9fda1f721f6e93d",
      "item": {
        "type": "paragraph",
        "id": "a9fda1f721f6e93d",
        "text": "# Shotgun\n\n"
      },
      "after": "ee6ff721f5bfad75",
      "date": 1488730553517
    },
    {
      "type": "add",
      "id": "02f01887763703c0",
      "item": {
        "type": "paragraph",
        "id": "02f01887763703c0",
        "text": "Apply full recognition to inputs before processing them!\n\n"
      },
      "after": "a9fda1f721f6e93d",
      "date": 1488730554921
    },
    {
      "type": "add",
      "id": "3bd5c92184006abc",
      "item": {
        "type": "paragraph",
        "id": "3bd5c92184006abc",
        "text": "Every piece of software that takes inputs contains a de facto recognizer for accepting valid or expected inputs and rejecting invalid or malicious ones. This recognizer code is often ad hoc, spread throughout the program, and interspersed with processing logic (a \"shotgun parser\"). This lends the processing logic to exploitation and programmers to false assumptions of data safety.\n\n\n"
      },
      "after": "02f01887763703c0",
      "date": 1488730558568
    },
    {
      "type": "add",
      "id": "235adfa32ed668a5",
      "item": {
        "type": "paragraph",
        "id": "235adfa32ed668a5",
        "text": "# Power\n\n"
      },
      "after": "3bd5c92184006abc",
      "date": 1488730559733
    },
    {
      "type": "add",
      "id": "d8f44857ce8adc86",
      "item": {
        "type": "paragraph",
        "id": "d8f44857ce8adc86",
        "text": "Reduce Computing Power Greed!\t\n\n"
      },
      "after": "235adfa32ed668a5",
      "date": 1488730560760
    },
    {
      "type": "add",
      "id": "c758010fc28d3e12",
      "item": {
        "type": "paragraph",
        "id": "c758010fc28d3e12",
        "text": "Unneeded computing power in input handling code is a hand-out to attackers. Reduce computing power needed for your protocols, reduce parsing exposure to the necessary minimum! The power that is not there cannot be hijacked.\n\n"
      },
      "after": "d8f44857ce8adc86",
      "date": 1488730563755
    },
    {
      "type": "add",
      "id": "21f461940dbf3abf",
      "item": {
        "type": "paragraph",
        "id": "21f461940dbf3abf",
        "text": "Once created, the glut of computing power cannot be destroyed, because of backward compatibility; repackaging of insecurity goes on forever. Fight it at the origin: reduce the computing power demands of your protocol!\n\n"
      },
      "after": "c758010fc28d3e12",
      "date": 1488730566362
    },
    {
      "type": "add",
      "id": "5455a78aace26ab6",
      "item": {
        "type": "paragraph",
        "id": "5455a78aace26ab6",
        "text": "# Weird\n\n"
      },
      "after": "21f461940dbf3abf",
      "date": 1488730569252
    },
    {
      "type": "add",
      "id": "bd09f2612097826a",
      "item": {
        "type": "paragraph",
        "id": "bd09f2612097826a",
        "text": "Stop Weird Machines! Context Free or Regular!\t\n\n"
      },
      "after": "5455a78aace26ab6",
      "date": 1488730571802
    },
    {
      "type": "add",
      "id": "3a6ed496b50d54f5",
      "item": {
        "type": "paragraph",
        "id": "3a6ed496b50d54f5",
        "text": "Hard-to-parse protocols require complex parsers. Complex, buggy parsers become weird machines for exploits to run on. Help stop weird machines today: Make your protocol context-free or regular!\n\n"
      },
      "after": "bd09f2612097826a",
      "date": 1488730574342
    },
    {
      "type": "add",
      "id": "d4db29d7eaea7db7",
      "item": {
        "type": "paragraph",
        "id": "d4db29d7eaea7db7",
        "text": "# Complete\n\n"
      },
      "after": "3a6ed496b50d54f5",
      "date": 1488730576109
    },
    {
      "type": "add",
      "id": "fb38197799426414",
      "item": {
        "type": "paragraph",
        "id": "fb38197799426414",
        "text": "No More Turing-complete Input Languages!\t\n\n"
      },
      "after": "d4db29d7eaea7db7",
      "date": 1488730577971
    },
    {
      "type": "add",
      "id": "409b4730fefc92ba",
      "item": {
        "type": "paragraph",
        "id": "409b4730fefc92ba",
        "text": "Protocols and file formats that are Turing-complete input languages are the worst offenders, because for them, recognizing valid or expected inputs is UNDECIDABLE: no amount of programming or testing will get it right.\n\n"
      },
      "after": "fb38197799426414",
      "date": 1488730581394
    },
    {
      "type": "add",
      "id": "17b88f98eddd6f17",
      "item": {
        "type": "paragraph",
        "id": "17b88f98eddd6f17",
        "text": "A Turing-complete input language destroys security for generations of users. Avoid Turing-complete input languages!\n\n"
      },
      "after": "409b4730fefc92ba",
      "date": 1488730583840
    },
    {
      "type": "add",
      "id": "5d8863bd8e3c0a86",
      "item": {
        "type": "paragraph",
        "id": "5d8863bd8e3c0a86",
        "text": "# Ambiguity\n\n"
      },
      "after": "17b88f98eddd6f17",
      "date": 1488730585359
    },
    {
      "type": "add",
      "id": "d66ad4e6fb29ec3b",
      "item": {
        "type": "paragraph",
        "id": "d66ad4e6fb29ec3b",
        "text": "Computational Equivalence for All Protocol Endpoints!\t\n\n"
      },
      "after": "5d8863bd8e3c0a86",
      "date": 1488730587470
    },
    {
      "type": "add",
      "id": "80085824581f9943",
      "item": {
        "type": "paragraph",
        "id": "80085824581f9943",
        "text": "When software components communicate, the messages they send to each other must be interpreted by receivers exactly as they were meant by senders, otherwise ambiguity and therefore insecurity ensues. Protocol endpoints must therefore contain computationally equivalent parsers.\n\n"
      },
      "after": "d66ad4e6fb29ec3b",
      "date": 1488730590858
    },
    {
      "type": "add",
      "id": "fba5e05afaf39842",
      "item": {
        "type": "paragraph",
        "id": "fba5e05afaf39842",
        "text": "But, for non-deterministic pushdown automata (ambiguous context-free grammars) and above, the task of validating parser equivalence is UNDECIDABLE: no amount of programming or testing will get it right.\n\n"
      },
      "after": "80085824581f9943",
      "date": 1488730593802
    },
    {
      "type": "edit",
      "id": "a9fda1f721f6e93d",
      "item": {
        "type": "markdown",
        "id": "a9fda1f721f6e93d",
        "text": "# Shotgun\n\n"
      },
      "date": 1488730602255
    },
    {
      "type": "edit",
      "id": "235adfa32ed668a5",
      "item": {
        "type": "markdown",
        "id": "235adfa32ed668a5",
        "text": "# Power\n\n"
      },
      "date": 1488730606650
    },
    {
      "type": "edit",
      "id": "5455a78aace26ab6",
      "item": {
        "type": "markdown",
        "id": "5455a78aace26ab6",
        "text": "# Weird\n\n"
      },
      "date": 1488730610332
    },
    {
      "type": "edit",
      "id": "d4db29d7eaea7db7",
      "item": {
        "type": "markdown",
        "id": "d4db29d7eaea7db7",
        "text": "# Complete\n\n"
      },
      "date": 1488730613380
    },
    {
      "type": "edit",
      "id": "5d8863bd8e3c0a86",
      "item": {
        "type": "markdown",
        "id": "5d8863bd8e3c0a86",
        "text": "# Ambiguity\n\n"
      },
      "date": 1488730616467
    },
    {
      "type": "add",
      "id": "cc1bec790323f68b",
      "item": {
        "type": "paragraph",
        "id": "cc1bec790323f68b",
        "text": "Ensure computational equivalence of protocol endpoints: use only regular and context-free protocols!"
      },
      "after": "fba5e05afaf39842",
      "date": 1488730644404
    },
    {
      "type": "edit",
      "id": "a9fda1f721f6e93d",
      "item": {
        "type": "markdown",
        "id": "a9fda1f721f6e93d",
        "text": "# Spread\n\n"
      },
      "date": 1488730652107
    },
    {
      "type": "edit",
      "id": "235adfa32ed668a5",
      "item": {
        "type": "markdown",
        "id": "235adfa32ed668a5",
        "text": "# Powerful\n\n"
      },
      "date": 1488730659112
    },
    {
      "type": "edit",
      "id": "5d8863bd8e3c0a86",
      "item": {
        "type": "markdown",
        "id": "5d8863bd8e3c0a86",
        "text": "# Ambiguous \n\n"
      },
      "date": 1488730682198
    },
    {
      "type": "edit",
      "id": "a9fda1f721f6e93d",
      "item": {
        "type": "markdown",
        "id": "a9fda1f721f6e93d",
        "text": "# Interspersed"
      },
      "date": 1488730748070
    },
    {
      "type": "edit",
      "id": "9bcd89c281fd52f7",
      "item": {
        "type": "paragraph",
        "id": "9bcd89c281fd52f7",
        "text": "LangSec offers a practical method of assurance of software free from broad and currently\ndominant classes of bugs and vulnerabilities related to incorrect parsing and interpretation of messages\nbetween software components such as packets, protocol messages, file formats, function parameters, etc. [http://langsec.org/ site]"
      },
      "date": 1488730904835
    },
    {
      "type": "edit",
      "id": "ee6ff721f5bfad75",
      "item": {
        "type": "paragraph",
        "id": "ee6ff721f5bfad75",
        "text": "Occupy Babel explains LangSec in a few slogans addressing aspects of our designs that are ill conceived . [http://langsec.org/occupy/ page]\n\n"
      },
      "date": 1488731487964
    },
    {
      "type": "edit",
      "id": "ee6ff721f5bfad75",
      "item": {
        "type": "paragraph",
        "id": "ee6ff721f5bfad75",
        "text": "Occupy Babel explains LangSec in a few slogans addressing ill conceived aspects of our designs. [http://langsec.org/occupy/ page]\n\n"
      },
      "date": 1488731523596
    },
    {
      "item": {
        "type": "factory",
        "id": "c2b1890458398541"
      },
      "id": "c2b1890458398541",
      "type": "add",
      "after": "cc1bec790323f68b",
      "date": 1488731896638
    },
    {
      "type": "edit",
      "id": "c2b1890458398541",
      "item": {
        "type": "pagefold",
        "id": "c2b1890458398541",
        "text": "."
      },
      "date": 1488731903462
    },
    {
      "item": {
        "type": "factory",
        "id": "1d12412327690ea8"
      },
      "id": "1d12412327690ea8",
      "type": "add",
      "after": "c2b1890458398541",
      "date": 1488731961052
    },
    {
      "type": "edit",
      "id": "1d12412327690ea8",
      "item": {
        "type": "paragraph",
        "id": "1d12412327690ea8",
        "text": "The argument here is that we must apply considerable reason to be sure that every computer process is not subject to abuse by performing actions not intended by the design."
      },
      "date": 1488732169512
    },
    {
      "type": "add",
      "id": "602ee4166d636623",
      "item": {
        "type": "paragraph",
        "id": "602ee4166d636623",
        "text": "We hint at their logic without embracing their formalism when we suggest plugins should be [[Too Stupid to be Wrong]]"
      },
      "after": "1d12412327690ea8",
      "date": 1488732238583
    },
    {
      "type": "add",
      "id": "04f7a8878142848a",
      "item": {
        "type": "paragraph",
        "id": "04f7a8878142848a",
        "text": "Alan Kay argues for reason beyond the simple sequence of a \"story\" when he suggests the [[Tree Ways We Must Think]]."
      },
      "after": "602ee4166d636623",
      "date": 1488732425447
    },
    {
      "type": "edit",
      "id": "602ee4166d636623",
      "item": {
        "type": "paragraph",
        "id": "602ee4166d636623",
        "text": "We hint at their logic without embracing their formalism when we suggest plugins should be [[Too Stupid to be Wrong]]."
      },
      "date": 1488732432959
    },
    {
      "type": "edit",
      "id": "04f7a8878142848a",
      "item": {
        "type": "paragraph",
        "id": "04f7a8878142848a",
        "text": "Alan Kay argues for reason beyond the simple sequence of a \"story\" when he suggests the [[Three Ways We Must Think]]."
      },
      "date": 1488732533757
    },
    {
      "type": "edit",
      "id": "e2ff02ad2a9204b7",
      "item": {
        "type": "paragraph",
        "id": "e2ff02ad2a9204b7",
        "text": "Language-theoretic security (LangSec) is a design and programming philosophy that\nfocuses on formally correct and verifiable input handling throughout all phases of the software development\nlifecycle in order to prevent abuse. [http://langsec.org/bof-handout.pdf pdf]"
      },
      "date": 1488732664169
    },
    {
      "type": "edit",
      "id": "e2ff02ad2a9204b7",
      "item": {
        "type": "paragraph",
        "id": "e2ff02ad2a9204b7",
        "text": "Language-theoretic security (LangSec) is a design and programming philosophy that\nfocuses on formally correct and verifiable input handling throughout all phases of the software development\nlifecycle in order to prevent a variety of abuses. [http://langsec.org/bof-handout.pdf pdf]"
      },
      "date": 1488732684373
    },
    {
      "item": {
        "type": "factory",
        "id": "6a60817d41d529b7"
      },
      "id": "6a60817d41d529b7",
      "type": "add",
      "after": "04f7a8878142848a",
      "date": 1488740041341
    },
    {
      "type": "edit",
      "id": "6a60817d41d529b7",
      "item": {
        "type": "paragraph",
        "id": "6a60817d41d529b7",
        "text": "Will we ever \"solve\" security or prove that we can't?"
      },
      "date": 1488740063806
    },
    {
      "type": "edit",
      "id": "6a60817d41d529b7",
      "item": {
        "type": "paragraph",
        "id": "6a60817d41d529b7",
        "text": "Will we ever solve security or prove that we can't? [https://mail.langsec.org/pipermail/langsec-discuss/20170119/000636.html list]"
      },
      "date": 1488740116895
    },
    {
      "type": "edit",
      "id": "6a60817d41d529b7",
      "item": {
        "type": "paragraph",
        "id": "6a60817d41d529b7",
        "text": "Will we ever solve security or prove that we can't? [https://mail.langsec.org/pipermail/langsec-discuss/20170119/000636.html thread]"
      },
      "date": 1488740138919
    },
    {
      "type": "edit",
      "id": "6a60817d41d529b7",
      "item": {
        "type": "paragraph",
        "id": "6a60817d41d529b7",
        "text": "Will we ever solve security or prove otherwise? [https://mail.langsec.org/pipermail/langsec-discuss/20170119/000636.html thread]"
      },
      "date": 1488740154938
    },
    {
      "type": "add",
      "id": "12b01b7f39fd2a4e",
      "item": {
        "type": "paragraph",
        "id": "12b01b7f39fd2a4e",
        "text": "Programs are full of parsers. Any program statement that touches input may, in fact, do parsing. When inputs are hostile, ad hoc input\nhandling code is notoriously vulnerable. This article is about why this is the case, how to make it less so, and how to make the hardened parser protect the rest of the program."
      },
      "after": "1d12412327690ea8",
      "date": 1488749392403
    },
    {
      "type": "edit",
      "id": "12b01b7f39fd2a4e",
      "item": {
        "type": "paragraph",
        "id": "12b01b7f39fd2a4e",
        "text": "Programs are full of parsers. Any program statement that touches input may, in fact, do parsing. When inputs are hostile, ad hoc input\nhandling code is notoriously vulnerable. This article is about why this is the case, how to make it less so, and how to make the hardened parser protect the rest of the program. [https://www.usenix.org/system/files/login/articles/login_spring17_08_bratus.pdf pdf]"
      },
      "date": 1488749414316
    },
    {
      "type": "move",
      "order": [
        "e2ff02ad2a9204b7",
        "9bcd89c281fd52f7",
        "ee6ff721f5bfad75",
        "a9fda1f721f6e93d",
        "02f01887763703c0",
        "3bd5c92184006abc",
        "235adfa32ed668a5",
        "d8f44857ce8adc86",
        "c758010fc28d3e12",
        "21f461940dbf3abf",
        "5455a78aace26ab6",
        "bd09f2612097826a",
        "3a6ed496b50d54f5",
        "d4db29d7eaea7db7",
        "fb38197799426414",
        "409b4730fefc92ba",
        "17b88f98eddd6f17",
        "5d8863bd8e3c0a86",
        "d66ad4e6fb29ec3b",
        "80085824581f9943",
        "fba5e05afaf39842",
        "cc1bec790323f68b",
        "c2b1890458398541",
        "12b01b7f39fd2a4e",
        "1d12412327690ea8",
        "602ee4166d636623",
        "04f7a8878142848a",
        "6a60817d41d529b7"
      ],
      "id": "12b01b7f39fd2a4e",
      "date": 1488749438875
    },
    {
      "type": "add",
      "id": "ab7522f908a455de",
      "item": {
        "type": "paragraph",
        "id": "ab7522f908a455de",
        "text": "[[Curing the Vulnerable Parser]]\nDesign Patterns for Secure Input Handling."
      },
      "after": "12b01b7f39fd2a4e",
      "date": 1488749592395
    },
    {
      "type": "remove",
      "id": "12b01b7f39fd2a4e",
      "date": 1488749604232
    },
    {
      "type": "add",
      "id": "476edcb1b36f11cb",
      "item": {
        "type": "paragraph",
        "id": "476edcb1b36f11cb",
        "text": "The Absurdly Underestimated Dangers of CSV Injection. "
      },
      "after": "6a60817d41d529b7",
      "date": 1507608824587
    },
    {
      "type": "edit",
      "id": "476edcb1b36f11cb",
      "item": {
        "type": "paragraph",
        "id": "476edcb1b36f11cb",
        "text": "The Underestimated Dangers of CSV Injection. [http://georgemauer.net/2017/10/07/csv-injection.html post]"
      },
      "date": 1507608858020
    },
    {
      "type": "fork",
      "site": "ward.bay.wiki.org",
      "date": 1509706999290
    }
  ]
}