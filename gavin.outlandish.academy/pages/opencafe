{
  "title": "OpenCAFE",
  "story": [
    {
      "type": "markdown",
      "id": "c09f6ed5e49e4d59",
      "text": "The [http://opencafe.readthedocs.io/en/latest/ Common Automation Framework Engine (CAFE)] is the core engine/driver used to build an automated testing framework. It is designed to be used as the base engine for building an automated framework for API and non-UI resource testing. It is designed to support functional, integration and reliability testing. The engine is NOT designed to support performance or load testing."
    },
    {
      "type": "markdown",
      "id": "73b86a9b7762c5e8",
      "text": "CAFE core provides models, patterns, and supported libraries for building automated tests. It provides its own lightweight unittest based runner, however, it is designed to be modular. It can be extended to support most test case front ends/runners (nose, pytest, lettuce, testr, etc...) through driver plug-ins."
    },
    {
      "type": "markdown",
      "id": "4b6ceca317652fe4",
      "text": "#OpenCAFE Architecture"
    },
    {
      "type": "markdown",
      "id": "438ea43c80e646ee",
      "text": "**Models**"
    },
    {
      "type": "markdown",
      "id": "dce50790f47fafba",
      "text": "One of the challenges in testing non-UI based applications is handling communication protocols between the test harness and the application under test. Abstracting this layer between the application and harness not only removes the concern of how communication occurs from the perspective of the test developer, but also makes it easier for the harness to adapt to changes in the structure of communication."
    },
    {
      "type": "markdown",
      "id": "ceb85466d89b277f",
      "text": "As part of the OpenCafe design strategy, we wanted to define a standard way of handling data serialization that was also generic enough to be used with any protocol. Doing so enabled us make other design decisions, such as making the serialization process transparent to the test developer (this is explained in detail in the clients section)."
    },
    {
      "type": "markdown",
      "id": "0aee16d72ad4841c",
      "text": "**Design**"
    },
    {
      "type": "markdown",
      "id": "259fc686961cb2ee",
      "text": "Models in OpenCafe are very similar to data transfer objects (DTOs). The purpose of any methods defined by a model are in general limited to converting the model to and from another format. For example, a model that will be used in requests to a REST API would have methods to convert the object to JSON and XML, while an object that represents REST responses would contain methods to convert JSON or XML back to an object. By convention, these methods are named _obj_to_<format> and _<format>_to_obj. This convention is used by other elements in the framework to determine at execution time which serialization format should be used."
    },
    {
      "type": "markdown",
      "id": "f9c71c48c275b1f0",
      "text": "For convenience, you may want to implement the __eq__ and __ne__ methods to allow standard comparison functions such as “in” and “not in” to be used in relation to the model. If you do this, make sure to implement both methods. Implementing __eq__ without implementing __ne__ will cause comparisons to not work as expected."
    },
    {
      "type": "markdown",
      "id": "374411d60182190a",
      "text": "A quick start guide is **[http://opencafe.readthedocs.io/en/latest/quickstart/index.html here]**."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "OpenCAFE",
        "story": []
      },
      "date": 1504695864123
    },
    {
      "item": {
        "type": "factory",
        "id": "c09f6ed5e49e4d59"
      },
      "id": "c09f6ed5e49e4d59",
      "type": "add",
      "date": 1504695866682
    },
    {
      "type": "edit",
      "id": "c09f6ed5e49e4d59",
      "item": {
        "type": "markdown",
        "id": "c09f6ed5e49e4d59",
        "text": "The Common Automation Framework Engine (CAFE) is the core engine/driver used to build an automated testing framework. It is designed to be used as the base engine for building an automated framework for API and non-UI resource testing. It is designed to support functional, integration and reliability testing. The engine is NOT designed to support performance or load testing."
      },
      "date": 1504695872385
    },
    {
      "type": "edit",
      "id": "c09f6ed5e49e4d59",
      "item": {
        "type": "markdown",
        "id": "c09f6ed5e49e4d59",
        "text": "The [http://opencafe.readthedocs.io/en/latest/ Common Automation Framework Engine (CAFE)] is the core engine/driver used to build an automated testing framework. It is designed to be used as the base engine for building an automated framework for API and non-UI resource testing. It is designed to support functional, integration and reliability testing. The engine is NOT designed to support performance or load testing."
      },
      "date": 1504695899061
    },
    {
      "item": {
        "type": "factory",
        "id": "73b86a9b7762c5e8"
      },
      "id": "73b86a9b7762c5e8",
      "type": "add",
      "after": "c09f6ed5e49e4d59",
      "date": 1504695917298
    },
    {
      "type": "edit",
      "id": "73b86a9b7762c5e8",
      "item": {
        "type": "markdown",
        "id": "73b86a9b7762c5e8",
        "text": "CAFE core provides models, patterns, and supported libraries for building automated tests. It provides its own lightweight unittest based runner, however, it is designed to be modular. It can be extended to support most test case front ends/runners (nose, pytest, lettuce, testr, etc...) through driver plug-ins."
      },
      "date": 1504695923255
    },
    {
      "item": {
        "type": "factory",
        "id": "4b6ceca317652fe4"
      },
      "id": "4b6ceca317652fe4",
      "type": "add",
      "after": "73b86a9b7762c5e8",
      "date": 1504696007847
    },
    {
      "type": "edit",
      "id": "4b6ceca317652fe4",
      "item": {
        "type": "markdown",
        "id": "4b6ceca317652fe4",
        "text": "**OpenCAFE Architecture**"
      },
      "date": 1504696017109
    },
    {
      "item": {
        "type": "factory",
        "id": "438ea43c80e646ee"
      },
      "id": "438ea43c80e646ee",
      "type": "add",
      "after": "4b6ceca317652fe4",
      "date": 1504696035488
    },
    {
      "type": "edit",
      "id": "438ea43c80e646ee",
      "item": {
        "type": "markdown",
        "id": "438ea43c80e646ee",
        "text": "**Models**"
      },
      "date": 1504696045168
    },
    {
      "type": "edit",
      "id": "4b6ceca317652fe4",
      "item": {
        "type": "markdown",
        "id": "4b6ceca317652fe4",
        "text": "#OpenCAFE Architecture"
      },
      "date": 1504696055576
    },
    {
      "item": {
        "type": "factory",
        "id": "dce50790f47fafba"
      },
      "id": "dce50790f47fafba",
      "type": "add",
      "after": "438ea43c80e646ee",
      "date": 1504696072562
    },
    {
      "type": "edit",
      "id": "dce50790f47fafba",
      "item": {
        "type": "markdown",
        "id": "dce50790f47fafba",
        "text": "One of the challenges in testing non-UI based applications is handling communication protocols between the test harness and the application under test. Abstracting this layer between the application and harness not only removes the concern of how communication occurs from the perspective of the test developer, but also makes it easier for the harness to adapt to changes in the structure of communication."
      },
      "date": 1504696078119
    },
    {
      "item": {
        "type": "factory",
        "id": "ceb85466d89b277f"
      },
      "id": "ceb85466d89b277f",
      "type": "add",
      "after": "dce50790f47fafba",
      "date": 1504696097664
    },
    {
      "type": "edit",
      "id": "ceb85466d89b277f",
      "item": {
        "type": "markdown",
        "id": "ceb85466d89b277f",
        "text": "As part of the OpenCafe design strategy, we wanted to define a standard way of handling data serialization that was also generic enough to be used with any protocol. Doing so enabled us make other design decisions, such as making the serialization process transparent to the test developer (this is explained in detail in the clients section)."
      },
      "date": 1504696103198
    },
    {
      "item": {
        "type": "factory",
        "id": "0aee16d72ad4841c"
      },
      "id": "0aee16d72ad4841c",
      "type": "add",
      "after": "ceb85466d89b277f",
      "date": 1504696127268
    },
    {
      "type": "edit",
      "id": "0aee16d72ad4841c",
      "item": {
        "type": "markdown",
        "id": "0aee16d72ad4841c",
        "text": "**Design**"
      },
      "date": 1504696134594
    },
    {
      "item": {
        "type": "factory",
        "id": "259fc686961cb2ee"
      },
      "id": "259fc686961cb2ee",
      "type": "add",
      "after": "0aee16d72ad4841c",
      "date": 1504696151487
    },
    {
      "type": "edit",
      "id": "259fc686961cb2ee",
      "item": {
        "type": "markdown",
        "id": "259fc686961cb2ee",
        "text": "Models in OpenCafe are very similar to data transfer objects (DTOs). The purpose of any methods defined by a model are in general limited to converting the model to and from another format. For example, a model that will be used in requests to a REST API would have methods to convert the object to JSON and XML, while an object that represents REST responses would contain methods to convert JSON or XML back to an object. By convention, these methods are named _obj_to_<format> and _<format>_to_obj. This convention is used by other elements in the framework to determine at execution time which serialization format should be used."
      },
      "date": 1504696157028
    },
    {
      "item": {
        "type": "factory",
        "id": "f9c71c48c275b1f0"
      },
      "id": "f9c71c48c275b1f0",
      "type": "add",
      "after": "259fc686961cb2ee",
      "date": 1504696176541
    },
    {
      "type": "edit",
      "id": "f9c71c48c275b1f0",
      "item": {
        "type": "markdown",
        "id": "f9c71c48c275b1f0",
        "text": "For convenience, you may want to implement the __eq__ and __ne__ methods to allow standard comparison functions such as “in” and “not in” to be used in relation to the model. If you do this, make sure to implement both methods. Implementing __eq__ without implementing __ne__ will cause comparisons to not work as expected."
      },
      "date": 1504696181799
    },
    {
      "item": {
        "type": "factory",
        "id": "374411d60182190a"
      },
      "id": "374411d60182190a",
      "type": "add",
      "after": "f9c71c48c275b1f0",
      "date": 1504696236405
    },
    {
      "type": "edit",
      "id": "374411d60182190a",
      "item": {
        "type": "markdown",
        "id": "374411d60182190a",
        "text": "A quick start guide is here."
      },
      "date": 1504696252594
    },
    {
      "type": "edit",
      "id": "374411d60182190a",
      "item": {
        "type": "markdown",
        "id": "374411d60182190a",
        "text": "A quick start guide is [http://opencafe.readthedocs.io/en/latest/quickstart/index.html **here**]."
      },
      "date": 1504696283193
    },
    {
      "type": "edit",
      "id": "374411d60182190a",
      "item": {
        "type": "markdown",
        "id": "374411d60182190a",
        "text": "A quick start guide is **[http://opencafe.readthedocs.io/en/latest/quickstart/index.html here]**."
      },
      "date": 1504696309550
    }
  ]
}