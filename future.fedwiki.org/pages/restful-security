{
  "title": "RESTful Security",
  "story": [
    {
      "type": "paragraph",
      "id": "f3ac8a3d91f5eb31",
      "text": "As RESTful Web Services work with HTTP URL Paths, it is very important to safeguard a RESTful Web Service in the same manner as a website is secured - [https://www.tutorialspoint.com/restful/restful_security.htm tutorialspoint.com]"
    },
    {
      "type": "markdown",
      "id": "ab99e92f7f6736d2",
      "text": "Following are the best practices to be adhered to while designing a RESTful Web Service:\n\n- **Validation** − Validate all inputs on the server. Protect your server against SQL or NoSQL injection attacks.\n- **Session Based Authentication** − Use session based authentication to authenticate a user whenever a request is made to a Web Service method.\n- **No Sensitive Data in the URL** − Never use username, password or session token in a URL, these values should be passed to Web Service via the POST method.\n- **Restriction on Method Execution** − Allow restricted use of methods like GET, POST and DELETE methods. The GET method should not be able to delete data.\n- **Validate Malformed XML/JSON** − Check for well-formed input passed to a web service method.\n- **Throw generic Error Messages** − A web service method should use HTTP error messages like 403 to show access forbidden, etc."
    },
    {
      "type": "markdown",
      "id": "6d9c8ddee69ae04d",
      "text": "# See also\n\n- [[Stateful REST]]\n- [[RESTful Security]]\n- [[REST]]\n- [[RESTful]]\n- [[DreamFactory]]\n- [[RESTBase]]\n- [[REST API]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "RESTful Security",
        "story": []
      },
      "date": 1493381321512
    },
    {
      "item": {
        "type": "factory",
        "id": "f3ac8a3d91f5eb31"
      },
      "id": "f3ac8a3d91f5eb31",
      "type": "add",
      "date": 1493381322533
    },
    {
      "item": {
        "type": "factory",
        "id": "c168b462d84e6605"
      },
      "id": "c168b462d84e6605",
      "type": "add",
      "after": "f3ac8a3d91f5eb31",
      "date": 1493381336913
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "6d9c8ddee69ae04d",
        "text": "# See also\n\n- [[Stateful REST]]\n- [[RESTful Security]]\n- [[REST]]\n- [[RESTful]]\n- [[DreamFactory]]\n- [[RESTBase]]\n- [[REST API]]"
      },
      "after": "c168b462d84e6605",
      "id": "6d9c8ddee69ae04d",
      "date": 1493381368337
    },
    {
      "type": "edit",
      "id": "f3ac8a3d91f5eb31",
      "item": {
        "type": "paragraph",
        "id": "f3ac8a3d91f5eb31",
        "text": "As RESTful Web Services work with HTTP URL Paths, it is very important to safeguard a RESTful Web Service in the same manner as a website is secured."
      },
      "date": 1493381406705
    },
    {
      "type": "add",
      "id": "ab99e92f7f6736d2",
      "item": {
        "type": "paragraph",
        "id": "ab99e92f7f6736d2",
        "text": "Following are the best practices to be adhered to while designing a RESTful Web Service:\n- *Validation* − Validate all inputs on the server. Protect your server against SQL or NoSQL injection attacks.\n- *Session Based Authentication* − Use session based authentication to authenticate a user whenever a request is made to a Web Service method.\n- No Sensitive Data in the URL − Never use username, password or session token in a URL, these values should be passed to Web Service via the POST method.\n- *Restriction on Method Execution* − Allow restricted use of methods like GET, POST and DELETE methods. The GET method should not be able to delete data.\n\nValidate Malformed XML/JSON − Check for well-formed input passed to a web service method.\n\nThrow generic Error Messages − A web service method should use HTTP error messages like 403 to show access forbidden, etc."
      },
      "after": "f3ac8a3d91f5eb31",
      "date": 1493381465020
    },
    {
      "type": "edit",
      "id": "ab99e92f7f6736d2",
      "item": {
        "type": "markdown",
        "id": "ab99e92f7f6736d2",
        "text": "Following are the best practices to be adhered to while designing a RESTful Web Service:\n- *Validation* − Validate all inputs on the server. Protect your server against SQL or NoSQL injection attacks.\n- *Session Based Authentication* − Use session based authentication to authenticate a user whenever a request is made to a Web Service method.\n- No Sensitive Data in the URL − Never use username, password or session token in a URL, these values should be passed to Web Service via the POST method.\n- *Restriction on Method Execution* − Allow restricted use of methods like GET, POST and DELETE methods. The GET method should not be able to delete data.\n\nValidate Malformed XML/JSON − Check for well-formed input passed to a web service method.\n\nThrow generic Error Messages − A web service method should use HTTP error messages like 403 to show access forbidden, etc."
      },
      "date": 1493381465955
    },
    {
      "type": "edit",
      "id": "ab99e92f7f6736d2",
      "item": {
        "type": "markdown",
        "id": "ab99e92f7f6736d2",
        "text": "Following are the best practices to be adhered to while designing a RESTful Web Service:\n\n- **Validation** − Validate all inputs on the server. Protect your server against SQL or NoSQL injection attacks.\n- *Session Based Authentication* − Use session based authentication to authenticate a user whenever a request is made to a Web Service method.\n- No Sensitive Data in the URL − Never use username, password or session token in a URL, these values should be passed to Web Service via the POST method.\n- *Restriction on Method Execution* − Allow restricted use of methods like GET, POST and DELETE methods. The GET method should not be able to delete data.\n\nValidate Malformed XML/JSON − Check for well-formed input passed to a web service method.\n\nThrow generic Error Messages − A web service method should use HTTP error messages like 403 to show access forbidden, etc."
      },
      "date": 1493381476917
    },
    {
      "type": "edit",
      "id": "ab99e92f7f6736d2",
      "item": {
        "type": "markdown",
        "id": "ab99e92f7f6736d2",
        "text": "Following are the best practices to be adhered to while designing a RESTful Web Service:\n\n- **Validation** − Validate all inputs on the server. Protect your server against SQL or NoSQL injection attacks.\n- **Session Based Authentication** − Use session based authentication to authenticate a user whenever a request is made to a Web Service method.\n- **No Sensitive Data in the URL** − Never use username, password or session token in a URL, these values should be passed to Web Service via the POST method.\n- **Restriction on Method Execution** − Allow restricted use of methods like GET, POST and DELETE methods. The GET method should not be able to delete data.\n\nValidate Malformed XML/JSON − Check for well-formed input passed to a web service method.\n\nThrow generic Error Messages − A web service method should use HTTP error messages like 403 to show access forbidden, etc."
      },
      "date": 1493381504101
    },
    {
      "type": "edit",
      "id": "ab99e92f7f6736d2",
      "item": {
        "type": "markdown",
        "id": "ab99e92f7f6736d2",
        "text": "Following are the best practices to be adhered to while designing a RESTful Web Service:\n\n- **Validation** − Validate all inputs on the server. Protect your server against SQL or NoSQL injection attacks.\n- **Session Based Authentication** − Use session based authentication to authenticate a user whenever a request is made to a Web Service method.\n- **No Sensitive Data in the URL** − Never use username, password or session token in a URL, these values should be passed to Web Service via the POST method.\n- **Restriction on Method Execution** − Allow restricted use of methods like GET, POST and DELETE methods. The GET method should not be able to delete data.\n- **Validate Malformed XML/JSON** − Check for well-formed input passed to a web service method.\n- **Throw generic Error Messages** − A web service method should use HTTP error messages like 403 to show access forbidden, etc."
      },
      "date": 1493381536022
    },
    {
      "type": "remove",
      "id": "c168b462d84e6605",
      "date": 1493381540285
    },
    {
      "type": "edit",
      "id": "f3ac8a3d91f5eb31",
      "item": {
        "type": "paragraph",
        "id": "f3ac8a3d91f5eb31",
        "text": "As RESTful Web Services work with HTTP URL Paths, it is very important to safeguard a RESTful Web Service in the same manner as a website is secured - [https://www.tutorialspoint.com/restful/restful_security.htm tutorialspoint.com]"
      },
      "date": 1493381558247
    },
    {
      "type": "fork",
      "site": "c0de.academy",
      "date": 1510693776201
    }
  ]
}