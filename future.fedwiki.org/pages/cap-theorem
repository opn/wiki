{
  "title": "CAP theorem",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "CAP theorem"
      },
      "date": 1466947883443,
      "source": {
        "pageTitle": "CAP theorem",
        "pageSlug": "Cap theorem",
        "url": "https://en.wikipedia.org/wiki/Cap_Theorem",
        "date": 1466947883443,
        "link_dictionary": {
          "wiki_links": {
            "See also": {
              "section_number": 3,
              "section_level": 2,
              "dot_number": 2
            },
            "External links": {
              "section_number": 5,
              "section_level": 2,
              "dot_number": 4
            },
            "References": {
              "section_number": 4,
              "section_level": 2,
              "dot_number": 3
            },
            "History": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 722993484,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466947886029
    },
    {
      "type": "remove",
      "id": "b1479fe4-eacd-4ba3-9c07-b383af21a532",
      "date": 1466947901273
    },
    {
      "type": "edit",
      "id": "bd2dde95-b224-4da7-b76a-2120e6a5ed7b",
      "item": {
        "type": "paragraph",
        "id": "bd2dde95-b224-4da7-b76a-2120e6a5ed7b",
        "text": "[[Consistency]] (all nodes see the same data at the same time)"
      },
      "date": 1466947910555
    },
    {
      "type": "edit",
      "id": "01eef4ae-7374-48b3-8ca1-ac8038ae6e65",
      "item": {
        "type": "paragraph",
        "id": "01eef4ae-7374-48b3-8ca1-ac8038ae6e65",
        "text": "[[Availability]] (every request receives a response about whether it succeeded or failed)"
      },
      "date": 1466947919123
    },
    {
      "type": "edit",
      "id": "2115457e-ebe3-4d80-a132-d010057921c4",
      "item": {
        "type": "paragraph",
        "id": "2115457e-ebe3-4d80-a132-d010057921c4",
        "text": "[[Partition tolerance]] (the system continues to operate despite arbitrary partitioning due to network failures)"
      },
      "date": 1466947926363
    },
    {
      "item": {
        "type": "factory",
        "id": "99020560bc5b7c1a"
      },
      "id": "99020560bc5b7c1a",
      "type": "add",
      "after": "e0c3370b-b95c-42c9-99e3-32c76380aceb",
      "date": 1466948351104
    },
    {
      "type": "edit",
      "id": "99020560bc5b7c1a",
      "item": {
        "type": "reference",
        "id": "99020560bc5b7c1a",
        "site": "future.fedwiki.org",
        "slug": "eventual-consistency",
        "title": "Eventual consistency",
        "text": "Eventual consistency is a consistency model used in distributed computing to achieve high availability that informally guarantees that, if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value - [https://en.wikipedia.org/wiki/Eventual_consistency wikipedia]"
      },
      "date": 1466948355403
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "dea89238-efda-4fb3-a386-8ceaafdcb6d5",
      "text": "In theoretical computer science, the CAP theorem, also named Brewer's theorem after computer scientist Eric Brewer, states that it is impossible for a distributed computer system to simultaneously provide all three of the following guarantees: - [https://en.wikipedia.org/wiki/Cap_Theorem wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "bd2dde95-b224-4da7-b76a-2120e6a5ed7b",
      "text": "[[Consistency]] (all nodes see the same data at the same time)"
    },
    {
      "type": "paragraph",
      "id": "01eef4ae-7374-48b3-8ca1-ac8038ae6e65",
      "text": "[[Availability]] (every request receives a response about whether it succeeded or failed)"
    },
    {
      "type": "paragraph",
      "id": "2115457e-ebe3-4d80-a132-d010057921c4",
      "text": "[[Partition tolerance]] (the system continues to operate despite arbitrary partitioning due to network failures)"
    },
    {
      "type": "paragraph",
      "id": "b9f279db-705d-480e-be8a-796df071e104",
      "text": "In 2012 Brewer clarified some of his positions, including why the often-used \"two out of three\" concept can be misleading or misapplied, and the different definition of consistency used in CAP relative to the one used in ACID."
    },
    {
      "type": "markdown",
      "id": "e0c3370b-b95c-42c9-99e3-32c76380aceb",
      "text": "# See also\n* [[History]]\n* [[See also]]\n* [[References]]\n* [[External links]]"
    },
    {
      "type": "reference",
      "id": "99020560bc5b7c1a",
      "site": "future.fedwiki.org",
      "slug": "eventual-consistency",
      "title": "Eventual consistency",
      "text": "Eventual consistency is a consistency model used in distributed computing to achieve high availability that informally guarantees that, if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value - [https://en.wikipedia.org/wiki/Eventual_consistency wikipedia]"
    }
  ]
}