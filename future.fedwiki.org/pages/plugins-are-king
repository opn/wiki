{
  "title": "Plugins Are King",
  "story": [
    {
      "type": "paragraph",
      "id": "294eb2bfcb4e9800",
      "text": "is the future of the [[Federation]] about [[Plugins]]? As we make the server more an more minimal, and the client branches into various speciality clients - what are we left with?"
    },
    {
      "type": "html",
      "id": "2d265b28de4e6c6d",
      "text": "<ol><li> The [[JSON Schema]]<li>  [[Plugins]]</ol>"
    },
    {
      "type": "paragraph",
      "id": "5add46acaeeeb5e8",
      "text": "The JSON schema may evolve to HTML, but here we look at the [[Future of Plugins]]."
    },
    {
      "type": "markdown",
      "id": "335f7c4de09f10c0",
      "text": "# Future of Plugins"
    },
    {
      "type": "paragraph",
      "id": "a0fbf4035ddf1380",
      "text": "Plugins currently are NPM Packages that sit in a folder on the server, and deliver functionality to the client. However the [[Tranport Plugin]] shows how this can be generalised."
    },
    {
      "type": "paragraph",
      "id": "a91a15a04e1d5887",
      "text": "We can define a simple minimal API that enables a plugin to interact with the DOM in a way which is not specific to Fedwiki, but that can be generalised to any web page or [[Javascript Client]]. Emit and Bind, and a few other features? We are discovering and evolving what these features would be."
    },
    {
      "type": "paragraph",
      "id": "143f31c17464dcb9",
      "text": "But equally importantly is the server side. Currently a plugin calls the [[Site of Origin]] for accessing server side functionality. The [[Tranport Plugin]] show how this can be extended to any [[REST]] call."
    },
    {
      "type": "markdown",
      "id": "f050b0970829fd9a",
      "text": "# Plugin-as-Microservice"
    },
    {
      "type": "paragraph",
      "id": "0d24731f0b853841",
      "text": "In this way we can see plugins as [[Micoservices to the Federation]]. They perform specific functions (often advanced authoring functions), and they can be combined together in complex ways."
    },
    {
      "type": "paragraph",
      "id": "05846d38283ce635",
      "text": "Plugins therefore can be seen as the future of the Federation, and our experiment of writing and using Fedwiki as a means to test and develop a real-world API for generic web-centred plugin-as-microservice development."
    },
    {
      "type": "reference",
      "id": "80fe31de2327a232",
      "site": "future.fedwiki.org",
      "slug": "trust-in-plugins",
      "title": "Trust in Plugins",
      "text": "We need to trust our plugins. Search is one such example, whether is be baked into a server farm, or made available through a plugin."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Plugins Are King",
        "story": []
      },
      "date": 1438769333334
    },
    {
      "item": {
        "type": "factory",
        "id": "294eb2bfcb4e9800"
      },
      "id": "294eb2bfcb4e9800",
      "type": "add",
      "date": 1438769334876
    },
    {
      "type": "edit",
      "id": "294eb2bfcb4e9800",
      "item": {
        "type": "paragraph",
        "id": "294eb2bfcb4e9800",
        "text": "is the future of the [[Federation]] about [[Plugins]]? As we make the server more an more minimal, and the client branches into various speciality clients - what are we left with?"
      },
      "date": 1438769419082
    },
    {
      "type": "add",
      "id": "2d265b28de4e6c6d",
      "item": {
        "type": "paragraph",
        "id": "2d265b28de4e6c6d",
        "text": "<ol><li> The [[JSON Schema]]<li>  [[Plugins]]</ol>"
      },
      "after": "294eb2bfcb4e9800",
      "date": 1438769453895
    },
    {
      "type": "edit",
      "id": "2d265b28de4e6c6d",
      "item": {
        "type": "html",
        "id": "2d265b28de4e6c6d",
        "text": "<ol><li> The [[JSON Schema]]<li>  [[Plugins]]</ol>"
      },
      "date": 1438769456090
    },
    {
      "item": {
        "type": "factory",
        "id": "5add46acaeeeb5e8"
      },
      "id": "5add46acaeeeb5e8",
      "type": "add",
      "after": "2d265b28de4e6c6d",
      "date": 1438769472281
    },
    {
      "type": "edit",
      "id": "5add46acaeeeb5e8",
      "item": {
        "type": "paragraph",
        "id": "5add46acaeeeb5e8",
        "text": "The JSON schema may evolve to HTML, but here we look at the [[Future of Plugins]]."
      },
      "date": 1438769519694
    },
    {
      "type": "add",
      "id": "335f7c4de09f10c0",
      "item": {
        "type": "paragraph",
        "id": "335f7c4de09f10c0",
        "text": "# Future of Plugins"
      },
      "after": "5add46acaeeeb5e8",
      "date": 1438769546465
    },
    {
      "type": "add",
      "id": "a0fbf4035ddf1380",
      "item": {
        "type": "paragraph",
        "id": "a0fbf4035ddf1380",
        "text": "Plugins currently are NPM Packages that sit in a folder on the server, and deliver functionality to the client. However the [[Tranport Plugin]] shows how this can be generalised."
      },
      "after": "335f7c4de09f10c0",
      "date": 1438769617515
    },
    {
      "type": "edit",
      "id": "335f7c4de09f10c0",
      "item": {
        "type": "markdown",
        "id": "335f7c4de09f10c0",
        "text": "# Future of Plugins"
      },
      "date": 1438769619782
    },
    {
      "type": "add",
      "id": "a91a15a04e1d5887",
      "item": {
        "type": "paragraph",
        "id": "a91a15a04e1d5887",
        "text": "We can define a simple minimal API that enables a plugin to interact with the DOM in a way which is not specific to Fedwiki, but that can be generalised to any web page or [[Javascript Client]]. Emit and Bind, and a few other features? We are discovering and evolving what these features would be."
      },
      "after": "a0fbf4035ddf1380",
      "date": 1438769759354
    },
    {
      "type": "add",
      "id": "143f31c17464dcb9",
      "item": {
        "type": "paragraph",
        "id": "143f31c17464dcb9",
        "text": "But equally importantly is the server side. Currently a plugin calls the [[Site of Origin]] for accessing server side functionality. The [[Tranport Plugin]] show how this can be extended to any [[REST]] call."
      },
      "after": "a91a15a04e1d5887",
      "date": 1438769865384
    },
    {
      "type": "add",
      "id": "0d24731f0b853841",
      "item": {
        "type": "paragraph",
        "id": "0d24731f0b853841",
        "text": "In this way we can see plugins as [[Micoservices to the Federation]]. They perform specific functions (often advanced authoring functions), and they can be combined together in complex ways."
      },
      "after": "143f31c17464dcb9",
      "date": 1438769939248
    },
    {
      "type": "add",
      "id": "05846d38283ce635",
      "item": {
        "type": "paragraph",
        "id": "05846d38283ce635",
        "text": "Plugins therefore can be seen as the future of the Federation, and our experiment of writing and using Fedwiki as a means to test and develop a real-world API for generic web-centred plugin-as-microservice development."
      },
      "after": "0d24731f0b853841",
      "date": 1438770006683
    },
    {
      "type": "add",
      "id": "f050b0970829fd9a",
      "item": {
        "type": "paragraph",
        "id": "f050b0970829fd9a",
        "text": "# Plugin-as-Microservice"
      },
      "after": "143f31c17464dcb9",
      "date": 1438770031492
    },
    {
      "type": "edit",
      "id": "f050b0970829fd9a",
      "item": {
        "type": "markdown",
        "id": "f050b0970829fd9a",
        "text": "# Plugin-as-Microservice"
      },
      "date": 1438770033015
    },
    {
      "item": {
        "type": "factory",
        "id": "80fe31de2327a232"
      },
      "id": "80fe31de2327a232",
      "type": "add",
      "after": "05846d38283ce635",
      "date": 1440258703148
    },
    {
      "type": "edit",
      "id": "80fe31de2327a232",
      "item": {
        "type": "reference",
        "id": "80fe31de2327a232",
        "site": "future.fedwiki.org",
        "slug": "trust-in-plugins",
        "title": "Trust in Plugins",
        "text": "We need to trust our plugins. Search is one such example, whether is be baked into a server farm, or made available through a plugin."
      },
      "date": 1440258705059
    }
  ]
}