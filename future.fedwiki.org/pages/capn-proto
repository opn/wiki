{
  "title": "Cap’n Proto",
  "story": [
    {
      "type": "paragraph",
      "id": "87d873b8ad048c29",
      "text": "Cap’n Proto is an insanely fast data interchange format and capability-based RPC system. Think JSON, except binary. Or think Protocol Buffers, except faster - [https://capnproto.org/index.html capnproto.org]"
    },
    {
      "type": "html",
      "id": "3e25b8d3c3167e6b",
      "text": "<H3>Why this is interesting"
    },
    {
      "type": "paragraph",
      "id": "4a989693f7dfecce",
      "text": "Cap’n Proto is the basis for [[Sandstorm.io]], and presents the opportunity to extend LiveCode on the server side in a way which is not possible using conventional web technologies. It leverage's the strengths of [[Livecode]] while mitigating it's weaknesses on the server side."
    },
    {
      "type": "html",
      "id": "0f7f2fbfa364b4ab",
      "text": "It provides:\n<UL>\n<LI>  [[Capability Based Security]]\n<LI>  Capability Urls [http://www.w3.org/TR/capability-urls/ w3.org]\n</UL>"
    },
    {
      "type": "html",
      "id": "86a6881716230410",
      "text": "<H3>Supporting Dynamic Languages"
    },
    {
      "type": "paragraph",
      "id": "aecac5910bd20c8c",
      "text": "What would be needed would be to extend the server with the C++ Dynamic Refelction API - [https://capnproto.org/cxx.html#dynamic-reflection capnproto.org]"
    },
    {
      "type": "paragraph",
      "id": "ccf3274999ed45ae",
      "text": "Dynamic languages have no compile step. This makes it difficult to work capnp compile into the workflow for such languages. Additionally, dynamic languages are often scripting languages that do not support pointer arithmetic or any reasonably-performant alternative."
    },
    {
      "type": "paragraph",
      "id": "882903a831038077",
      "text": "Fortunately, dynamic languages usually have facilities for calling native code. The best way to support Cap’n Proto in a dynamic language, then, is to wrap the C++ library, in particular the C++ dynamic API. This way you get reasonable performance while still avoiding the need to generate any code specific to each schema."
    },
    {
      "type": "paragraph",
      "id": "77d613a7959c7e80",
      "text": "Sometimes you want to write generic code that operates on arbitrary types, iterating over the fields or looking them up by name. For example, you might want to write code that encodes arbitrary Cap’n Proto types in JSON format. This requires something like “reflection”, but C++ does not offer reflection. Also, you might even want to operate on types that aren’t compiled into the binary at all, but only discovered at runtime."
    },
    {
      "type": "paragraph",
      "id": "c1ecf2901b6f8148",
      "text": "The C++ API supports inspecting schemas at runtime via the interface defined in capnp/schema.h, and dynamically reading and writing instances of arbitrary types via capnp/dynamic.h. Here’s the example from the beginning of this file rewritten in terms of the dynamic API:"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Cap’n Proto",
        "story": []
      },
      "date": 1435319716367
    },
    {
      "item": {
        "type": "factory",
        "id": "87d873b8ad048c29"
      },
      "id": "87d873b8ad048c29",
      "type": "add",
      "date": 1435319718148
    },
    {
      "type": "edit",
      "id": "87d873b8ad048c29",
      "item": {
        "type": "paragraph",
        "id": "87d873b8ad048c29",
        "text": "Cap’n Proto is an insanely fast data interchange format and capability-based RPC system. Think JSON, except binary. Or think Protocol Buffers, except faster."
      },
      "date": 1435319770360
    },
    {
      "type": "edit",
      "id": "87d873b8ad048c29",
      "item": {
        "type": "paragraph",
        "id": "87d873b8ad048c29",
        "text": "Cap’n Proto is an insanely fast data interchange format and capability-based RPC system. Think JSON, except binary. Or think Protocol Buffers, except faster - [https://capnproto.org/index.html capnproto.org]"
      },
      "date": 1435319795395
    },
    {
      "type": "add",
      "id": "3e25b8d3c3167e6b",
      "item": {
        "type": "paragraph",
        "id": "3e25b8d3c3167e6b",
        "text": "<H3>Why this is interesting"
      },
      "after": "87d873b8ad048c29",
      "date": 1435319813079
    },
    {
      "type": "add",
      "id": "4a989693f7dfecce",
      "item": {
        "type": "paragraph",
        "id": "4a989693f7dfecce",
        "text": "Cap’n Proto is the basis for [[Sandstorm.io]], and presents the opportunity to extend LiveCode on the server side in a way which is not possible using conventional web technologies. It leverage's the strengths of [[Livecode]] while mitigating it's weaknesses on the server side."
      },
      "after": "3e25b8d3c3167e6b",
      "date": 1435319926523
    },
    {
      "type": "edit",
      "id": "3e25b8d3c3167e6b",
      "item": {
        "type": "html",
        "id": "3e25b8d3c3167e6b",
        "text": "<H3>Why this is interesting"
      },
      "date": 1435319927896
    },
    {
      "type": "add",
      "id": "0f7f2fbfa364b4ab",
      "item": {
        "type": "paragraph",
        "id": "0f7f2fbfa364b4ab",
        "text": "It provides:<UL><LI>Capability Based Security]]</UL?"
      },
      "after": "4a989693f7dfecce",
      "date": 1435319975777
    },
    {
      "type": "edit",
      "id": "0f7f2fbfa364b4ab",
      "item": {
        "type": "html",
        "id": "0f7f2fbfa364b4ab",
        "text": "It provides:<UL><LI>Capability Based Security]]</UL?"
      },
      "date": 1435319976936
    },
    {
      "type": "edit",
      "id": "0f7f2fbfa364b4ab",
      "item": {
        "type": "html",
        "id": "0f7f2fbfa364b4ab",
        "text": "It provides:\n<UL>\n<LI>  Capability Based Security]]\n</UL>"
      },
      "date": 1435319997539
    },
    {
      "item": {
        "type": "factory",
        "id": "86a6881716230410"
      },
      "id": "86a6881716230410",
      "type": "add",
      "after": "0f7f2fbfa364b4ab",
      "date": 1435320044448
    },
    {
      "type": "edit",
      "id": "86a6881716230410",
      "item": {
        "type": "paragraph",
        "id": "86a6881716230410",
        "text": "<H3>Dynamic Reflection"
      },
      "date": 1435320055858
    },
    {
      "type": "add",
      "id": "aecac5910bd20c8c",
      "item": {
        "type": "paragraph",
        "id": "aecac5910bd20c8c",
        "text": "What would be needed would be to extend the server with teh C++ Dynamic Refelction API."
      },
      "after": "86a6881716230410",
      "date": 1435320081665
    },
    {
      "type": "add",
      "id": "77d613a7959c7e80",
      "item": {
        "type": "paragraph",
        "id": "77d613a7959c7e80",
        "text": "Sometimes you want to write generic code that operates on arbitrary types, iterating over the fields or looking them up by name. For example, you might want to write code that encodes arbitrary Cap’n Proto types in JSON format. This requires something like “reflection”, but C++ does not offer reflection. Also, you might even want to operate on types that aren’t compiled into the binary at all, but only discovered at runtime."
      },
      "after": "aecac5910bd20c8c",
      "date": 1435320083641
    },
    {
      "type": "add",
      "id": "c1ecf2901b6f8148",
      "item": {
        "type": "paragraph",
        "id": "c1ecf2901b6f8148",
        "text": "The C++ API supports inspecting schemas at runtime via the interface defined in capnp/schema.h, and dynamically reading and writing instances of arbitrary types via capnp/dynamic.h. Here’s the example from the beginning of this file rewritten in terms of the dynamic API:"
      },
      "after": "77d613a7959c7e80",
      "date": 1435320086265
    },
    {
      "type": "edit",
      "id": "86a6881716230410",
      "item": {
        "type": "html",
        "id": "86a6881716230410",
        "text": "<H3>Dynamic Reflection"
      },
      "date": 1435320088047
    },
    {
      "type": "edit",
      "id": "aecac5910bd20c8c",
      "item": {
        "type": "paragraph",
        "id": "aecac5910bd20c8c",
        "text": "What would be needed would be to extend the server with the C++ Dynamic Refelction API."
      },
      "date": 1435320140233
    },
    {
      "type": "add",
      "id": "ccf3274999ed45ae",
      "item": {
        "type": "paragraph",
        "id": "ccf3274999ed45ae",
        "text": "Dynamic languages have no compile step. This makes it difficult to work capnp compile into the workflow for such languages. Additionally, dynamic languages are often scripting languages that do not support pointer arithmetic or any reasonably-performant alternative."
      },
      "after": "aecac5910bd20c8c",
      "date": 1435320150347
    },
    {
      "type": "add",
      "id": "882903a831038077",
      "item": {
        "type": "paragraph",
        "id": "882903a831038077",
        "text": "Fortunately, dynamic languages usually have facilities for calling native code. The best way to support Cap’n Proto in a dynamic language, then, is to wrap the C++ library, in particular the C++ dynamic API. This way you get reasonable performance while still avoiding the need to generate any code specific to each schema."
      },
      "after": "ccf3274999ed45ae",
      "date": 1435320152175
    },
    {
      "type": "edit",
      "id": "86a6881716230410",
      "item": {
        "type": "html",
        "id": "86a6881716230410",
        "text": "<H3>Supporting Dynamic Languages"
      },
      "date": 1435320159032
    },
    {
      "type": "edit",
      "id": "aecac5910bd20c8c",
      "item": {
        "type": "paragraph",
        "id": "aecac5910bd20c8c",
        "text": "What would be needed would be to extend the server with the C++ Dynamic Refelction API - [https://capnproto.org/cxx.html#dynamic-reflection capnproto.org]"
      },
      "date": 1435320190215
    },
    {
      "type": "edit",
      "id": "0f7f2fbfa364b4ab",
      "item": {
        "type": "html",
        "id": "0f7f2fbfa364b4ab",
        "text": "It provides:\n<UL>\n<LI>  [[Capability Based Security]]\n<LI>  Capability Urls [http://www.w3.org/TR/capability-urls/ w3.org]\n</UL>"
      },
      "date": 1435320490581
    },
    {
      "type": "fork",
      "site": "forage.david.bovill.me",
      "date": 1437312225714
    }
  ]
}