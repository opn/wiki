{
  "title": "Passport",
  "story": [
    {
      "type": "paragraph",
      "id": "9e06240406500f06",
      "text": "Simple, unobtrusive authentication for Node.js - [http://passportjs.org/ passportjs.org]"
    },
    {
      "type": "paragraph",
      "id": "68deb06353f52eb5",
      "text": "Passport is authentication middleware for Node.js. Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based web application. A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more."
    },
    {
      "type": "paragraph",
      "id": "c7fc867fbd069461",
      "text": "Passport is authentication middleware for Node. It is designed to serve a singular purpose: authenticate requests. When writing modules, encapsulation is a virtue, so Passport delegates all other functionality to the application. This separation of concerns keeps code clean and maintainable, and makes Passport extremely easy to integrate into an application.\n\nIn modern web applications, authentication can take a variety of forms. Traditionally, users log in by providing a username and password. With the rise of social networking, single sign-on using an OAuth provider such as Facebook or Twitter has become a popular authentication method. Services that expose an API often require token-based credentials to protect access.\n\nPassport recognizes that each application has unique authentication requirements. Authentication mechanisms, known as strategies, are packaged as individual modules. Applications can choose which strategies to employ, without creating unnecessary dependencies.\n\nDespite the complexities involved in authentication, code does not have to be complicated."
    },
    {
      "type": "code",
      "id": "d7cde0ac53b82bee",
      "text": "app.post('/login', passport.authenticate('local', { successRedirect: '/',\n                                                    failureRedirect: '/login' }));"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Passport",
        "story": []
      },
      "date": 1458827310116
    },
    {
      "item": {
        "type": "factory",
        "id": "9e06240406500f06"
      },
      "id": "9e06240406500f06",
      "type": "add",
      "date": 1458827311287
    },
    {
      "type": "edit",
      "id": "9e06240406500f06",
      "item": {
        "type": "paragraph",
        "id": "9e06240406500f06",
        "text": "- [http://passportjs.org/ passportjs.org]"
      },
      "date": 1458827325369
    },
    {
      "type": "edit",
      "id": "9e06240406500f06",
      "item": {
        "type": "paragraph",
        "id": "9e06240406500f06",
        "text": "Simple, unobtrusive authentication for Node.js - [http://passportjs.org/ passportjs.org]"
      },
      "date": 1458827383661
    },
    {
      "type": "add",
      "id": "1f3e7eade7335baa",
      "item": {
        "type": "paragraph",
        "id": "1f3e7eade7335baa",
        "text": "\napp.js â€” vim\npassport.authenticate('twitter');('facebook');('google');('linkedin');('github');"
      },
      "after": "9e06240406500f06",
      "date": 1458827386390
    },
    {
      "type": "add",
      "id": "68deb06353f52eb5",
      "item": {
        "type": "paragraph",
        "id": "68deb06353f52eb5",
        "text": "Passport is authentication middleware for Node.js. Extremely flexible and modular, Passport can be unobtrusively dropped in to any Express-based web application. A comprehensive set of strategies support authentication using a username and password, Facebook, Twitter, and more."
      },
      "after": "1f3e7eade7335baa",
      "date": 1458827396845
    },
    {
      "type": "remove",
      "id": "1f3e7eade7335baa",
      "date": 1458827399245
    },
    {
      "item": {
        "type": "factory",
        "id": "c7fc867fbd069461"
      },
      "id": "c7fc867fbd069461",
      "type": "add",
      "after": "68deb06353f52eb5",
      "date": 1458827508268
    },
    {
      "type": "edit",
      "id": "c7fc867fbd069461",
      "item": {
        "type": "paragraph",
        "id": "c7fc867fbd069461",
        "text": "Passport is authentication middleware for Node. It is designed to serve a singular purpose: authenticate requests. When writing modules, encapsulation is a virtue, so Passport delegates all other functionality to the application. This separation of concerns keeps code clean and maintainable, and makes Passport extremely easy to integrate into an application.\n\nIn modern web applications, authentication can take a variety of forms. Traditionally, users log in by providing a username and password. With the rise of social networking, single sign-on using an OAuth provider such as Facebook or Twitter has become a popular authentication method. Services that expose an API often require token-based credentials to protect access.\n\nPassport recognizes that each application has unique authentication requirements. Authentication mechanisms, known as strategies, are packaged as individual modules. Applications can choose which strategies to employ, without creating unnecessary dependencies.\n\nDespite the complexities involved in authentication, code does not have to be complicated."
      },
      "date": 1458827520796
    },
    {
      "item": {
        "type": "factory",
        "id": "d7cde0ac53b82bee"
      },
      "id": "d7cde0ac53b82bee",
      "type": "add",
      "after": "c7fc867fbd069461",
      "date": 1458827528697
    },
    {
      "type": "edit",
      "id": "d7cde0ac53b82bee",
      "item": {
        "type": "code",
        "id": "d7cde0ac53b82bee",
        "text": "app.post('/login', passport.authenticate('local', { successRedirect: '/',\n                                                    failureRedirect: '/login' }));"
      },
      "date": 1458827531564
    }
  ]
}