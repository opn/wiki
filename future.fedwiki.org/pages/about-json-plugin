{
  "title": "About JSON Plugin",
  "story": [
    {
      "type": "paragraph",
      "id": "7fdbf43fc61e3058",
      "text": "The plugin exposes restful endpoints for reading and writing JSON data that will be stored within the item along with other items on the page. Changes in configuration of the plugin are recorded in the journal but updates to the data itself are recorded elsewhere."
    },
    {
      "type": "paragraph",
      "id": "bc3511ba764e4135",
      "text": "This example is from the [[Data in Context]] application."
    },
    {
      "type": "json",
      "id": "22660a2e7f8f8919",
      "text": "Manually maintained diagrams owned and managed by the architecture team updated within weeks before or after actual deployments.",
      "resource": [
        {
          "type": "rest",
          "from": "Omicron Tournament selection",
          "to": "Alpha Substring search"
        },
        {
          "type": "rest",
          "from": "Phi Least slack time scheduling",
          "to": "Alpha Incremental encoding"
        },
        {
          "type": "queue",
          "queue": "algorithm_adaptive_alpha",
          "write": "Sigma Adaptive histogram equalization"
        },
        {
          "type": "queue",
          "queue": "algorithm_adaptive_alpha",
          "read": "Alpha CYK algorithm"
        },
        {
          "type": "site",
          "site": "google",
          "from": "Alpha Adler-32"
        },
        {
          "type": "store",
          "store": "elastic",
          "from": "Omega Postman sort"
        },
        {
          "type": "site",
          "site": "microsoft",
          "from": "Omega Prime-factor FFT algorithm"
        },
        {
          "type": "queue",
          "queue": "midpoint_parser_circle",
          "write": "Sigma Pratt parser"
        },
        {
          "type": "queue",
          "queue": "midpoint_parser_circle",
          "read": "Omega Midpoint circle algorithm"
        },
        {
          "type": "rest",
          "from": "Xi Luhn mod N algorithm",
          "to": "Omega k-means++"
        },
        {
          "type": "store",
          "store": "memcache",
          "from": "Beta Beam stack search"
        },
        {
          "type": "site",
          "site": "wikipedia",
          "from": "Beta Polygon triangulation"
        },
        {
          "type": "queue",
          "queue": "warped_warped_beta",
          "write": "Lambda Warped Linear Predictive Coding"
        },
        {
          "type": "queue",
          "queue": "warped_warped_beta",
          "read": "Beta DBSCAN"
        },
        {
          "type": "rest",
          "from": "Rho Eclat algorithm",
          "to": "Beta Doomsday algorithm"
        },
        {
          "type": "rest",
          "from": "Rho Levenshtein edit distance",
          "to": "Beta LPBoost"
        },
        {
          "type": "store",
          "store": "memcache",
          "from": "Xi Yamartino method"
        },
        {
          "type": "site",
          "site": "apple",
          "from": "Xi Velvet"
        },
        {
          "type": "rest",
          "from": "Gamma Global illumination",
          "to": "Xi Generational garbage collector"
        },
        {
          "type": "queue",
          "queue": "doomsday_ambient_doomsday",
          "write": "Delta Doomsday algorithm"
        },
        {
          "type": "queue",
          "queue": "doomsday_ambient_doomsday",
          "read": "Xi Ambient occlusion"
        },
        {
          "type": "queue",
          "queue": "nu_mod_algorithm",
          "write": "Nu Tomasulo algorithm"
        },
        {
          "type": "queue",
          "queue": "nu_mod_algorithm",
          "read": "Xi Luhn mod N algorithm"
        },
        {
          "type": "queue",
          "queue": "omega_shading_algorithm",
          "write": "Delta Phong shading"
        },
        {
          "type": "queue",
          "queue": "omega_shading_algorithm",
          "read": "Omega Luhn algorithm"
        },
        {
          "type": "queue",
          "queue": "32_expectation_algorithm",
          "write": "Alpha Adler-32"
        },
        {
          "type": "queue",
          "queue": "32_expectation_algorithm",
          "read": "Omega Expectation-maximization algorithm"
        },
        {
          "type": "store",
          "store": "memcache",
          "from": "Omega Fatigue"
        },
        {
          "type": "store",
          "store": "redis",
          "from": "Sigma Histogram equalization"
        },
        {
          "type": "rest",
          "from": "Theta Dice's coefficient",
          "to": "Sigma Adaptive histogram equalization"
        },
        {
          "type": "site",
          "site": "microsoft",
          "from": "Sigma Pratt parser"
        },
        {
          "type": "rest",
          "from": "Tau Vincenty's formulae",
          "to": "Sigma Adaptive replacement cache"
        },
        {
          "type": "rest",
          "from": "Rho Phonetic algorithm",
          "to": "Xi Branch and cut"
        },
        {
          "type": "rest",
          "from": "Lambda Self-organizing map",
          "to": "Xi Antipodal"
        },
        {
          "type": "site",
          "site": "apple",
          "from": "Xi Davis–Putnam–Logemann–Loveland algorithm"
        },
        {
          "type": "rest",
          "from": "Rho Gosper's algorithm",
          "to": "Xi Trapezoidal rule (differential equations)"
        },
        {
          "type": "site",
          "site": "microsoft",
          "from": "Xi Uniform binary search"
        },
        {
          "type": "store",
          "store": "neo4j",
          "from": "Eta Hamming distance"
        },
        {
          "type": "rest",
          "from": "Lambda A-law algorithm",
          "to": "Eta Incremental encoding"
        },
        {
          "type": "rest",
          "from": "Omega Fatigue",
          "to": "Eta Birkhoff interpolation"
        },
        {
          "type": "rest",
          "from": "Gamma B*",
          "to": "Nu Shannon–Fano coding"
        },
        {
          "type": "rest",
          "from": "Beta LPBoost",
          "to": "Nu Tomasulo algorithm"
        },
        {
          "type": "site",
          "site": "google",
          "from": "Nu Pollard's rho algorithm"
        },
        {
          "type": "rest",
          "from": "Xi Trapezoidal rule (differential equations)",
          "to": "Rho Phonetic algorithm"
        },
        {
          "type": "rest",
          "from": "Rho Odds algorithm",
          "to": "Rho Gosper's algorithm"
        },
        {
          "type": "rest",
          "from": "Xi Luhn mod N algorithm",
          "to": "Rho Dijkstra's algorithm"
        },
        {
          "type": "rest",
          "from": "Rho Library sort",
          "to": "Rho Levenshtein edit distance"
        },
        {
          "type": "rest",
          "from": "Tau Faugère F4 algorithm",
          "to": "Rho Odds algorithm"
        },
        {
          "type": "queue",
          "queue": "theta_beta_dbscan",
          "write": "Beta DBSCAN"
        },
        {
          "type": "queue",
          "queue": "theta_beta_dbscan",
          "read": "Theta Generational garbage collector"
        },
        {
          "type": "queue",
          "queue": "key_algorithm_symmetric",
          "write": "Theta Index calculus algorithm"
        },
        {
          "type": "queue",
          "queue": "key_algorithm_symmetric",
          "read": "Theta Symmetric (secret key) encryption"
        },
        {
          "type": "site",
          "site": "google",
          "from": "Theta Index calculus algorithm"
        },
        {
          "type": "site",
          "site": "microsoft",
          "from": "Theta multiplicative weight-update scheme"
        },
        {
          "type": "site",
          "site": "microsoft",
          "from": "Theta Dice's coefficient"
        },
        {
          "type": "rest",
          "from": "Theta Index calculus algorithm",
          "to": "Theta Double dabble"
        },
        {
          "type": "rest",
          "from": "Nu Pollard's rho algorithm",
          "to": "Lambda Warped Linear Predictive Coding"
        },
        {
          "type": "store",
          "store": "memcache",
          "from": "Lambda bandwidth of a symmetric sparse matrix"
        },
        {
          "type": "rest",
          "from": "Alpha Incremental encoding",
          "to": "Lambda Lempel–Ziv–Storer–Szymanski"
        },
        {
          "type": "rest",
          "from": "Delta Phong shading",
          "to": "Lambda Transform coding"
        },
        {
          "type": "site",
          "site": "apple",
          "from": "Lambda Multivariate interpolation"
        },
        {
          "type": "rest",
          "from": "Rho Odds algorithm",
          "to": "Beta Gaussian elimination"
        },
        {
          "type": "store",
          "store": "elastic",
          "from": "Beta Cantor–Zassenhaus algorithm"
        },
        {
          "type": "queue",
          "queue": "beta_beta_omega",
          "write": "Omega Luhn algorithm"
        },
        {
          "type": "queue",
          "queue": "beta_beta_omega",
          "read": "Beta transaction recovery"
        },
        {
          "type": "store",
          "store": "mysql",
          "from": "Chi Symbolic Cholesky decomposition"
        },
        {
          "type": "site",
          "site": "wikipedia",
          "from": "Chi Pulmonary embolism"
        },
        {
          "type": "site",
          "site": "amazon",
          "from": "Chi Gauss–Seidel method"
        },
        {
          "type": "site",
          "site": "microsoft",
          "from": "Lambda A-law algorithm"
        },
        {
          "type": "store",
          "store": "elastic",
          "from": "Lambda SURF (Speeded Up Robust Features)"
        },
        {
          "type": "store",
          "store": "mysql",
          "from": "Lambda Breadth-first search"
        },
        {
          "type": "rest",
          "from": "Eta IDEA",
          "to": "Lambda Random forest"
        },
        {
          "type": "rest",
          "from": "Rho Library sort",
          "to": "Lambda Cristian's algorithm"
        },
        {
          "type": "store",
          "store": "mysql",
          "from": "Gamma Global illumination"
        },
        {
          "type": "site",
          "site": "microsoft",
          "from": "Gamma Sorted list"
        },
        {
          "type": "rest",
          "from": "Xi Davis–Putnam–Logemann–Loveland algorithm",
          "to": "Gamma B*"
        },
        {
          "type": "rest",
          "from": "Phi Metropolis light transport",
          "to": "Delta Computation of π"
        },
        {
          "type": "rest",
          "from": "Xi Davis–Putnam–Logemann–Loveland algorithm",
          "to": "Delta Floyd's cycle-finding algorithm"
        },
        {
          "type": "rest",
          "from": "Xi Branch and cut",
          "to": "Delta Mutual exclusion"
        },
        {
          "type": "rest",
          "from": "Phi Least slack time scheduling",
          "to": "Delta Bluestein's FFT algorithm"
        },
        {
          "type": "rest",
          "from": "Omega Prime-factor FFT algorithm",
          "to": "Delta Phong shading"
        },
        {
          "type": "store",
          "store": "neo4j",
          "from": "Delta Doomsday algorithm"
        },
        {
          "type": "rest",
          "from": "Rho Gosper's algorithm",
          "to": "Rho Library sort"
        },
        {
          "type": "store",
          "store": "redis",
          "from": "Rho Odds algorithm"
        },
        {
          "type": "rest",
          "from": "Chi Gauss–Seidel method",
          "to": "Rho Eclat algorithm"
        },
        {
          "type": "queue",
          "queue": "hellman_algorithm_hellman",
          "write": "Beta Doomsday algorithm"
        },
        {
          "type": "queue",
          "queue": "hellman_algorithm_hellman",
          "read": "Rho Diffie–Hellman key exchange"
        },
        {
          "type": "rest",
          "from": "Delta Phong shading",
          "to": "Rho Iterative deepening depth-first search"
        },
        {
          "type": "rest",
          "from": "Tau Tree sort",
          "to": "Rho Euclidean Distance Transform"
        },
        {
          "type": "queue",
          "queue": "distance_phi_distance",
          "write": "Eta Hamming distance"
        },
        {
          "type": "queue",
          "queue": "distance_phi_distance",
          "read": "Phi Metropolis light transport"
        },
        {
          "type": "queue",
          "queue": "exchange_hellman_hellman",
          "write": "Rho Diffie–Hellman key exchange"
        },
        {
          "type": "queue",
          "queue": "exchange_hellman_hellman",
          "read": "Phi PageRank"
        },
        {
          "type": "store",
          "store": "redis",
          "from": "Phi Least slack time scheduling"
        },
        {
          "type": "rest",
          "from": "Theta Double dabble",
          "to": "Phi DSA"
        },
        {
          "type": "store",
          "store": "elastic",
          "from": "Lambda SURF (Speeded Up Robust Features)"
        },
        {
          "type": "site",
          "site": "wikipedia",
          "from": "Lambda Minimum degree algorithm"
        },
        {
          "type": "queue",
          "queue": "adaptive_adaptive_replacement",
          "write": "Lambda Adaptive replacement cache"
        },
        {
          "type": "queue",
          "queue": "adaptive_adaptive_replacement",
          "read": "Lambda Adaptive replacement cache"
        },
        {
          "type": "store",
          "store": "memcache",
          "from": "Omicron Coloring algorithm"
        },
        {
          "type": "store",
          "store": "elastic",
          "from": "Omicron Tournament selection"
        },
        {
          "type": "rest",
          "from": "Lambda A-law algorithm",
          "to": "Omicron Runge–Kutta methods"
        },
        {
          "type": "site",
          "site": "wikipedia",
          "from": "Omicron Constraint satisfaction"
        },
        {
          "type": "rest",
          "from": "Gamma Global illumination",
          "to": "Omicron Prüfer coding"
        },
        {
          "type": "rest",
          "from": "Sigma Adaptive histogram equalization",
          "to": "Eta EXP1"
        },
        {
          "type": "rest",
          "from": "Lambda Adaptive replacement cache",
          "to": "Eta IDEA"
        },
        {
          "type": "rest",
          "from": "Omicron Tournament selection",
          "to": "Eta Kruskal's algorithm"
        },
        {
          "type": "store",
          "store": "mysql",
          "from": "Tau Edmonds–Karp algorithm"
        },
        {
          "type": "rest",
          "from": "Phi Least slack time scheduling",
          "to": "Tau Faugère F4 algorithm"
        },
        {
          "type": "rest",
          "from": "Theta Index calculus algorithm",
          "to": "Tau Vincenty's formulae"
        },
        {
          "type": "queue",
          "queue": "alpha_approximate_substring",
          "write": "Alpha Substring search"
        },
        {
          "type": "queue",
          "queue": "alpha_approximate_substring",
          "read": "Tau Approximate counting algorithm"
        },
        {
          "type": "queue",
          "queue": "first_iterative_search",
          "write": "Rho Iterative deepening depth-first search"
        },
        {
          "type": "queue",
          "queue": "first_iterative_search",
          "read": "Tau Tree sort"
        },
        {
          "type": "rest",
          "from": "Sigma Pratt parser",
          "to": "Lambda Adler-32"
        },
        {
          "type": "rest",
          "from": "Lambda Breadth-first search",
          "to": "Lambda Self-organizing map"
        },
        {
          "type": "rest",
          "from": "Delta Floyd's cycle-finding algorithm",
          "to": "Lambda Dictionary coder"
        },
        {
          "type": "store",
          "store": "memcache",
          "from": "Lambda Hungarian method"
        },
        {
          "type": "queue",
          "queue": "lambda_cycle_s",
          "write": "Delta Floyd's cycle-finding algorithm"
        },
        {
          "type": "queue",
          "queue": "lambda_cycle_s",
          "read": "Lambda Triangulation"
        }
      ],
      "slug": "dataflow-diagram",
      "writes": 2,
      "writer": "wildcard",
      "written": 1490542804852,
      "interval": 345557317
    },
    {
      "type": "paragraph",
      "id": "bf05268d5325b51f",
      "text": "Double-click to edit informative text describing stewardship and refresh intentions of data to be stored within. Recent update and update interval are reported automatically."
    },
    {
      "type": "markdown",
      "id": "d76cedbac968af86",
      "text": "# API"
    },
    {
      "type": "paragraph",
      "id": "96bdf0de442cc7ba",
      "text": "The server-side of this plugin adds api routes to the origin server. Reads and writes go to the first JSON plugin found on a page. Requests fail if none."
    },
    {
      "type": "paragraph",
      "id": "92cbe6cac5108418",
      "text": "Read data from the page with an http GET request."
    },
    {
      "type": "code",
      "id": "4a82a08a99a7dc43",
      "text": "curl http://<site>/plugin/json/<slug>"
    },
    {
      "type": "paragraph",
      "id": "cb70f800b671844d",
      "text": "Write data to the page with an http PUT request."
    },
    {
      "type": "code",
      "id": "6803b3063cc970e8",
      "text": "echo '{\"foo\": \"bar\"}' |\\\n  curl -X PUT  -d @- \\\n    -H \"Content-Type: application/json\" \\\n    -H \"X-Api-Key:35ece947aa90b581\" \\\n    http://<site>/plugin/json/<slug>"
    },
    {
      "type": "paragraph",
      "id": "0c42e39b5eaffc1e",
      "text": "Write requests report back to the requestor information useful for confirming proper operation of a write."
    },
    {
      "type": "code",
      "id": "4ce154d5489dd999",
      "text": "{\n  \"status\": \"ok\",\n  \"writes\": 3330,\n  \"interval\": 299524,\n  \"length\": 17736\n}"
    },
    {
      "type": "paragraph",
      "id": "3cf8022706d21e44",
      "text": "See [[About JSON API Keys]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "About JSON Plugin",
        "story": [
          {
            "type": "paragraph",
            "id": "7fdbf43fc61e3058",
            "text": "Here we describe the purpose of the plugin and include a sample."
          },
          {
            "type": "json",
            "id": "35ece947aa90b581",
            "text": "This is text in the new plugin. You can *double-click* to edit it too."
          }
        ]
      },
      "date": 1471735279000,
      "certificate": "from mkplugin.sh"
    },
    {
      "type": "edit",
      "id": "7fdbf43fc61e3058",
      "item": {
        "type": "paragraph",
        "id": "7fdbf43fc61e3058",
        "text": "The plugin exposes restful endpoints for reading and writing JSON data that will be stored within the item along with other items on the page. Changes in configuration of the plugin are recorded in the journal but updates to the data itself are recorded elsewhere."
      },
      "date": 1471839965449
    },
    {
      "type": "edit",
      "id": "35ece947aa90b581",
      "item": {
        "type": "json",
        "id": "35ece947aa90b581",
        "text": "23 writes, 6 objects, 3 arrays."
      },
      "date": 1471840007407
    },
    {
      "item": {
        "type": "factory",
        "id": "92cbe6cac5108418"
      },
      "id": "92cbe6cac5108418",
      "type": "add",
      "after": "35ece947aa90b581",
      "date": 1471840211675
    },
    {
      "type": "edit",
      "id": "92cbe6cac5108418",
      "item": {
        "type": "paragraph",
        "id": "92cbe6cac5108418",
        "text": "Read data from the object with an http GET request."
      },
      "date": 1471840288670
    },
    {
      "item": {
        "type": "factory",
        "id": "4a82a08a99a7dc43"
      },
      "id": "4a82a08a99a7dc43",
      "type": "add",
      "after": "92cbe6cac5108418",
      "date": 1471840291516
    },
    {
      "type": "edit",
      "id": "4a82a08a99a7dc43",
      "item": {
        "type": "code",
        "id": "4a82a08a99a7dc43",
        "text": "curl http://<site>/plugin/json/<slug>"
      },
      "date": 1471840371397
    },
    {
      "item": {
        "type": "factory",
        "id": "cb70f800b671844d"
      },
      "id": "cb70f800b671844d",
      "type": "add",
      "after": "4a82a08a99a7dc43",
      "date": 1471840380078
    },
    {
      "type": "edit",
      "id": "cb70f800b671844d",
      "item": {
        "type": "paragraph",
        "id": "cb70f800b671844d",
        "text": "Write data to the page with an http PUT request."
      },
      "date": 1471840403073
    },
    {
      "item": {
        "type": "factory",
        "id": "6803b3063cc970e8"
      },
      "id": "6803b3063cc970e8",
      "type": "add",
      "after": "cb70f800b671844d",
      "date": 1471840427768
    },
    {
      "type": "edit",
      "id": "6803b3063cc970e8",
      "item": {
        "type": "code",
        "id": "6803b3063cc970e8",
        "text": "echo '{\"foo\": \"bar\"}' |\\\n  curl -X PUT  -d @-\\\n    -H \"Content-Type: application/json\" \\\n    -H \"X-Api-Key:35ece947aa90b581\" \\\n    http://<site>/plugin/json/<slug>"
      },
      "date": 1471840593749
    },
    {
      "type": "edit",
      "id": "92cbe6cac5108418",
      "item": {
        "type": "paragraph",
        "id": "92cbe6cac5108418",
        "text": "Read data from the page with an http GET request."
      },
      "date": 1471840625111
    },
    {
      "type": "edit",
      "id": "6803b3063cc970e8",
      "item": {
        "type": "code",
        "id": "6803b3063cc970e8",
        "text": "echo '{\"foo\": \"bar\"}' |\\\n  curl -X PUT  -d @- \\\n    -H \"Content-Type: application/json\" \\\n    -H \"X-Api-Key:35ece947aa90b581\" \\\n    http://<site>/plugin/json/<slug>"
      },
      "date": 1471840821805
    },
    {
      "type": "remove",
      "id": "35ece947aa90b581",
      "date": 1491667382686
    },
    {
      "type": "add",
      "id": "bc3511ba764e4135",
      "item": {
        "type": "paragraph",
        "id": "bc3511ba764e4135",
        "text": "This example is from "
      },
      "after": "7fdbf43fc61e3058",
      "date": 1491667417107
    },
    {
      "type": "edit",
      "id": "bc3511ba764e4135",
      "item": {
        "type": "paragraph",
        "id": "bc3511ba764e4135",
        "text": "This example is from the [[Data in Context]] sample."
      },
      "date": 1491667451428
    },
    {
      "type": "add",
      "item": {
        "type": "json",
        "id": "22660a2e7f8f8919",
        "text": "Manually maintained diagrams owned and managed by the architecture team updated within weeks before or after actual deployments.",
        "resource": [
          {
            "type": "rest",
            "from": "Omicron Tournament selection",
            "to": "Alpha Substring search"
          },
          {
            "type": "rest",
            "from": "Phi Least slack time scheduling",
            "to": "Alpha Incremental encoding"
          },
          {
            "type": "queue",
            "queue": "algorithm_adaptive_alpha",
            "write": "Sigma Adaptive histogram equalization"
          },
          {
            "type": "queue",
            "queue": "algorithm_adaptive_alpha",
            "read": "Alpha CYK algorithm"
          },
          {
            "type": "site",
            "site": "google",
            "from": "Alpha Adler-32"
          },
          {
            "type": "store",
            "store": "elastic",
            "from": "Omega Postman sort"
          },
          {
            "type": "site",
            "site": "microsoft",
            "from": "Omega Prime-factor FFT algorithm"
          },
          {
            "type": "queue",
            "queue": "midpoint_parser_circle",
            "write": "Sigma Pratt parser"
          },
          {
            "type": "queue",
            "queue": "midpoint_parser_circle",
            "read": "Omega Midpoint circle algorithm"
          },
          {
            "type": "rest",
            "from": "Xi Luhn mod N algorithm",
            "to": "Omega k-means++"
          },
          {
            "type": "store",
            "store": "memcache",
            "from": "Beta Beam stack search"
          },
          {
            "type": "site",
            "site": "wikipedia",
            "from": "Beta Polygon triangulation"
          },
          {
            "type": "queue",
            "queue": "warped_warped_beta",
            "write": "Lambda Warped Linear Predictive Coding"
          },
          {
            "type": "queue",
            "queue": "warped_warped_beta",
            "read": "Beta DBSCAN"
          },
          {
            "type": "rest",
            "from": "Rho Eclat algorithm",
            "to": "Beta Doomsday algorithm"
          },
          {
            "type": "rest",
            "from": "Rho Levenshtein edit distance",
            "to": "Beta LPBoost"
          },
          {
            "type": "store",
            "store": "memcache",
            "from": "Xi Yamartino method"
          },
          {
            "type": "site",
            "site": "apple",
            "from": "Xi Velvet"
          },
          {
            "type": "rest",
            "from": "Gamma Global illumination",
            "to": "Xi Generational garbage collector"
          },
          {
            "type": "queue",
            "queue": "doomsday_ambient_doomsday",
            "write": "Delta Doomsday algorithm"
          },
          {
            "type": "queue",
            "queue": "doomsday_ambient_doomsday",
            "read": "Xi Ambient occlusion"
          },
          {
            "type": "queue",
            "queue": "nu_mod_algorithm",
            "write": "Nu Tomasulo algorithm"
          },
          {
            "type": "queue",
            "queue": "nu_mod_algorithm",
            "read": "Xi Luhn mod N algorithm"
          },
          {
            "type": "queue",
            "queue": "omega_shading_algorithm",
            "write": "Delta Phong shading"
          },
          {
            "type": "queue",
            "queue": "omega_shading_algorithm",
            "read": "Omega Luhn algorithm"
          },
          {
            "type": "queue",
            "queue": "32_expectation_algorithm",
            "write": "Alpha Adler-32"
          },
          {
            "type": "queue",
            "queue": "32_expectation_algorithm",
            "read": "Omega Expectation-maximization algorithm"
          },
          {
            "type": "store",
            "store": "memcache",
            "from": "Omega Fatigue"
          },
          {
            "type": "store",
            "store": "redis",
            "from": "Sigma Histogram equalization"
          },
          {
            "type": "rest",
            "from": "Theta Dice's coefficient",
            "to": "Sigma Adaptive histogram equalization"
          },
          {
            "type": "site",
            "site": "microsoft",
            "from": "Sigma Pratt parser"
          },
          {
            "type": "rest",
            "from": "Tau Vincenty's formulae",
            "to": "Sigma Adaptive replacement cache"
          },
          {
            "type": "rest",
            "from": "Rho Phonetic algorithm",
            "to": "Xi Branch and cut"
          },
          {
            "type": "rest",
            "from": "Lambda Self-organizing map",
            "to": "Xi Antipodal"
          },
          {
            "type": "site",
            "site": "apple",
            "from": "Xi Davis–Putnam–Logemann–Loveland algorithm"
          },
          {
            "type": "rest",
            "from": "Rho Gosper's algorithm",
            "to": "Xi Trapezoidal rule (differential equations)"
          },
          {
            "type": "site",
            "site": "microsoft",
            "from": "Xi Uniform binary search"
          },
          {
            "type": "store",
            "store": "neo4j",
            "from": "Eta Hamming distance"
          },
          {
            "type": "rest",
            "from": "Lambda A-law algorithm",
            "to": "Eta Incremental encoding"
          },
          {
            "type": "rest",
            "from": "Omega Fatigue",
            "to": "Eta Birkhoff interpolation"
          },
          {
            "type": "rest",
            "from": "Gamma B*",
            "to": "Nu Shannon–Fano coding"
          },
          {
            "type": "rest",
            "from": "Beta LPBoost",
            "to": "Nu Tomasulo algorithm"
          },
          {
            "type": "site",
            "site": "google",
            "from": "Nu Pollard's rho algorithm"
          },
          {
            "type": "rest",
            "from": "Xi Trapezoidal rule (differential equations)",
            "to": "Rho Phonetic algorithm"
          },
          {
            "type": "rest",
            "from": "Rho Odds algorithm",
            "to": "Rho Gosper's algorithm"
          },
          {
            "type": "rest",
            "from": "Xi Luhn mod N algorithm",
            "to": "Rho Dijkstra's algorithm"
          },
          {
            "type": "rest",
            "from": "Rho Library sort",
            "to": "Rho Levenshtein edit distance"
          },
          {
            "type": "rest",
            "from": "Tau Faugère F4 algorithm",
            "to": "Rho Odds algorithm"
          },
          {
            "type": "queue",
            "queue": "theta_beta_dbscan",
            "write": "Beta DBSCAN"
          },
          {
            "type": "queue",
            "queue": "theta_beta_dbscan",
            "read": "Theta Generational garbage collector"
          },
          {
            "type": "queue",
            "queue": "key_algorithm_symmetric",
            "write": "Theta Index calculus algorithm"
          },
          {
            "type": "queue",
            "queue": "key_algorithm_symmetric",
            "read": "Theta Symmetric (secret key) encryption"
          },
          {
            "type": "site",
            "site": "google",
            "from": "Theta Index calculus algorithm"
          },
          {
            "type": "site",
            "site": "microsoft",
            "from": "Theta multiplicative weight-update scheme"
          },
          {
            "type": "site",
            "site": "microsoft",
            "from": "Theta Dice's coefficient"
          },
          {
            "type": "rest",
            "from": "Theta Index calculus algorithm",
            "to": "Theta Double dabble"
          },
          {
            "type": "rest",
            "from": "Nu Pollard's rho algorithm",
            "to": "Lambda Warped Linear Predictive Coding"
          },
          {
            "type": "store",
            "store": "memcache",
            "from": "Lambda bandwidth of a symmetric sparse matrix"
          },
          {
            "type": "rest",
            "from": "Alpha Incremental encoding",
            "to": "Lambda Lempel–Ziv–Storer–Szymanski"
          },
          {
            "type": "rest",
            "from": "Delta Phong shading",
            "to": "Lambda Transform coding"
          },
          {
            "type": "site",
            "site": "apple",
            "from": "Lambda Multivariate interpolation"
          },
          {
            "type": "rest",
            "from": "Rho Odds algorithm",
            "to": "Beta Gaussian elimination"
          },
          {
            "type": "store",
            "store": "elastic",
            "from": "Beta Cantor–Zassenhaus algorithm"
          },
          {
            "type": "queue",
            "queue": "beta_beta_omega",
            "write": "Omega Luhn algorithm"
          },
          {
            "type": "queue",
            "queue": "beta_beta_omega",
            "read": "Beta transaction recovery"
          },
          {
            "type": "store",
            "store": "mysql",
            "from": "Chi Symbolic Cholesky decomposition"
          },
          {
            "type": "site",
            "site": "wikipedia",
            "from": "Chi Pulmonary embolism"
          },
          {
            "type": "site",
            "site": "amazon",
            "from": "Chi Gauss–Seidel method"
          },
          {
            "type": "site",
            "site": "microsoft",
            "from": "Lambda A-law algorithm"
          },
          {
            "type": "store",
            "store": "elastic",
            "from": "Lambda SURF (Speeded Up Robust Features)"
          },
          {
            "type": "store",
            "store": "mysql",
            "from": "Lambda Breadth-first search"
          },
          {
            "type": "rest",
            "from": "Eta IDEA",
            "to": "Lambda Random forest"
          },
          {
            "type": "rest",
            "from": "Rho Library sort",
            "to": "Lambda Cristian's algorithm"
          },
          {
            "type": "store",
            "store": "mysql",
            "from": "Gamma Global illumination"
          },
          {
            "type": "site",
            "site": "microsoft",
            "from": "Gamma Sorted list"
          },
          {
            "type": "rest",
            "from": "Xi Davis–Putnam–Logemann–Loveland algorithm",
            "to": "Gamma B*"
          },
          {
            "type": "rest",
            "from": "Phi Metropolis light transport",
            "to": "Delta Computation of π"
          },
          {
            "type": "rest",
            "from": "Xi Davis–Putnam–Logemann–Loveland algorithm",
            "to": "Delta Floyd's cycle-finding algorithm"
          },
          {
            "type": "rest",
            "from": "Xi Branch and cut",
            "to": "Delta Mutual exclusion"
          },
          {
            "type": "rest",
            "from": "Phi Least slack time scheduling",
            "to": "Delta Bluestein's FFT algorithm"
          },
          {
            "type": "rest",
            "from": "Omega Prime-factor FFT algorithm",
            "to": "Delta Phong shading"
          },
          {
            "type": "store",
            "store": "neo4j",
            "from": "Delta Doomsday algorithm"
          },
          {
            "type": "rest",
            "from": "Rho Gosper's algorithm",
            "to": "Rho Library sort"
          },
          {
            "type": "store",
            "store": "redis",
            "from": "Rho Odds algorithm"
          },
          {
            "type": "rest",
            "from": "Chi Gauss–Seidel method",
            "to": "Rho Eclat algorithm"
          },
          {
            "type": "queue",
            "queue": "hellman_algorithm_hellman",
            "write": "Beta Doomsday algorithm"
          },
          {
            "type": "queue",
            "queue": "hellman_algorithm_hellman",
            "read": "Rho Diffie–Hellman key exchange"
          },
          {
            "type": "rest",
            "from": "Delta Phong shading",
            "to": "Rho Iterative deepening depth-first search"
          },
          {
            "type": "rest",
            "from": "Tau Tree sort",
            "to": "Rho Euclidean Distance Transform"
          },
          {
            "type": "queue",
            "queue": "distance_phi_distance",
            "write": "Eta Hamming distance"
          },
          {
            "type": "queue",
            "queue": "distance_phi_distance",
            "read": "Phi Metropolis light transport"
          },
          {
            "type": "queue",
            "queue": "exchange_hellman_hellman",
            "write": "Rho Diffie–Hellman key exchange"
          },
          {
            "type": "queue",
            "queue": "exchange_hellman_hellman",
            "read": "Phi PageRank"
          },
          {
            "type": "store",
            "store": "redis",
            "from": "Phi Least slack time scheduling"
          },
          {
            "type": "rest",
            "from": "Theta Double dabble",
            "to": "Phi DSA"
          },
          {
            "type": "store",
            "store": "elastic",
            "from": "Lambda SURF (Speeded Up Robust Features)"
          },
          {
            "type": "site",
            "site": "wikipedia",
            "from": "Lambda Minimum degree algorithm"
          },
          {
            "type": "queue",
            "queue": "adaptive_adaptive_replacement",
            "write": "Lambda Adaptive replacement cache"
          },
          {
            "type": "queue",
            "queue": "adaptive_adaptive_replacement",
            "read": "Lambda Adaptive replacement cache"
          },
          {
            "type": "store",
            "store": "memcache",
            "from": "Omicron Coloring algorithm"
          },
          {
            "type": "store",
            "store": "elastic",
            "from": "Omicron Tournament selection"
          },
          {
            "type": "rest",
            "from": "Lambda A-law algorithm",
            "to": "Omicron Runge–Kutta methods"
          },
          {
            "type": "site",
            "site": "wikipedia",
            "from": "Omicron Constraint satisfaction"
          },
          {
            "type": "rest",
            "from": "Gamma Global illumination",
            "to": "Omicron Prüfer coding"
          },
          {
            "type": "rest",
            "from": "Sigma Adaptive histogram equalization",
            "to": "Eta EXP1"
          },
          {
            "type": "rest",
            "from": "Lambda Adaptive replacement cache",
            "to": "Eta IDEA"
          },
          {
            "type": "rest",
            "from": "Omicron Tournament selection",
            "to": "Eta Kruskal's algorithm"
          },
          {
            "type": "store",
            "store": "mysql",
            "from": "Tau Edmonds–Karp algorithm"
          },
          {
            "type": "rest",
            "from": "Phi Least slack time scheduling",
            "to": "Tau Faugère F4 algorithm"
          },
          {
            "type": "rest",
            "from": "Theta Index calculus algorithm",
            "to": "Tau Vincenty's formulae"
          },
          {
            "type": "queue",
            "queue": "alpha_approximate_substring",
            "write": "Alpha Substring search"
          },
          {
            "type": "queue",
            "queue": "alpha_approximate_substring",
            "read": "Tau Approximate counting algorithm"
          },
          {
            "type": "queue",
            "queue": "first_iterative_search",
            "write": "Rho Iterative deepening depth-first search"
          },
          {
            "type": "queue",
            "queue": "first_iterative_search",
            "read": "Tau Tree sort"
          },
          {
            "type": "rest",
            "from": "Sigma Pratt parser",
            "to": "Lambda Adler-32"
          },
          {
            "type": "rest",
            "from": "Lambda Breadth-first search",
            "to": "Lambda Self-organizing map"
          },
          {
            "type": "rest",
            "from": "Delta Floyd's cycle-finding algorithm",
            "to": "Lambda Dictionary coder"
          },
          {
            "type": "store",
            "store": "memcache",
            "from": "Lambda Hungarian method"
          },
          {
            "type": "queue",
            "queue": "lambda_cycle_s",
            "write": "Delta Floyd's cycle-finding algorithm"
          },
          {
            "type": "queue",
            "queue": "lambda_cycle_s",
            "read": "Lambda Triangulation"
          }
        ],
        "slug": "dataflow-diagram",
        "writes": 2,
        "writer": "wildcard",
        "written": 1490542804852,
        "interval": 345557317
      },
      "after": "bc3511ba764e4135",
      "id": "22660a2e7f8f8919",
      "date": 1491667458914
    },
    {
      "type": "edit",
      "id": "bc3511ba764e4135",
      "item": {
        "type": "paragraph",
        "id": "bc3511ba764e4135",
        "text": "This example is from the [[Data in Context]] application."
      },
      "date": 1491667470083
    },
    {
      "type": "add",
      "id": "bf05268d5325b51f",
      "item": {
        "type": "paragraph",
        "id": "bf05268d5325b51f",
        "text": "Double-click to edit informative text describing stewardship and refresh intentions of data to be stored within."
      },
      "after": "92cbe6cac5108418",
      "date": 1491667814625
    },
    {
      "type": "move",
      "order": [
        "7fdbf43fc61e3058",
        "bc3511ba764e4135",
        "22660a2e7f8f8919",
        "bf05268d5325b51f",
        "92cbe6cac5108418",
        "4a82a08a99a7dc43",
        "cb70f800b671844d",
        "6803b3063cc970e8"
      ],
      "id": "bf05268d5325b51f",
      "date": 1491667818473
    },
    {
      "type": "edit",
      "id": "bf05268d5325b51f",
      "item": {
        "type": "paragraph",
        "id": "bf05268d5325b51f",
        "text": "Double-click to edit informative text describing stewardship and refresh intentions of data to be stored within. Recent update and update interval are reported automatically."
      },
      "date": 1491667866759
    },
    {
      "type": "add",
      "id": "d76cedbac968af86",
      "item": {
        "type": "paragraph",
        "id": "d76cedbac968af86",
        "text": "# API"
      },
      "after": "bf05268d5325b51f",
      "date": 1491667883018
    },
    {
      "type": "edit",
      "id": "d76cedbac968af86",
      "item": {
        "type": "markdown",
        "id": "d76cedbac968af86",
        "text": "# API"
      },
      "date": 1491667885752
    },
    {
      "type": "add",
      "id": "96bdf0de442cc7ba",
      "item": {
        "type": "paragraph",
        "id": "96bdf0de442cc7ba",
        "text": "The server-side of this plugin adds api routes to the origin server. Reads and writes go to the first JSON plugin found on a page."
      },
      "after": "92cbe6cac5108418",
      "date": 1491668215122
    },
    {
      "type": "move",
      "order": [
        "7fdbf43fc61e3058",
        "bc3511ba764e4135",
        "22660a2e7f8f8919",
        "bf05268d5325b51f",
        "d76cedbac968af86",
        "96bdf0de442cc7ba",
        "92cbe6cac5108418",
        "4a82a08a99a7dc43",
        "cb70f800b671844d",
        "6803b3063cc970e8"
      ],
      "id": "96bdf0de442cc7ba",
      "date": 1491668217810
    },
    {
      "type": "edit",
      "id": "96bdf0de442cc7ba",
      "item": {
        "type": "paragraph",
        "id": "96bdf0de442cc7ba",
        "text": "The server-side of this plugin adds api routes to the origin server. Reads and writes go to the first JSON plugin found on a page. Requests fail if none."
      },
      "date": 1491668245904
    },
    {
      "item": {
        "type": "factory",
        "id": "0c42e39b5eaffc1e"
      },
      "id": "0c42e39b5eaffc1e",
      "type": "add",
      "after": "6803b3063cc970e8",
      "date": 1491668272962
    },
    {
      "type": "edit",
      "id": "0c42e39b5eaffc1e",
      "item": {
        "type": "paragraph",
        "id": "0c42e39b5eaffc1e",
        "text": "Writes report back to the requestor information useful for confirming proper operation of a write."
      },
      "date": 1491668314295
    },
    {
      "type": "edit",
      "id": "0c42e39b5eaffc1e",
      "item": {
        "type": "paragraph",
        "id": "0c42e39b5eaffc1e",
        "text": "Write requests report back to the requestor information useful for confirming proper operation of a write."
      },
      "date": 1491668338752
    },
    {
      "item": {
        "type": "factory",
        "id": "4ce154d5489dd999"
      },
      "id": "4ce154d5489dd999",
      "type": "add",
      "after": "0c42e39b5eaffc1e",
      "date": 1491668466713
    },
    {
      "type": "edit",
      "id": "4ce154d5489dd999",
      "item": {
        "type": "code",
        "id": "4ce154d5489dd999",
        "text": "{\n\t\"status\": \"ok\",\n\t\"writes\": 3330,\n\t\"interval\": 299524,\n\t\"length\": 17736\n}"
      },
      "date": 1491668471684
    },
    {
      "type": "edit",
      "id": "4ce154d5489dd999",
      "item": {
        "type": "code",
        "id": "4ce154d5489dd999",
        "text": "{\n  \"status\": \"ok\",\n  \"writes\": 3330,\n  \"interval\": 299524,\n  \"length\": 17736\n}"
      },
      "date": 1491668495996
    },
    {
      "item": {
        "type": "factory",
        "id": "3cf8022706d21e44"
      },
      "id": "3cf8022706d21e44",
      "type": "add",
      "after": "4ce154d5489dd999",
      "date": 1491669614240
    },
    {
      "type": "edit",
      "id": "3cf8022706d21e44",
      "item": {
        "type": "paragraph",
        "id": "3cf8022706d21e44",
        "text": "See [[About JSON API Keys]]"
      },
      "date": 1491669637220
    },
    {
      "type": "fork",
      "site": "context.asia.wiki.org",
      "date": 1491865049155
    }
  ],
  "plugin": "json"
}