{
  "title": "Eventual consistency",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Eventual consistency"
      },
      "date": 1466948257579,
      "source": {
        "pageTitle": "Eventual consistency",
        "pageSlug": "Eventual_consistency",
        "url": "https://en.wikipedia.org/wiki/Eventual_consistency",
        "date": 1466948257579,
        "link_dictionary": {
          "wiki_links": {
            "See also": {
              "section_number": 3,
              "section_level": 2,
              "dot_number": 3
            },
            "Conflict resolution": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Strong eventual consistency": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "References": {
              "section_number": 4,
              "section_level": 2,
              "dot_number": 4
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 722471526,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466948264487
    },
    {
      "type": "edit",
      "id": "a0179fdc-acda-4354-b180-1444f8d7c470",
      "item": {
        "type": "paragraph",
        "id": "a0179fdc-acda-4354-b180-1444f8d7c470",
        "text": "Eventual consistency is a consistency model used in distributed computing to achieve high availability that informally guarantees that, if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value - [https://en.wikipedia.org/wiki/Eventual_consistency wikipedia]"
      },
      "date": 1466948290477
    },
    {
      "type": "add",
      "id": "2a91a0a7e8e65879",
      "item": {
        "type": "paragraph",
        "id": "2a91a0a7e8e65879",
        "text": "Eventual consistency is widely deployed in distributed systems, often under the moniker of optimistic replication, and has origins in early mobile computing projects. A system that has achieved eventual consistency is often said to have converged, or achieved replica convergence. Eventual consistency is a weak guarantee – most stronger models, like linearizability are trivially eventually consistent, but a system that is merely eventually consistent doesn't usually fulfill these stronger constraints."
      },
      "after": "a0179fdc-acda-4354-b180-1444f8d7c470",
      "date": 1466948292332
    },
    {
      "type": "remove",
      "id": "22145f0c-fd60-447a-86f9-314142e4d6eb",
      "date": 1466948301976
    },
    {
      "type": "edit",
      "id": "86f5a2d3-7a9d-4bfb-b960-f92ec5746406",
      "item": {
        "type": "paragraph",
        "id": "86f5a2d3-7a9d-4bfb-b960-f92ec5746406",
        "text": "Eventually consistent services are often classified as providing BASE (Basically Available, Soft state, Eventual consistency) semantics, in contrast to traditional ACID (Atomicity, Consistency, Isolation, Durability) guarantees. "
      },
      "date": 1466948317585
    },
    {
      "type": "add",
      "id": "81f3940d5f070c10",
      "item": {
        "type": "paragraph",
        "id": "81f3940d5f070c10",
        "text": "Eventual consistency is sometimes criticized as increasing the complexity of distributed software applications. This is partly because eventual consistency is purely a liveness guarantee (reads eventually return the same value) and does not make safety guarantees: an eventually consistent system can return any value before it converges."
      },
      "after": "86f5a2d3-7a9d-4bfb-b960-f92ec5746406",
      "date": 1466948318114
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "a0179fdc-acda-4354-b180-1444f8d7c470",
      "text": "Eventual consistency is a consistency model used in distributed computing to achieve high availability that informally guarantees that, if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value - [https://en.wikipedia.org/wiki/Eventual_consistency wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "2a91a0a7e8e65879",
      "text": "Eventual consistency is widely deployed in distributed systems, often under the moniker of optimistic replication, and has origins in early mobile computing projects. A system that has achieved eventual consistency is often said to have converged, or achieved replica convergence. Eventual consistency is a weak guarantee – most stronger models, like linearizability are trivially eventually consistent, but a system that is merely eventually consistent doesn't usually fulfill these stronger constraints."
    },
    {
      "type": "paragraph",
      "id": "86f5a2d3-7a9d-4bfb-b960-f92ec5746406",
      "text": "Eventually consistent services are often classified as providing BASE (Basically Available, Soft state, Eventual consistency) semantics, in contrast to traditional ACID (Atomicity, Consistency, Isolation, Durability) guarantees. "
    },
    {
      "type": "paragraph",
      "id": "81f3940d5f070c10",
      "text": "Eventual consistency is sometimes criticized as increasing the complexity of distributed software applications. This is partly because eventual consistency is purely a liveness guarantee (reads eventually return the same value) and does not make safety guarantees: an eventually consistent system can return any value before it converges."
    },
    {
      "type": "markdown",
      "id": "8dff323d-0938-42d6-bfe4-ca0cab823217",
      "text": "# See also\n* [[Conflict resolution]]\n* [[Strong eventual consistency]]\n* [[See also]]\n* [[References]]"
    }
  ]
}