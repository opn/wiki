{
  "journal": [
    {
      "date": 1424347353809,
      "item": {
        "story": "",
        "title": "Wiki Farm Security"
      },
      "type": "create"
    },
    {
      "date": 1424347355204,
      "id": "bf49186f155cf803",
      "item": {
        "id": "bf49186f155cf803",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1424347359456,
      "id": "bf49186f155cf803",
      "item": {
        "id": "bf49186f155cf803",
        "text": "I‚Äôm using nginx, just configure it to only accept the domains you‚Äôre expecting, using wildcards if necessary - and have a default to catch all the rest that uses return 444 so the connection is silently dropped.\n\nThis does of course, sadly, add an extra step to creating new wiki in the farm.\n\nThere is also a three part tutorial, New Ubuntu 14.04 Server Checklist https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04 which covers the basic server security.",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1424347407091,
      "id": "bf49186f155cf803",
      "item": {
        "id": "bf49186f155cf803",
        "text": "I‚Äôm using nginx, just configure it to only accept the domains you‚Äôre expecting, using wildcards if necessary - and have a default to catch all the rest that uses return 444 so the connection is silently dropped.\n\nThis does of course, sadly, add an extra step to creating new wiki in the farm.\n\nThere is also a three part tutorial, New Ubuntu 14.04 Server Checklist, which covers the basic server security - [https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04 Digital Ocean].",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1424347435541,
      "id": "bf49186f155cf803",
      "item": {
        "id": "bf49186f155cf803",
        "text": "I‚Äôm using nginx, just configure it to only accept the domains you‚Äôre expecting, using wildcards if necessary - and have a default to catch all the rest that uses return 444 so the connection is silently dropped. This does of course, sadly, add an extra step to creating new wiki in the farm.",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "after": "bf49186f155cf803",
      "date": 1424347438890,
      "id": "6aed1c08ecc10723",
      "item": {
        "id": "6aed1c08ecc10723",
        "text": "There is also a three part tutorial, New Ubuntu 14.04 Server Checklist, which covers the basic server security - [https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04 digitalocean.com].",
        "type": "paragraph"
      },
      "type": "add"
    },
    {
      "after": "6aed1c08ecc10723",
      "date": 1424347458665,
      "id": "5665e9a389dfed93",
      "item": {
        "id": "5665e9a389dfed93",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1424347461884,
      "id": "5665e9a389dfed93",
      "item": {
        "id": "5665e9a389dfed93",
        "text": "Yeah, my normal setup has more than one service on a box anyway, all wanting to share port 80. So I will run a reverse proxy on port 80 (usually something custom in node, but nginx or apache would work well when configured right). Traffic then comes in to the same IP on a multitude of different hosts on port 80, that traffic is then directed to different ports on the same box, all the names that I want to be wiki's get directed to the farm on the port. Then names that I don't expect don't get directed to the farm.",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1424347463930,
      "id": "5665e9a389dfed93",
      "order": [
        "5665e9a389dfed93",
        "bf49186f155cf803",
        "6aed1c08ecc10723"
      ],
      "type": "move"
    },
    {
      "after": "6aed1c08ecc10723",
      "date": 1424347480517,
      "id": "c57563a005fec9ea",
      "item": {
        "id": "c57563a005fec9ea",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1424347490143,
      "id": "c57563a005fec9ea",
      "item": {
        "id": "c57563a005fec9ea",
        "text": "Reverse Proxy",
        "type": "pagefold"
      },
      "type": "edit"
    },
    {
      "date": 1424347493497,
      "id": "c57563a005fec9ea",
      "order": [
        "c57563a005fec9ea",
        "5665e9a389dfed93",
        "bf49186f155cf803",
        "6aed1c08ecc10723"
      ],
      "type": "move"
    },
    {
      "after": "6aed1c08ecc10723",
      "date": 1424347498334,
      "id": "c87cf6ebb9ab9a75",
      "item": {
        "id": "c87cf6ebb9ab9a75",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1424347505244,
      "id": "c87cf6ebb9ab9a75",
      "item": {
        "id": "c87cf6ebb9ab9a75",
        "text": "Nginx",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1424347509713,
      "id": "c87cf6ebb9ab9a75",
      "type": "remove"
    },
    {
      "after": "6aed1c08ecc10723",
      "date": 1424347511247,
      "id": "a96d049dc5953c29",
      "item": {
        "id": "a96d049dc5953c29",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1424347524873,
      "id": "a96d049dc5953c29",
      "type": "remove"
    },
    {
      "after": "6aed1c08ecc10723",
      "date": 1424347528595,
      "id": "56a893b30da44f3b",
      "item": {
        "id": "56a893b30da44f3b",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1424347538871,
      "id": "56a893b30da44f3b",
      "type": "remove"
    },
    {
      "after": "6aed1c08ecc10723",
      "date": 1424347571251,
      "id": "53473b39e0d40f65",
      "item": {
        "id": "53473b39e0d40f65",
        "text": "Nginx",
        "type": "pagefold"
      },
      "type": "add"
    },
    {
      "date": 1424347578626,
      "id": "53473b39e0d40f65",
      "item": {
        "id": "53473b39e0d40f65",
        "text": "Nginx",
        "type": "pagefold"
      },
      "type": "edit"
    },
    {
      "date": 1424347581076,
      "id": "53473b39e0d40f65",
      "order": [
        "c57563a005fec9ea",
        "5665e9a389dfed93",
        "53473b39e0d40f65",
        "bf49186f155cf803",
        "6aed1c08ecc10723"
      ],
      "type": "move"
    },
    {
      "date": 1424347608637,
      "id": "5665e9a389dfed93",
      "item": {
        "id": "5665e9a389dfed93",
        "text": "[[Ward Cunningham]]:  My approach is to ignore them. If I want to count sites I run a find command to kill empty sites first.",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1424347610715,
      "error": {
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload.",
        "type": "error"
      },
      "id": "5665e9a389dfed93",
      "order": [
        "5665e9a389dfed93",
        "c57563a005fec9ea",
        "b4282ac718e5b290",
        "53473b39e0d40f65",
        "bf49186f155cf803",
        "6aed1c08ecc10723"
      ],
      "type": "move"
    },
    {
      "after": "5665e9a389dfed93",
      "date": 1424347611705,
      "id": "b4282ac718e5b290",
      "item": {
        "id": "b4282ac718e5b290",
        "text": "Yeah, my normal setup has more than one service on a box anyway, all wanting to share port 80. So I will run a reverse proxy on port 80 (usually something custom in node, but nginx or apache would work well when configured right). Traffic then comes in to the same IP on a multitude of different hosts on port 80, that traffic is then directed to different ports on the same box, all the names that I want to be wiki's get directed to the farm on the port. Then names that I don't expect don't get directed to the farm.",
        "type": "paragraph"
      },
      "type": "add"
    },
    {
      "date": 1424347631738,
      "id": "5665e9a389dfed93",
      "item": {
        "id": "5665e9a389dfed93",
        "text": "[[Ward Cunningham]]:  My approach is to ignore them. If I want to count sites I run a find command to kill empty sites first.",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1424347634498,
      "type": "fork"
    },
    {
      "date": 1424347680008,
      "id": "bf49186f155cf803",
      "item": {
        "id": "bf49186f155cf803",
        "text": "[[Paul Rodwell\n]]: I‚Äôm using nginx, just configure it to only accept the domains you‚Äôre expecting, using wildcards if necessary - and have a default to catch all the rest that uses return 444 so the connection is silently dropped. This does of course, sadly, add an extra step to creating new wiki in the farm.",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1424347715889,
      "id": "b4282ac718e5b290",
      "item": {
        "id": "b4282ac718e5b290",
        "text": "[[Nick Niemeir]]: Yeah, my normal setup has more than one service on a box anyway, all wanting to share port 80. So I will run a reverse proxy on port 80 (usually something custom in node, but nginx or apache would work well when configured right). Traffic then comes in to the same IP on a multitude of different hosts on port 80, that traffic is then directed to different ports on the same box, all the names that I want to be wiki's get directed to the farm on the port. Then names that I don't expect don't get directed to the farm.",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "after": "6aed1c08ecc10723",
      "date": 1424347994714,
      "id": "23fd24e9f7233cce",
      "item": {
        "id": "23fd24e9f7233cce",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1424347999532,
      "id": "23fd24e9f7233cce",
      "item": {
        "id": "23fd24e9f7233cce",
        "text": " ",
        "type": "pagefold"
      },
      "type": "edit"
    },
    {
      "after": "6aed1c08ecc10723",
      "date": 1424348008282,
      "id": "4a5b0394338de582",
      "item": {
        "id": "4a5b0394338de582",
        "text": "https://github.com/fedwiki/wiki-node-server/issues/97#issuecomment-74984127",
        "type": "paragraph"
      },
      "type": "add"
    },
    {
      "date": 1424348019834,
      "id": "4a5b0394338de582",
      "order": [
        "5665e9a389dfed93",
        "4a5b0394338de582",
        "b4282ac718e5b290",
        "c57563a005fec9ea",
        "53473b39e0d40f65",
        "bf49186f155cf803",
        "6aed1c08ecc10723",
        "23fd24e9f7233cce"
      ],
      "type": "move"
    },
    {
      "date": 1424348025381,
      "id": "b4282ac718e5b290",
      "order": [
        "5665e9a389dfed93",
        "4a5b0394338de582",
        "c57563a005fec9ea",
        "b4282ac718e5b290",
        "53473b39e0d40f65",
        "bf49186f155cf803",
        "6aed1c08ecc10723",
        "23fd24e9f7233cce"
      ],
      "type": "move"
    },
    {
      "date": 1424348029178,
      "id": "4a5b0394338de582",
      "order": [
        "4a5b0394338de582",
        "5665e9a389dfed93",
        "c57563a005fec9ea",
        "b4282ac718e5b290",
        "53473b39e0d40f65",
        "bf49186f155cf803",
        "6aed1c08ecc10723",
        "23fd24e9f7233cce"
      ],
      "type": "move"
    },
    {
      "after": "23fd24e9f7233cce",
      "date": 1424348036189,
      "id": "089e3babb842e3cc",
      "item": {
        "id": "089e3babb842e3cc",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1424348043871,
      "id": "089e3babb842e3cc",
      "item": {
        "id": "089e3babb842e3cc",
        "text": "Unsecurity",
        "type": "pagefold"
      },
      "type": "edit"
    },
    {
      "date": 1424348048704,
      "id": "089e3babb842e3cc",
      "order": [
        "4a5b0394338de582",
        "089e3babb842e3cc",
        "5665e9a389dfed93",
        "c57563a005fec9ea",
        "b4282ac718e5b290",
        "53473b39e0d40f65",
        "bf49186f155cf803",
        "6aed1c08ecc10723",
        "23fd24e9f7233cce"
      ],
      "type": "move"
    },
    {
      "date": 1424348103528,
      "id": "4a5b0394338de582",
      "item": {
        "id": "4a5b0394338de582",
        "text": "A loose discussion of [[Wiki Farm]] security. A more technical discussion may weel eveolve over at [https://github.com/fedwiki/wiki-node-server/issues/97#issuecomment-74984127 GitHub].",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "site": "david.viral.academy",
      "type": "fork"
    },
    {
      "date": 1426724443300,
      "id": "4a5b0394338de582",
      "item": {
        "id": "4a5b0394338de582",
        "text": "A loose discussion of [[Wiki Farm]] security. A more technical discussion may well evolve over at [https://github.com/fedwiki/wiki-node-server/issues/97#issuecomment-74984127 GitHub].",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "type": "fork",
      "site": "federated.academy",
      "date": 1448811391743
    },
    {
      "type": "fork",
      "site": "fedwiki.org",
      "date": 1510387782071
    }
  ],
  "story": [
    {
      "id": "4a5b0394338de582",
      "text": "A loose discussion of [[Wiki Farm]] security. A more technical discussion may well evolve over at [https://github.com/fedwiki/wiki-node-server/issues/97#issuecomment-74984127 GitHub].",
      "type": "paragraph"
    },
    {
      "id": "089e3babb842e3cc",
      "text": "Unsecurity",
      "type": "pagefold"
    },
    {
      "id": "5665e9a389dfed93",
      "text": "[[Ward Cunningham]]:  My approach is to ignore them. If I want to count sites I run a find command to kill empty sites first.",
      "type": "paragraph"
    },
    {
      "id": "c57563a005fec9ea",
      "text": "Reverse Proxy",
      "type": "pagefold"
    },
    {
      "id": "b4282ac718e5b290",
      "text": "[[Nick Niemeir]]: Yeah, my normal setup has more than one service on a box anyway, all wanting to share port 80. So I will run a reverse proxy on port 80 (usually something custom in node, but nginx or apache would work well when configured right). Traffic then comes in to the same IP on a multitude of different hosts on port 80, that traffic is then directed to different ports on the same box, all the names that I want to be wiki's get directed to the farm on the port. Then names that I don't expect don't get directed to the farm.",
      "type": "paragraph"
    },
    {
      "id": "53473b39e0d40f65",
      "text": "Nginx",
      "type": "pagefold"
    },
    {
      "id": "bf49186f155cf803",
      "text": "[[Paul Rodwell\n]]: I‚Äôm using nginx, just configure it to only accept the domains you‚Äôre expecting, using wildcards if necessary - and have a default to catch all the rest that uses return 444 so the connection is silently dropped. This does of course, sadly, add an extra step to creating new wiki in the farm.",
      "type": "paragraph"
    },
    {
      "id": "6aed1c08ecc10723",
      "text": "There is also a three part tutorial, New Ubuntu 14.04 Server Checklist, which covers the basic server security - [https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-14-04 digitalocean.com].",
      "type": "paragraph"
    },
    {
      "id": "23fd24e9f7233cce",
      "text": " ",
      "type": "pagefold"
    }
  ],
  "title": "Wiki Farm Security"
}