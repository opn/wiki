{
  "title": "Exploring Time",
  "story": [
    {
      "type": "paragraph",
      "id": "c55acbf3484395db",
      "text": "Most popular software libraries for managing time are based on similar models, and JodaTime, a common Java library being incorporated into Java 9, is a good example. It has a fairly good model, and illustrates the tendency for the first good idea to be the last idea. "
    },
    {
      "type": "video",
      "id": "42f0dbef1db52f4b",
      "text": "YOUTUBE Zm95cYAtAa8\nPublished on Oct 19, 2017."
    },
    {
      "type": "paragraph",
      "id": "8cf04f0ee016a9bc",
      "text": "Exploration stops as soon as a workable solution is found. While this is actually not such a bad idea in supporting domains, it short-circuits work on the critical core domain.But how do we escape from these good models that stop our thinking? Eric will walk through some rich semantics of an alternate model of time and an associated library to illustrate that there is always another model."
    },
    {
      "type": "pagefold",
      "id": "4e3dff42fbf5e70c",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "70c5c6cae3a8c906",
      "text": "I'm reminded of Adele Goldberg mentioning once that the Smalltalk-80 inventors took their time getting to (month, day, year) as the implementation of date."
    },
    {
      "type": "paragraph",
      "id": "0732689d19e0591e",
      "text": "This triple works well for the case where you are iterating through a sequence of months as we did computing net-present-value of bonds."
    },
    {
      "type": "paragraph",
      "id": "257e8db12a7a29bb",
      "text": "Unfortunately we used Digitalk's implementation that wrapped Julian date as an integer. When we profiled WyCash we found we were spending 50% of our cycles figuring out the year of a date. Yikes. We rewrote Date the Smalltalk-80 way and made our program twice as fast."
    },
    {
      "type": "paragraph",
      "id": "aa99f21cbe845d87",
      "text": "Ironically Eric ran out of time before he explained fully why time intervals made instances unnecessary. Our own Calendar plugin tries to offer intervals without offering a computational model."
    },
    {
      "type": "paragraph",
      "id": "d43cc26328a82a71",
      "text": "See Allen's Interval Algebra at [https://www.youtube.com/watch?v=Zm95cYAtAa8&t=42m 42m]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Exploring Time",
        "story": []
      },
      "date": 1514938877383
    },
    {
      "item": {
        "type": "factory",
        "id": "c55acbf3484395db"
      },
      "id": "c55acbf3484395db",
      "type": "add",
      "date": 1514938918226
    },
    {
      "type": "edit",
      "id": "c55acbf3484395db",
      "item": {
        "type": "paragraph",
        "id": "c55acbf3484395db",
        "text": "Most popular software libraries for managing time are based on similar models, and JodaTime, a common Java library being incorporated into Java 9, is a good example. It has a fairly good model, and illustrates the tendency for the first good idea to be the last idea. Exploration stops as soon as a workable solution is found. While this is actually not such a bad idea in supporting domains, it short-circuits work on the critical core domain.But how do we escape from these good models that stop our thinking? Eric will walk through some rich semantics of an alternate model of time and an associated library to illustrate that there is always another model."
      },
      "date": 1514938924171
    },
    {
      "type": "edit",
      "id": "c55acbf3484395db",
      "item": {
        "type": "paragraph",
        "id": "c55acbf3484395db",
        "text": "Most popular software libraries for managing time are based on similar models, and JodaTime, a common Java library being incorporated into Java 9, is a good example. It has a fairly good model, and illustrates the tendency for the first good idea to be the last idea. "
      },
      "date": 1514938948132
    },
    {
      "type": "add",
      "id": "8cf04f0ee016a9bc",
      "item": {
        "type": "paragraph",
        "id": "8cf04f0ee016a9bc",
        "text": "Exploration stops as soon as a workable solution is found. While this is actually not such a bad idea in supporting domains, it short-circuits work on the critical core domain.But how do we escape from these good models that stop our thinking? Eric will walk through some rich semantics of an alternate model of time and an associated library to illustrate that there is always another model."
      },
      "after": "c55acbf3484395db",
      "date": 1514938949286
    },
    {
      "item": {
        "type": "factory",
        "id": "42f0dbef1db52f4b"
      },
      "id": "42f0dbef1db52f4b",
      "type": "add",
      "after": "8cf04f0ee016a9bc",
      "date": 1514938951145
    },
    {
      "type": "move",
      "order": [
        "c55acbf3484395db",
        "42f0dbef1db52f4b",
        "8cf04f0ee016a9bc"
      ],
      "id": "42f0dbef1db52f4b",
      "date": 1514938953306
    },
    {
      "type": "edit",
      "id": "42f0dbef1db52f4b",
      "item": {
        "type": "video",
        "id": "42f0dbef1db52f4b",
        "text": "YOUTUBE Zm95cYAtAa8\n(double-click to edit caption)\n"
      },
      "date": 1514938975095
    },
    {
      "type": "edit",
      "id": "42f0dbef1db52f4b",
      "item": {
        "type": "video",
        "id": "42f0dbef1db52f4b",
        "text": "YOUTUBE Zm95cYAtAa8\nPublished on Oct 19, 2017."
      },
      "date": 1514939004023
    },
    {
      "item": {
        "type": "factory",
        "id": "4e3dff42fbf5e70c"
      },
      "id": "4e3dff42fbf5e70c",
      "type": "add",
      "after": "8cf04f0ee016a9bc",
      "date": 1514939226673
    },
    {
      "type": "edit",
      "id": "4e3dff42fbf5e70c",
      "item": {
        "type": "pagefold",
        "id": "4e3dff42fbf5e70c",
        "text": "."
      },
      "date": 1514939235189
    },
    {
      "item": {
        "type": "factory",
        "id": "70c5c6cae3a8c906"
      },
      "id": "70c5c6cae3a8c906",
      "type": "add",
      "after": "4e3dff42fbf5e70c",
      "date": 1514939237039
    },
    {
      "type": "edit",
      "id": "70c5c6cae3a8c906",
      "item": {
        "type": "paragraph",
        "id": "70c5c6cae3a8c906",
        "text": "I'm reminded of Adele Goldberg mentioning once that they took their time getting to (month, day, year) as the implementation of date. This works well for the case were you are iterating through a sequence of months as we did computing net-present-value of bonds. Unfortunately we used Digitalk's implementation that wrapped Julian date as an integer. When we profiled WyCash we found we were spending 50% of our cycles figuring out the year of a date. Yikes. We rewrote Date the Smalltalk-80 way and made our program twice as fast."
      },
      "date": 1514939523686
    },
    {
      "type": "edit",
      "id": "70c5c6cae3a8c906",
      "item": {
        "type": "paragraph",
        "id": "70c5c6cae3a8c906",
        "text": "I'm reminded of Adele Goldberg mentioning once that they took their time getting to (month, day, year) as the implementation of date."
      },
      "date": 1514939631270
    },
    {
      "type": "add",
      "id": "0e2b01ebfedbb30c",
      "item": {
        "type": "paragraph",
        "id": "0e2b01ebfedbb30c",
        "text": "This works well for the case were you are iterating through a sequence of months as we did computing net-present-value of bonds. Unfortunately we used Digitalk's implementation that wrapped Julian date as an integer. When we profiled WyCash we found we were spending 50% of our cycles figuring out the year of a date. Yikes. We rewrote Date the Smalltalk-80 way and made our program twice as fast."
      },
      "after": "70c5c6cae3a8c906",
      "date": 1514939632863
    },
    {
      "type": "remove",
      "id": "0e2b01ebfedbb30c",
      "date": 1514939652833
    },
    {
      "type": "edit",
      "id": "70c5c6cae3a8c906",
      "item": {
        "type": "paragraph",
        "id": "70c5c6cae3a8c906",
        "text": "I'm reminded of Adele Goldberg mentioning once that they took their time getting to (month, day, year) as the implementation of date.This works well for the case were you are iterating through a sequence of months as we did computing net-present-value of bonds. Unfortunately we used Digitalk's implementation that wrapped Julian date as an integer. When we profiled WyCash we found we were spending 50% of our cycles figuring out the year of a date. Yikes. We rewrote Date the Smalltalk-80 way and made our program twice as fast."
      },
      "date": 1514939653903
    },
    {
      "type": "edit",
      "id": "70c5c6cae3a8c906",
      "item": {
        "type": "paragraph",
        "id": "70c5c6cae3a8c906",
        "text": "I'm reminded of Adele Goldberg mentioning once that they took their time getting to (month, day, year) as the implementation of date. This works well for the case were you are iterating through a sequence of months as we did computing net-present-value of bonds. Unfortunately we used Digitalk's implementation that wrapped Julian date as an integer. When we profiled WyCash we found we were spending 50% of our cycles figuring out the year of a date. Yikes. We rewrote Date the Smalltalk-80 way and made our program twice as fast."
      },
      "date": 1514939664845
    },
    {
      "type": "edit",
      "id": "70c5c6cae3a8c906",
      "item": {
        "type": "paragraph",
        "id": "70c5c6cae3a8c906",
        "text": "I'm reminded of Adele Goldberg mentioning once that the Smalltalk inventors took their time getting to (month, day, year) as the implementation of date. This works well for the case were you are iterating through a sequence of months as we did computing net-present-value of bonds. Unfortunately we used Digitalk's implementation that wrapped Julian date as an integer. When we profiled WyCash we found we were spending 50% of our cycles figuring out the year of a date. Yikes. We rewrote Date the Smalltalk-80 way and made our program twice as fast."
      },
      "date": 1514939717935
    },
    {
      "type": "edit",
      "id": "70c5c6cae3a8c906",
      "item": {
        "type": "paragraph",
        "id": "70c5c6cae3a8c906",
        "text": "I'm reminded of Adele Goldberg mentioning once that the Smalltalk inventors took their time getting to (month, day, year) as the implementation of date."
      },
      "date": 1514939728933
    },
    {
      "type": "add",
      "id": "0732689d19e0591e",
      "item": {
        "type": "paragraph",
        "id": "0732689d19e0591e",
        "text": "This triple works well for the case where you are iterating through a sequence of months as we did computing net-present-value of bonds."
      },
      "after": "70c5c6cae3a8c906",
      "date": 1514939766840
    },
    {
      "type": "add",
      "id": "257e8db12a7a29bb",
      "item": {
        "type": "paragraph",
        "id": "257e8db12a7a29bb",
        "text": "Unfortunately we used Digitalk's implementation that wrapped Julian date as an integer. When we profiled WyCash we found we were spending 50% of our cycles figuring out the year of a date. Yikes. We rewrote Date the Smalltalk-80 way and made our program twice as fast."
      },
      "after": "0732689d19e0591e",
      "date": 1514939769463
    },
    {
      "type": "edit",
      "id": "70c5c6cae3a8c906",
      "item": {
        "type": "paragraph",
        "id": "70c5c6cae3a8c906",
        "text": "I'm reminded of Adele Goldberg mentioning once that the Smalltalk-80 inventors took their time getting to (month, day, year) as the implementation of date."
      },
      "date": 1514939786596
    },
    {
      "type": "add",
      "id": "aa99f21cbe845d87",
      "item": {
        "type": "paragraph",
        "id": "aa99f21cbe845d87",
        "text": "Ironically Eric ran out of time before he explained fully why time intervals made instances unnecessary. Our own Calendar plugin tries to offer intervals without offering a computational model."
      },
      "after": "257e8db12a7a29bb",
      "date": 1514939997040
    },
    {
      "type": "add",
      "id": "d43cc26328a82a71",
      "item": {
        "type": "paragraph",
        "id": "d43cc26328a82a71",
        "text": "See "
      },
      "after": "aa99f21cbe845d87",
      "date": 1514940002153
    },
    {
      "type": "edit",
      "id": "d43cc26328a82a71",
      "item": {
        "type": "paragraph",
        "id": "d43cc26328a82a71",
        "text": "See Allen's Interval Algebra at minute 42."
      },
      "date": 1514940048056
    },
    {
      "type": "fork",
      "site": "found.ward.bay.wiki.org",
      "date": 1514954027570
    },
    {
      "type": "edit",
      "id": "d43cc26328a82a71",
      "item": {
        "type": "paragraph",
        "id": "d43cc26328a82a71",
        "text": "See Allen's Interval Algebra at minute 42. [https://youtube.com/mumble 42m]"
      },
      "date": 1514956339567
    },
    {
      "type": "edit",
      "id": "d43cc26328a82a71",
      "item": {
        "type": "paragraph",
        "id": "d43cc26328a82a71",
        "text": "See Allen's Interval Algebra at [https://www.youtube.com/watch?v=Zm95cYAtAa8&t=42m 42m]"
      },
      "date": 1514956390676
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1518344742918
    }
  ]
}