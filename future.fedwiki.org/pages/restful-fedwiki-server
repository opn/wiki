{
  "title": "RESTful Fedwiki Server",
  "story": [
    {
      "type": "paragraph",
      "id": "2a4d29225c1b0d40",
      "text": "Here we make a start to document the creation of a minimal [[Fedwiki Server]] that provides a minimal but fully specified [[REST API]] for both existing clients and future mobile clients."
    },
    {
      "type": "paragraph",
      "id": "3db5f1ce05f89560",
      "text": "Here we define what the minimum server requirements are for a server to serve Fedwiki contnet to a client. That means assuming a browser or other native client has all it needs to deal with the content, what is required by the server to serve content for read / display purposes only?"
    },
    {
      "type": "paragraph",
      "id": "db43fa6b0134daf6",
      "text": "The aim is to do this in a nice flexible way moving forwards, so that different server implementations are able to keep in sync. My thought on this is to define, implement and document a simple REST API using DreamFactory to implement and then document the API with - [http://swagger.io/ swagger.io]. "
    },
    {
      "type": "paragraph",
      "id": "eca4637ce15456d1",
      "text": "This generates a standard markup with either:"
    },
    {
      "type": "code",
      "id": "03df21745bfae12e",
      "text": "HTTP/1.1 200 OK\nX-Powered-By: Express\nAccess-Control-Allow-Origin: *\nAccept-Ranges: bytes\nDate: Sun, 28 Jun 2015 11:58:27 GMT\nCache-Control: public, max-age=0\nLast-Modified: Sun, 28 Jun 2015 11:51:39 GMT\nETag: W/\"1ed4-1959657124\"\nContent-Type: application/json\nContent-Length: 7892\nConnection: keep-alive"
    },
    {
      "type": "paragraph",
      "id": "8fb63b5782626031",
      "text": "So my starting point is to define the REST API endpoint that everything a client needs to render pages. Later we can add POST, and PUT end points etc."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "RESTful Fedwiki Server",
        "story": []
      },
      "date": 1435494184641
    },
    {
      "item": {
        "type": "paragraph",
        "id": "2a4d29225c1b0d40",
        "text": "Here we make a start to document the creation of a minimal [[Fedwiki Server]] that provides a minimal but fully specified [[REST API]] for both existing clients and future mobile clients."
      },
      "id": "2a4d29225c1b0d40",
      "type": "add",
      "date": 1435494185793
    },
    {
      "type": "edit",
      "id": "2a4d29225c1b0d40",
      "item": {
        "type": "paragraph",
        "id": "2a4d29225c1b0d40",
        "text": "Here we make a start to document the creation of a minimal [[Fedwiki Server]] that provides a minimal but fully specified [[REST API]] for both existing clients and future mobile clients."
      },
      "date": 1435494197300
    },
    {
      "item": {
        "type": "code",
        "id": "03df21745bfae12e",
        "text": "HTTP/1.1 200 OK\nX-Powered-By: Express\nAccess-Control-Allow-Origin: *\nAccept-Ranges: bytes\nDate: Sun, 28 Jun 2015 11:58:27 GMT\nCache-Control: public, max-age=0\nLast-Modified: Sun, 28 Jun 2015 11:51:39 GMT\nETag: W/\"1ed4-1959657124\"\nContent-Type: application/json\nContent-Length: 7892\nConnection: keep-alive"
      },
      "id": "03df21745bfae12e",
      "type": "add",
      "after": "8fb63b5782626031",
      "date": 1435494201707
    },
    {
      "type": "add",
      "id": "8fb63b5782626031",
      "item": {
        "type": "paragraph",
        "id": "8fb63b5782626031",
        "text": "So my starting point is to define the REST API endpoint that everything a client needs to render pages. Later we can add POST, and PUT end points etc."
      },
      "after": "2a4d29225c1b0d40",
      "date": 1435494203062
    },
    {
      "type": "edit",
      "id": "03df21745bfae12e",
      "item": {
        "type": "code",
        "id": "03df21745bfae12e",
        "text": "HTTP/1.1 200 OK\nX-Powered-By: Express\nAccess-Control-Allow-Origin: *\nAccept-Ranges: bytes\nDate: Sun, 28 Jun 2015 11:58:27 GMT\nCache-Control: public, max-age=0\nLast-Modified: Sun, 28 Jun 2015 11:51:39 GMT\nETag: W/\"1ed4-1959657124\"\nContent-Type: application/json\nContent-Length: 7892\nConnection: keep-alive"
      },
      "date": 1435494211481
    },
    {
      "type": "move",
      "order": [
        "2a4d29225c1b0d40",
        "03df21745bfae12e",
        "8fb63b5782626031"
      ],
      "id": "03df21745bfae12e",
      "date": 1435494230478
    },
    {
      "type": "edit",
      "id": "2a4d29225c1b0d40",
      "item": {
        "type": "paragraph",
        "id": "2a4d29225c1b0d40",
        "text": "Here we make a start to document the creation of a minimal [[Fedwiki Server]] that provides a minimal but fully specified [[REST API]] for both existing clients and future mobile clients."
      },
      "date": 1435494288459
    },
    {
      "type": "add",
      "id": "3db5f1ce05f89560",
      "item": {
        "type": "paragraph",
        "id": "3db5f1ce05f89560",
        "text": "Here we define what the minimum server requirements are for a server to serve Fedwiki contnet to a client. That means assuming a browser or other native client has all it needs to deal with the content, what is required by the server to serve content for read / display purposes only?"
      },
      "after": "2a4d29225c1b0d40",
      "date": 1435494290221
    },
    {
      "type": "edit",
      "id": "2a4d29225c1b0d40",
      "item": {
        "type": "paragraph",
        "id": "2a4d29225c1b0d40",
        "text": "Here we make a start to document the creation of a minimal [[Fedwiki Server]] that provides a minimal but fully specified [[REST API]] for both existing clients and future mobile clients."
      },
      "date": 1435494341638
    },
    {
      "type": "edit",
      "id": "3db5f1ce05f89560",
      "item": {
        "type": "paragraph",
        "id": "3db5f1ce05f89560",
        "text": "Here we define what the minimum server requirements are for a server to serve Fedwiki contnet to a client. That means assuming a browser or other native client has all it needs to deal with the content, what is required by the server to serve content for read / display purposes only?"
      },
      "date": 1435494385441
    },
    {
      "type": "add",
      "id": "db43fa6b0134daf6",
      "item": {
        "type": "paragraph",
        "id": "db43fa6b0134daf6",
        "text": "The aim is to do this in a nice flexible way moving forwards, so that different server implementations are able to keep in sync. My thought on this is to define, implement and document a simple REST API using DreamFactory to implement and then document the API with - [http://swagger.io/ swagger.io]. "
      },
      "after": "3db5f1ce05f89560",
      "date": 1435494443096
    },
    {
      "type": "add",
      "id": "eca4637ce15456d1",
      "item": {
        "type": "paragraph",
        "id": "eca4637ce15456d1",
        "text": "This generates a standard markup with either:"
      },
      "after": "db43fa6b0134daf6",
      "date": 1435494447319
    },
    {
      "type": "edit",
      "id": "db43fa6b0134daf6",
      "item": {
        "type": "paragraph",
        "id": "db43fa6b0134daf6",
        "text": "The aim is to do this in a nice flexible way moving forwards, so that different server implementations are able to keep in sync. My thought on this is to define, implement and document a simple REST API using DreamFactory to implement and then document the API with - [http://swagger.io/ swagger.io]. "
      },
      "date": 1435494451610
    },
    {
      "type": "edit",
      "id": "eca4637ce15456d1",
      "item": {
        "type": "paragraph",
        "id": "eca4637ce15456d1",
        "text": "This generates a standard markup with either:"
      },
      "date": 1435495308479,
      "error": {
        "type": "error",
        "msg": "",
        "response": ""
      }
    },
    {
      "type": "fork",
      "date": 1435498515009
    }
  ]
}