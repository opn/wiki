{
  "title": "Caddy (web server)",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Caddy (web server)"
      },
      "date": 1466619144786,
      "source": {
        "pageTitle": "Caddy (web server)",
        "pageSlug": "Caddy_(web_server)",
        "url": "https://en.wikipedia.org/wiki/Caddy_(web_server)",
        "date": 1466619144786,
        "link_dictionary": {
          "wiki_links": {
            "Capabilities": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Security": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "References": {
              "section_number": 4,
              "section_level": 2,
              "dot_number": 3
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 718564873,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466619150395
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "332f7461-b75b-475b-bcda-45d52231d8eb",
        "text": "A variety of web site technologies can be served by Caddy, which can also act as a reverse proxy and load balancer. Most of Caddy's features are implemented as [[middleware]] and exposed through directives in the Caddyfile (a text file used to configure Caddy). - [https://en.wikipedia.org/wiki/Caddy_(web_server)#Capabilities wikipedia]"
      },
      "after": "1cf424ca-360b-43fa-b105-8dca36a91902",
      "id": "332f7461-b75b-475b-bcda-45d52231d8eb",
      "date": 1466619158324
    },
    {
      "type": "edit",
      "id": "6ce732df-1fe8-4be3-bdbc-670723439afd",
      "item": {
        "type": "markdown",
        "id": "6ce732df-1fe8-4be3-bdbc-670723439afd",
        "text": "# See also\n* [[Security]]\n* [[References]]"
      },
      "date": 1466619164964
    },
    {
      "type": "add",
      "id": "43fd57f1159d2778",
      "item": {
        "type": "paragraph",
        "id": "43fd57f1159d2778",
        "text": "# Capabilities\n"
      },
      "after": "1cf424ca-360b-43fa-b105-8dca36a91902",
      "date": 1466619177323
    },
    {
      "type": "edit",
      "id": "43fd57f1159d2778",
      "item": {
        "type": "markdown",
        "id": "43fd57f1159d2778",
        "text": "# Capabilities\n"
      },
      "date": 1466619178404
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
        "text": "* Virtual hosting (multiple sites on the same port)[ ]\n* Native [[IPv4]] and [[IPv6]] support\n* Serve static files (uses [[sendfile]] where possible)\n* Graceful restart/reload\n* Reverse proxy (HTTP or [[WebSockets]])\n* Load balancing with health checks\n* [[FastCGI]] proxy\n* Templates (similar to [[Server Side Includes]])\n* [[Markdown]] rendering\n* [[Common Gateway Interface|CGI]] via WebSockets\n* [[Gzip]] compression\n* [[Basic access authentication]]\n* URL rewriting\n* Redirects\n* File browsing\n* Access, error, and process logs"
      },
      "after": "332f7461-b75b-475b-bcda-45d52231d8eb",
      "id": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
      "date": 1466619191407
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "088ceb50-cccc-4cfc-ba52-abbf96d478c0",
        "text": "* HTTP/1.1 (plaintext HTTP) and HTTP/2 (default for HTTPS connections)\n* HTTPS, either automatically enabled and managed, or manually configured"
      },
      "after": "332f7461-b75b-475b-bcda-45d52231d8eb",
      "id": "088ceb50-cccc-4cfc-ba52-abbf96d478c0",
      "date": 1466619197346
    },
    {
      "type": "remove",
      "id": "088ceb50-cccc-4cfc-ba52-abbf96d478c0",
      "date": 1466619218675
    },
    {
      "type": "edit",
      "id": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
      "item": {
        "type": "markdown",
        "id": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
        "text": "* HTTP/1.1 and HTTP/2\n* HTTPS, either automatically enabled and managed, or manually configured\n* Virtual hosting (multiple sites on the same port)[ ]\n* Native [[IPv4]] and [[IPv6]] support\n* Serve static files (uses [[sendfile]] where possible)\n* Graceful restart/reload\n* Reverse proxy (HTTP or [[WebSockets]])\n* Load balancing with health checks\n* [[FastCGI]] proxy\n* Templates (similar to [[Server Side Includes]])\n* [[Markdown]] rendering\n* [[Common Gateway Interface|CGI]] via WebSockets\n* [[Gzip]] compression\n* [[Basic access authentication]]\n* URL rewriting\n* Redirects\n* File browsing\n* Access, error, and process logs"
      },
      "date": 1466619224766
    },
    {
      "type": "edit",
      "id": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
      "item": {
        "type": "markdown",
        "id": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
        "text": "* HTTP/1.1 and HTTP/2\n* HTTPS (automatically enabled or manually)\n* Virtual hosting (multiple sites on the same port)[ ]\n* Native [[IPv4]] and [[IPv6]] support\n* Serve static files (uses [[sendfile]] where possible)\n* Graceful restart/reload\n* Reverse proxy (HTTP or [[WebSockets]])\n* Load balancing with health checks\n* [[FastCGI]] proxy\n* Templates (similar to [[Server Side Includes]])\n* [[Markdown]] rendering\n* [[Common Gateway Interface|CGI]] via WebSockets\n* [[Gzip]] compression\n* [[Basic access authentication]]\n* URL rewriting\n* Redirects\n* File browsing\n* Access, error, and process logs"
      },
      "date": 1466619250566
    },
    {
      "type": "edit",
      "id": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
      "item": {
        "type": "markdown",
        "id": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
        "text": "* HTTP/1.1 and HTTP/2\n* HTTPS (automatically enabled or manually)\n* SNI ([[Server Name Indication]])\n* [[OCSP Stapling]]\n* Virtual hosting (multiple sites on the same port)[ ]\n* Native [[IPv4]] and [[IPv6]] support\n* Serve static files (uses [[sendfile]] where possible)\n* Graceful restart/reload\n* Reverse proxy (HTTP or [[WebSockets]])\n* Load balancing with health checks\n* [[FastCGI]] proxy\n* Templates (similar to [[Server Side Includes]])\n* [[Markdown]] rendering\n* [[Common Gateway Interface|CGI]] via WebSockets\n* [[Gzip]] compression\n* [[Basic access authentication]]\n* URL rewriting\n* Redirects\n* File browsing\n* Access, error, and process logs"
      },
      "date": 1466619289259
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6841a03b-f3a6-4377-a3ba-7004e7361784",
        "text": "Caddy is not vulnerable to a number of widespread CVEs including [[Heartbleed]], DROWN ([[Drown attack]]), [[POODLE]], and BEAST ([[BEAST attack]]). In addition, Caddy uses TLS_FALLBACK_SCSV to prevent protocol downgrade attacks - [https://en.wikipedia.org/wiki/Caddy_(web_server)#Security wikipedia]"
      },
      "after": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
      "id": "6841a03b-f3a6-4377-a3ba-7004e7361784",
      "date": 1466619309678
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a49c88d3-3ba9-4331-8d1f-b09ecb61a611",
        "text": "Caddy activates HTTPS by default for sites with qualifying domain names (names for which a TLS certificate can be negotiated via the ACME protocol ([[Automated Certificate Management Environment]])), and redirects HTTP requests to HTTPS. It obtains certificates as needed during startup and keeps them renewed during the lifetime of the server. [[Let's Encrypt]] is the default certificate authority, but the user may customize the ACME CA that is used, which is often necessary when testing configurations. As of Q1 2016, Caddy accounted for about 2% of certificates issued by Let's Encrypt. - [https://en.wikipedia.org/wiki/Caddy_(web_server)#Automatic_HTTPS wikipedia]"
      },
      "after": "6841a03b-f3a6-4377-a3ba-7004e7361784",
      "id": "a49c88d3-3ba9-4331-8d1f-b09ecb61a611",
      "date": 1466619376976
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "def7baa1-b45c-43b9-ba7a-977bdc2ec4af",
        "text": "An alternate configuration allows Caddy to obtain certificates only as needed during TLS handshakes rather than at startup, a feature dubbed \"On-Demand TLS.\" To enable this feature, the user must specify a maximum number of certificates that can be issued this way. When Caddy receives a request for a hostname for which it does not yet have a certificate, it will negotiate a new certificate via ACME and serve it immediately, while caching the obtained certificate in memory and storing it on disk. This process usually takes a few seconds, and is subject to tight rate limits.<ref name=\"AutoHTTPS-OnDemand\" />"
      },
      "after": "6841a03b-f3a6-4377-a3ba-7004e7361784",
      "id": "def7baa1-b45c-43b9-ba7a-977bdc2ec4af",
      "date": 1466619380966
    },
    {
      "type": "move",
      "order": [
        "c90b7b62-f310-4cc1-8f84-5679909a9d76",
        "14571482-1ec6-45fc-832d-54a745c42486",
        "13e9c91f-ea99-4bee-be4b-811b2c31a029",
        "1cf424ca-360b-43fa-b105-8dca36a91902",
        "43fd57f1159d2778",
        "332f7461-b75b-475b-bcda-45d52231d8eb",
        "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
        "6841a03b-f3a6-4377-a3ba-7004e7361784",
        "a49c88d3-3ba9-4331-8d1f-b09ecb61a611",
        "def7baa1-b45c-43b9-ba7a-977bdc2ec4af",
        "6ce732df-1fe8-4be3-bdbc-670723439afd"
      ],
      "id": "def7baa1-b45c-43b9-ba7a-977bdc2ec4af",
      "date": 1466619385837
    },
    {
      "type": "add",
      "id": "7b35ee00a9b5231d",
      "item": {
        "type": "paragraph",
        "id": "7b35ee00a9b5231d",
        "text": "# Automatic HTTPS"
      },
      "after": "6841a03b-f3a6-4377-a3ba-7004e7361784",
      "date": 1466619404114
    },
    {
      "type": "edit",
      "id": "7b35ee00a9b5231d",
      "item": {
        "type": "markdown",
        "id": "7b35ee00a9b5231d",
        "text": "# Automatic HTTPS"
      },
      "date": 1466619409524
    },
    {
      "type": "edit",
      "id": "6841a03b-f3a6-4377-a3ba-7004e7361784",
      "item": {
        "type": "paragraph",
        "id": "6841a03b-f3a6-4377-a3ba-7004e7361784",
        "text": "# Security"
      },
      "date": 1466619418145
    },
    {
      "type": "edit",
      "id": "6841a03b-f3a6-4377-a3ba-7004e7361784",
      "item": {
        "type": "markdown",
        "id": "6841a03b-f3a6-4377-a3ba-7004e7361784",
        "text": "# Security"
      },
      "date": 1466619420426
    },
    {
      "type": "add",
      "id": "4bacf0ec7a9d3f25",
      "item": {
        "type": "paragraph",
        "id": "4bacf0ec7a9d3f25",
        "text": "Caddy is not vulnerable to a number of widespread CVEs including [[Heartbleed]], DROWN ([[Drown attack]]), [[POODLE]], and BEAST ([[BEAST attack]]). In addition, Caddy uses TLS_FALLBACK_SCSV to prevent protocol downgrade attacks - [https://en.wikipedia.org/wiki/Caddy_(web_server)#Security wikipedia]"
      },
      "after": "6841a03b-f3a6-4377-a3ba-7004e7361784",
      "date": 1466619421356
    },
    {
      "item": {
        "type": "factory",
        "id": "39fc178bb824d3d8"
      },
      "id": "39fc178bb824d3d8",
      "type": "add",
      "after": "6ce732df-1fe8-4be3-bdbc-670723439afd",
      "date": 1466619499891
    },
    {
      "type": "move",
      "order": [
        "c90b7b62-f310-4cc1-8f84-5679909a9d76",
        "39fc178bb824d3d8",
        "14571482-1ec6-45fc-832d-54a745c42486",
        "13e9c91f-ea99-4bee-be4b-811b2c31a029",
        "1cf424ca-360b-43fa-b105-8dca36a91902",
        "43fd57f1159d2778",
        "332f7461-b75b-475b-bcda-45d52231d8eb",
        "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
        "6841a03b-f3a6-4377-a3ba-7004e7361784",
        "4bacf0ec7a9d3f25",
        "7b35ee00a9b5231d",
        "a49c88d3-3ba9-4331-8d1f-b09ecb61a611",
        "def7baa1-b45c-43b9-ba7a-977bdc2ec4af",
        "6ce732df-1fe8-4be3-bdbc-670723439afd"
      ],
      "id": "39fc178bb824d3d8",
      "date": 1466619506061
    },
    {
      "type": "edit",
      "id": "14571482-1ec6-45fc-832d-54a745c42486",
      "item": {
        "type": "paragraph",
        "id": "14571482-1ec6-45fc-832d-54a745c42486",
        "text": "One of Caddy's most notable features is enabling [[HTTPS]] by default. It is the first general-purpose web server to do so without requiring extra configuration."
      },
      "date": 1466619517948
    },
    {
      "type": "edit",
      "id": "6ce732df-1fe8-4be3-bdbc-670723439afd",
      "item": {
        "type": "markdown",
        "id": "6ce732df-1fe8-4be3-bdbc-670723439afd",
        "text": "# See also\n"
      },
      "date": 1466619530478
    },
    {
      "type": "edit",
      "id": "39fc178bb824d3d8",
      "item": {
        "type": "video",
        "id": "39fc178bb824d3d8",
        "text": "YOUTUBE DCRedMpF1zU\n(double-click to edit caption)\n"
      },
      "date": 1466619542276
    },
    {
      "type": "edit",
      "id": "39fc178bb824d3d8",
      "item": {
        "type": "video",
        "id": "39fc178bb824d3d8",
        "text": "YOUTUBE DCRedMpF1zU\nLet's Encrypt with Digital Ocean & Caddy"
      },
      "date": 1466619561442
    },
    {
      "type": "edit",
      "id": "14571482-1ec6-45fc-832d-54a745c42486",
      "item": {
        "type": "paragraph",
        "id": "14571482-1ec6-45fc-832d-54a745c42486",
        "text": "One of Caddy's most notable features is enabling [[HTTPS]] by default. It is the first general-purpose web server to do so without requiring extra configuration - [https://caddyserver.com/ caddyserver.com]"
      },
      "date": 1466619758167
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "c90b7b62-f310-4cc1-8f84-5679909a9d76",
      "text": "Caddy, sometimes clarified as the Caddy web server, is an open source, HTTP/2-enabled web server written in Go. It uses the Go standard library for its HTTP functionality - [https://en.wikipedia.org/wiki/Caddy_(web_server) wikipedia]"
    },
    {
      "type": "video",
      "id": "39fc178bb824d3d8",
      "text": "YOUTUBE DCRedMpF1zU\nLet's Encrypt with Digital Ocean & Caddy"
    },
    {
      "type": "paragraph",
      "id": "14571482-1ec6-45fc-832d-54a745c42486",
      "text": "One of Caddy's most notable features is enabling [[HTTPS]] by default. It is the first general-purpose web server to do so without requiring extra configuration - [https://caddyserver.com/ caddyserver.com]"
    },
    {
      "type": "paragraph",
      "id": "13e9c91f-ea99-4bee-be4b-811b2c31a029",
      "text": "The author, Matt Holt, began developing Caddy in December 2014 and released it in April of 2015. In the year following its release, it was downloaded over 20,000 times and received 4,500 stars on GitHub."
    },
    {
      "type": "paragraph",
      "id": "1cf424ca-360b-43fa-b105-8dca36a91902",
      "text": "Caddy supports a variety of Web technologies and is available as statically-compiled binaries for Windows, Mac, Linux, Android, and BSD operating systems on i386, amd64, and ARM architectures."
    },
    {
      "type": "markdown",
      "id": "43fd57f1159d2778",
      "text": "# Capabilities\n"
    },
    {
      "type": "paragraph",
      "id": "332f7461-b75b-475b-bcda-45d52231d8eb",
      "text": "A variety of web site technologies can be served by Caddy, which can also act as a reverse proxy and load balancer. Most of Caddy's features are implemented as [[middleware]] and exposed through directives in the Caddyfile (a text file used to configure Caddy). - [https://en.wikipedia.org/wiki/Caddy_(web_server)#Capabilities wikipedia]"
    },
    {
      "type": "markdown",
      "id": "c9ee180b-8fa9-477d-a0b8-c8c813d46ae4",
      "text": "* HTTP/1.1 and HTTP/2\n* HTTPS (automatically enabled or manually)\n* SNI ([[Server Name Indication]])\n* [[OCSP Stapling]]\n* Virtual hosting (multiple sites on the same port)[ ]\n* Native [[IPv4]] and [[IPv6]] support\n* Serve static files (uses [[sendfile]] where possible)\n* Graceful restart/reload\n* Reverse proxy (HTTP or [[WebSockets]])\n* Load balancing with health checks\n* [[FastCGI]] proxy\n* Templates (similar to [[Server Side Includes]])\n* [[Markdown]] rendering\n* [[Common Gateway Interface|CGI]] via WebSockets\n* [[Gzip]] compression\n* [[Basic access authentication]]\n* URL rewriting\n* Redirects\n* File browsing\n* Access, error, and process logs"
    },
    {
      "type": "markdown",
      "id": "6841a03b-f3a6-4377-a3ba-7004e7361784",
      "text": "# Security"
    },
    {
      "type": "paragraph",
      "id": "4bacf0ec7a9d3f25",
      "text": "Caddy is not vulnerable to a number of widespread CVEs including [[Heartbleed]], DROWN ([[Drown attack]]), [[POODLE]], and BEAST ([[BEAST attack]]). In addition, Caddy uses TLS_FALLBACK_SCSV to prevent protocol downgrade attacks - [https://en.wikipedia.org/wiki/Caddy_(web_server)#Security wikipedia]"
    },
    {
      "type": "markdown",
      "id": "7b35ee00a9b5231d",
      "text": "# Automatic HTTPS"
    },
    {
      "type": "paragraph",
      "id": "a49c88d3-3ba9-4331-8d1f-b09ecb61a611",
      "text": "Caddy activates HTTPS by default for sites with qualifying domain names (names for which a TLS certificate can be negotiated via the ACME protocol ([[Automated Certificate Management Environment]])), and redirects HTTP requests to HTTPS. It obtains certificates as needed during startup and keeps them renewed during the lifetime of the server. [[Let's Encrypt]] is the default certificate authority, but the user may customize the ACME CA that is used, which is often necessary when testing configurations. As of Q1 2016, Caddy accounted for about 2% of certificates issued by Let's Encrypt. - [https://en.wikipedia.org/wiki/Caddy_(web_server)#Automatic_HTTPS wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "def7baa1-b45c-43b9-ba7a-977bdc2ec4af",
      "text": "An alternate configuration allows Caddy to obtain certificates only as needed during TLS handshakes rather than at startup, a feature dubbed \"On-Demand TLS.\" To enable this feature, the user must specify a maximum number of certificates that can be issued this way. When Caddy receives a request for a hostname for which it does not yet have a certificate, it will negotiate a new certificate via ACME and serve it immediately, while caching the obtained certificate in memory and storing it on disk. This process usually takes a few seconds, and is subject to tight rate limits.<ref name=\"AutoHTTPS-OnDemand\" />"
    },
    {
      "type": "markdown",
      "id": "6ce732df-1fe8-4be3-bdbc-670723439afd",
      "text": "# See also\n"
    }
  ]
}