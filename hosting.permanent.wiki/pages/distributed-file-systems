{
  "title": "Distributed file systems",
  "journal": [
    {
      "date": 1503005476488,
      "type": "create",
      "item": {
        "story": "",
        "title": "pageTitle"
      }
    },
    {
      "type": "fork",
      "date": 1503005488767
    },
    {
      "type": "edit",
      "id": "71aa6652-aafb-4444-8151-59b00dc089d0",
      "item": {
        "type": "markdown",
        "id": "71aa6652-aafb-4444-8151-59b00dc089d0",
        "text": "* [[BeeGFS]] (Fraunhofer)\n* [[Ceph (software)|Ceph]] (Inktank, Red Hat, SUSE)\n* [[Distributed File System (Microsoft)|Windows Distributed File System (DFS)]] (Microsoft)\n* [[Infinit (file system)|Infinit]]\n* [[Gfarm file system|GfarmFS]]\n* [[GlusterFS]] (Red Hat)\n* [[Google file system|GFS]] (Google Inc.)\n* [[Hadoop distributed file system|HDFS]] (Apache Software Foundation)\n* [[InterPlanetary File System]]\n* iRODS\n* [[LizardFS]] (Skytechnology)\n* [[Moose File System|MooseFS]] (Core Technology / Gemius)\n* [[ObjectiveFS]]\n* [[OneFS]] (EMC Isilon)\n* OpenIO\n* [[OrangeFS]] (Clemson University, Omnibond Systems), formerly [[Parallel Virtual File System]]\n* [[Panasas|Panfs]] (Panasas)\n* [[Parallel Virtual File System]] (Clemson University, Argonne National Laboratory, Ohio Supercomputer Center)\n* [[RozoFS]] (Rozo Systems)\n* Torus (CoreOS)\n* [[XtreemFS]]"
      },
      "date": 1503005512191
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "6e7ab15a-8df7-4145-9e95-7ce8ee4e1e36",
      "text": "''Distributed file systems'' do not share block level access to the same storage but use a network protocol ([[protocol (computing)]]).  These are commonly known as ''network file systems'', even though they are not the only file systems that use the network to send data.  Distributed file systems can restrict access to the file system depending on [[access list]]s or capabilities ([[Capability-based security]]) on both the servers and the clients, depending on how the protocol is designed."
    },
    {
      "type": "paragraph",
      "id": "84458b13-511c-4085-89fd-a19f22a6fb5d",
      "text": "The difference between a distributed file system and a [[distributed data store]] is that a distributed file system allows files to be accessed using the same interfaces and semantics as local files for example, mounting/unmounting, listing directories, read/write at byte boundaries, system's native permission model.  Distributed data stores, by contrast, require using a different API or library and have different semantics (most often those of a database)."
    },
    {
      "type": "paragraph",
      "id": "f751fda6-56c7-4ef5-98c7-2e07dd9bead3",
      "text": "A distributed file system may also be created by software implementing IBM's [[Distributed Data Management Architecture]] (DDM), in which programs running on one computer use local interfaces and semantics to create, manage and access files located on other networked computers.  All such client requests are trapped and converted to equivalent messages defined by the DDM. Using protocols also defined by the DDM, these messages are transmitted to the specified remote computer on which a DDM server program interprets the messages and uses the file system interfaces of that computer to locate and interact with the specified file."
    },
    {
      "type": "markdown",
      "id": "a23a7f09-aa9f-49a0-baba-d035c3eaffc8",
      "text": "# Design goals"
    },
    {
      "type": "paragraph",
      "id": "db8c7776-5b6e-464c-8a36-022521b84703",
      "text": "Distributed file systems may aim for \"transparency\" in a number of aspects.  That is, they aim to be \"invisible\" to client programs, which \"see\" a system which is similar to a local file system.  Behind the scenes, the distributed file system handles locating files, transporting data, and potentially providing other features listed below."
    },
    {
      "type": "markdown",
      "id": "6af18219-fbae-4fbb-82f5-8f7edb5f7422",
      "text": "* ''Access transparency'' is that clients are unaware that files are distributed and can access them in the same way as local files are accessed.\n* ''Location transparency''; a consistent name space exists encompassing local as well as remote files. The name of a file does not give its location.\n* ''Concurrency transparency''; all clients have the same view of the state of the file system. This means that if one process is modifying a file, any other processes on the same system or remote systems that are accessing the files will see the modifications in a coherent manner.\n* ''Failure transparency''; the client and client programs should operate correctly after a server failure.\n* ''Heterogeneity''; file service should be provided across different hardware and operating system platforms.\n* ''Scalability''; the file system should work well in small environments (1 machine, a dozen machines) and also scale gracefully to huge ones (hundreds through tens of thousands of systems).\n* ''Replication transparency''; to support scalability, we may wish to replicate files across multiple servers. Clients should be unaware of this.\n* ''Migration transparency''; files should be able to move around without the client's knowledge."
    },
    {
      "type": "markdown",
      "id": "8279a686-b70b-4076-82e6-fa2ae96b251d",
      "text": "# History"
    },
    {
      "type": "paragraph",
      "id": "d5a11a05-6146-4370-af35-e0f83eaa91b7",
      "text": "The [[Incompatible Timesharing System]] used virtual devices for transparent inter-machine file system access in the 1960s.  More file servers were developed in the 1970s. In 1976 [[Digital Equipment Corporation]] created the [[File Access Listener]] (FAL), an implementation of the [[Data Access Protocol]] as part of [[DECnet]] Phase II which became the first widely used network file system. In 1985 [[Sun Microsystems]] created the file system called \"Network File System ([[Network File System (protocol)]])\" (NFS) which became the first widely used [[Internet Protocol]] based network file system.<ref name=\"ostep-1\" />  Other notable network file systems are [[Andrew File System]] (AFS), [[Apple Filing Protocol]] (AFP), [[NetWare Core Protocol]] (NCP), and [[Server Message Block]] (SMB) which is also known as Common Internet File System (CIFS)."
    },
    {
      "type": "paragraph",
      "id": "f07c87ca-b7cb-4525-a809-5725d25f0078",
      "text": "In 1986, [[IBM]] announced client and server support for Distributed Data Management Architecture (DDM) for the [[System/36]], [[System/38]], and IBM mainframe computers running [[CICS]].  This was followed by the support for [[IBM Personal Computer]], [[AS/400]], IBM mainframe computers under the [[MVS]] and VSE ([[VSE (operating system)]]) operating systems, and [[FlexOS]].   DDM also became the foundation for Distributed Relational Database Architecture ([[DRDA]]), also known as DRDA."
    },
    {
      "type": "markdown",
      "id": "fe73e5c3-4099-496b-8ead-e56a78ec4dc3",
      "text": "# Examples"
    },
    {
      "type": "markdown",
      "id": "71aa6652-aafb-4444-8151-59b00dc089d0",
      "text": "* [[BeeGFS]] (Fraunhofer)\n* [[Ceph (software)|Ceph]] (Inktank, Red Hat, SUSE)\n* [[Distributed File System (Microsoft)|Windows Distributed File System (DFS)]] (Microsoft)\n* [[Infinit (file system)|Infinit]]\n* [[Gfarm file system|GfarmFS]]\n* [[GlusterFS]] (Red Hat)\n* [[Google file system|GFS]] (Google Inc.)\n* [[Hadoop distributed file system|HDFS]] (Apache Software Foundation)\n* [[InterPlanetary File System]]\n* iRODS\n* [[LizardFS]] (Skytechnology)\n* [[Moose File System|MooseFS]] (Core Technology / Gemius)\n* [[ObjectiveFS]]\n* [[OneFS]] (EMC Isilon)\n* OpenIO\n* [[OrangeFS]] (Clemson University, Omnibond Systems), formerly [[Parallel Virtual File System]]\n* [[Panasas|Panfs]] (Panasas)\n* [[Parallel Virtual File System]] (Clemson University, Argonne National Laboratory, Ohio Supercomputer Center)\n* [[RozoFS]] (Rozo Systems)\n* Torus (CoreOS)\n* [[XtreemFS]]"
    }
  ]
}