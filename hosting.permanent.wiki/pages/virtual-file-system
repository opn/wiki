{
  "title": "Virtual file system",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Virtual file system"
      },
      "date": 1502984810904,
      "source": {
        "pageTitle": "Virtual file system",
        "pageSlug": "Virtual_file_system",
        "url": "https://en.wikipedia.org/wiki/Virtual_file_system",
        "date": 1502984810904,
        "link_dictionary": {
          "wiki_links": {
            "Implementations": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "See also": {
              "section_number": 6,
              "section_level": 2,
              "dot_number": 3
            },
            "External links": {
              "section_number": 9,
              "section_level": 2,
              "dot_number": 6
            },
            "References": {
              "section_number": 8,
              "section_level": 2,
              "dot_number": 5
            },
            "Notes": {
              "section_number": 7,
              "section_level": 2,
              "dot_number": 4
            },
            "Single-file virtual file systems": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 788338780,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1502984819733
    },
    {
      "item": {
        "type": "factory",
        "id": "a649e9edc3cd498f"
      },
      "id": "a649e9edc3cd498f",
      "type": "add",
      "after": "1d62a50d-7a03-4fff-a744-812e77ef6e6b",
      "date": 1502984822295
    },
    {
      "type": "edit",
      "id": "a649e9edc3cd498f",
      "item": {
        "type": "reference",
        "id": "a649e9edc3cd498f",
        "site": "c0de.academy",
        "slug": "filesystem-in-userspace",
        "title": "Filesystem in Userspace",
        "text": "Filesystem in Userspace (FUSE) is a software interface for Unix-like computer operating systems that lets non-privileged users create their own file systems without editing kernel code. This is achieved by running file system code in user space while the FUSE module provides only a \"bridge\" to the actual kernel interfaces - [https://en.wikipedia.org/wiki/Filesystem_in_Userspace wikipedia]"
      },
      "date": 1502984824433
    },
    {
      "type": "move",
      "order": [
        "175b01df-0c76-4c95-9354-794ab6594ee5",
        "a649e9edc3cd498f",
        "d5ce31d4-273a-45a8-917d-6312b7247d02",
        "1d62a50d-7a03-4fff-a744-812e77ef6e6b"
      ],
      "id": "a649e9edc3cd498f",
      "date": 1502984828660
    },
    {
      "type": "edit",
      "id": "175b01df-0c76-4c95-9354-794ab6594ee5",
      "item": {
        "type": "paragraph",
        "id": "175b01df-0c76-4c95-9354-794ab6594ee5",
        "text": "A virtual file system (VFS) or virtual filesystem switch is an abstraction layer on top of a more concrete file system. The purpose of a VFS is to allow client applications to access different types of concrete file systems in a uniform way. "
      },
      "date": 1502984837892
    },
    {
      "type": "add",
      "id": "7407cd46ddb968c3",
      "item": {
        "type": "paragraph",
        "id": "7407cd46ddb968c3",
        "text": "A VFS can, for example, be used to access local and network storage devices transparently without the client application noticing the difference. It can be used to bridge the differences in Windows, classic Mac OS/macOS and Unix filesystems, so that applications can access files on local file systems of those types without having to know what type of file system they are accessing - [https://en.wikipedia.org/wiki/Virtual_file_system wikipedia]"
      },
      "after": "175b01df-0c76-4c95-9354-794ab6594ee5",
      "date": 1502984838360
    },
    {
      "type": "add",
      "id": "bf419efc77b5d48d",
      "item": {
        "type": "paragraph",
        "id": "bf419efc77b5d48d",
        "text": "# Vinyl"
      },
      "after": "d5ce31d4-273a-45a8-917d-6312b7247d02",
      "date": 1502984870458
    },
    {
      "type": "edit",
      "id": "bf419efc77b5d48d",
      "item": {
        "type": "markdown",
        "id": "bf419efc77b5d48d",
        "text": "# Vinyl"
      },
      "date": 1502984871709
    },
    {
      "type": "add",
      "id": "9cd1e974ae27a0d1",
      "item": {
        "type": "paragraph",
        "id": "9cd1e974ae27a0d1",
        "text": "Vinyl is a very simple metadata object that describes a file. When you think of a file, two attributes come to mind: path and contents. These are the main attributes on a Vinyl object. A file does not necessarily represent something on your computer’s file system. You have files on S3, FTP, Dropbox, Box, CloudThingly.io and other services. Vinyl can be used to describe files from all of these sources."
      },
      "after": "bf419efc77b5d48d",
      "date": 1502984872849
    },
    {
      "type": "edit",
      "id": "9cd1e974ae27a0d1",
      "item": {
        "type": "paragraph",
        "id": "9cd1e974ae27a0d1",
        "text": "Vinyl is a very simple metadata object that describes a file. When you think of a file, two attributes come to mind: path and contents. These are the main attributes on a Vinyl object - [https://github.com/gulpjs/vinyl sadf]"
      },
      "date": 1502984894763
    },
    {
      "type": "add",
      "id": "a25c196195d65497",
      "item": {
        "type": "paragraph",
        "id": "a25c196195d65497",
        "text": "A file does not necessarily represent something on your computer’s file system. You have files on S3, FTP, Dropbox, Box, CloudThingly.io and other services. Vinyl can be used to describe files from all of these sources."
      },
      "after": "9cd1e974ae27a0d1",
      "date": 1502984895921
    },
    {
      "type": "edit",
      "id": "9cd1e974ae27a0d1",
      "item": {
        "type": "paragraph",
        "id": "9cd1e974ae27a0d1",
        "text": "Vinyl is a very simple metadata object that describes a file. When you think of a file, two attributes come to mind: path and contents. These are the main attributes on a Vinyl object - [https://github.com/gulpjs/vinyl github]"
      },
      "date": 1502984901641
    },
    {
      "item": {
        "type": "factory",
        "id": "f06c2a2be33889cc"
      },
      "id": "f06c2a2be33889cc",
      "type": "add",
      "after": "1d62a50d-7a03-4fff-a744-812e77ef6e6b",
      "date": 1502985108019
    },
    {
      "type": "move",
      "order": [
        "175b01df-0c76-4c95-9354-794ab6594ee5",
        "7407cd46ddb968c3",
        "a649e9edc3cd498f",
        "d5ce31d4-273a-45a8-917d-6312b7247d02",
        "bf419efc77b5d48d",
        "9cd1e974ae27a0d1",
        "f06c2a2be33889cc",
        "a25c196195d65497",
        "1d62a50d-7a03-4fff-a744-812e77ef6e6b"
      ],
      "id": "f06c2a2be33889cc",
      "date": 1502985114136
    },
    {
      "type": "edit",
      "id": "f06c2a2be33889cc",
      "item": {
        "type": "code",
        "id": "f06c2a2be33889cc",
        "text": "{\n  cwd: '/',\n  base: '/test/',\n  path: '/test/file.js',\n  contents: new Buffer('var x = 123')\n}"
      },
      "date": 1502985120875
    },
    {
      "type": "add",
      "id": "abeec671a3157615",
      "item": {
        "type": "paragraph",
        "id": "abeec671a3157615",
        "text": "I think a file could look something like this:"
      },
      "after": "9cd1e974ae27a0d1",
      "date": 1502985144763
    },
    {
      "type": "add",
      "id": "ab1eafe897ab594e",
      "item": {
        "type": "paragraph",
        "id": "ab1eafe897ab594e",
        "text": "Gulp uses vinyl-fs, from which it inherits the gulp.src() and gulp.dest() methods. Vinyl-fs uses the vinyl file object, its “virtual file format”. If we want to use gulp and/or gulp plugins with a regular read stream, we need to convert the read stream to vinyl first."
      },
      "after": "9cd1e974ae27a0d1",
      "date": 1502985351042
    },
    {
      "type": "edit",
      "id": "ab1eafe897ab594e",
      "item": {
        "type": "paragraph",
        "id": "ab1eafe897ab594e",
        "text": "[[Gulp]] uses vinyl-fs, from which it inherits the gulp.src() and gulp.dest() methods. Vinyl-fs uses the vinyl file object, its “virtual file format”. If we want to use gulp and/or gulp plugins with a regular read stream, we need to convert the read stream to vinyl first."
      },
      "date": 1502985361850
    },
    {
      "type": "fork",
      "site": "c0de.academy",
      "date": 1502985415855
    },
    {
      "type": "edit",
      "id": "1d62a50d-7a03-4fff-a744-812e77ef6e6b",
      "item": {
        "type": "markdown",
        "id": "1d62a50d-7a03-4fff-a744-812e77ef6e6b",
        "text": "# See also\n\n- [[Document Package]]\n- [[Media Package]]\n- [[Permanent Archive]]\n- [[Archive File Naming Convention]]\n \n* [[Implementations]]\n* [[Single-file virtual file systems]]"
      },
      "date": 1502985600881
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "175b01df-0c76-4c95-9354-794ab6594ee5",
      "text": "A virtual file system (VFS) or virtual filesystem switch is an abstraction layer on top of a more concrete file system. The purpose of a VFS is to allow client applications to access different types of concrete file systems in a uniform way. "
    },
    {
      "type": "paragraph",
      "id": "7407cd46ddb968c3",
      "text": "A VFS can, for example, be used to access local and network storage devices transparently without the client application noticing the difference. It can be used to bridge the differences in Windows, classic Mac OS/macOS and Unix filesystems, so that applications can access files on local file systems of those types without having to know what type of file system they are accessing - [https://en.wikipedia.org/wiki/Virtual_file_system wikipedia]"
    },
    {
      "type": "reference",
      "id": "a649e9edc3cd498f",
      "site": "c0de.academy",
      "slug": "filesystem-in-userspace",
      "title": "Filesystem in Userspace",
      "text": "Filesystem in Userspace (FUSE) is a software interface for Unix-like computer operating systems that lets non-privileged users create their own file systems without editing kernel code. This is achieved by running file system code in user space while the FUSE module provides only a \"bridge\" to the actual kernel interfaces - [https://en.wikipedia.org/wiki/Filesystem_in_Userspace wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "d5ce31d4-273a-45a8-917d-6312b7247d02",
      "text": "A VFS specifies an interface (or a \"contract\") between the kernel and a concrete file system. Therefore, it is easy to add support for new file system types to the kernel simply by fulfilling the contract. The terms of the contract might change incompatibly from release to release, which would require that concrete file system support be recompiled, and possibly modified before recompilation, to allow it to work with a new release of the operating system; or the supplier of the operating system might make only backward-compatible changes to the contract, so that concrete file system support built for a given release of the operating system would work with future versions of the operating system."
    },
    {
      "type": "markdown",
      "id": "bf419efc77b5d48d",
      "text": "# Vinyl"
    },
    {
      "type": "paragraph",
      "id": "9cd1e974ae27a0d1",
      "text": "Vinyl is a very simple metadata object that describes a file. When you think of a file, two attributes come to mind: path and contents. These are the main attributes on a Vinyl object - [https://github.com/gulpjs/vinyl github]"
    },
    {
      "type": "paragraph",
      "id": "ab1eafe897ab594e",
      "text": "[[Gulp]] uses vinyl-fs, from which it inherits the gulp.src() and gulp.dest() methods. Vinyl-fs uses the vinyl file object, its “virtual file format”. If we want to use gulp and/or gulp plugins with a regular read stream, we need to convert the read stream to vinyl first."
    },
    {
      "type": "paragraph",
      "id": "abeec671a3157615",
      "text": "I think a file could look something like this:"
    },
    {
      "type": "code",
      "id": "f06c2a2be33889cc",
      "text": "{\n  cwd: '/',\n  base: '/test/',\n  path: '/test/file.js',\n  contents: new Buffer('var x = 123')\n}"
    },
    {
      "type": "paragraph",
      "id": "a25c196195d65497",
      "text": "A file does not necessarily represent something on your computer’s file system. You have files on S3, FTP, Dropbox, Box, CloudThingly.io and other services. Vinyl can be used to describe files from all of these sources."
    },
    {
      "type": "markdown",
      "id": "1d62a50d-7a03-4fff-a744-812e77ef6e6b",
      "text": "# See also\n\n- [[Document Package]]\n- [[Media Package]]\n- [[Permanent Archive]]\n- [[Archive File Naming Convention]]\n \n* [[Implementations]]\n* [[Single-file virtual file systems]]"
    }
  ]
}