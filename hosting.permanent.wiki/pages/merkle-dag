{
  "title": "Merkle DAG",
  "story": [
    {
      "type": "paragraph",
      "id": "50e200b2c6d88c8c",
      "text": "Every Merkle is a directed acyclic graph (DAG) because each node is accessed via its name. Each branch of Merkle is the hash of its local contents, naming children by their hash instead of their full contents. So after creation there is no way to edit a node. This prevents cycles (assuming there are no hash collisions), since one can not link the first created node to the last node to create the last reference."
    },
    {
      "type": "paragraph",
      "id": "4c1bbe3db43e7a49",
      "text": "In general for any Merkle, to create a new branch or verify an existing branch, a hash algorithm is used on some combination of the local contents, such as a list of child hashes and other bytes. A few different hash algorithms are available in [[IPFS]] - see [multihash]]."
    },
    {
      "type": "paragraph",
      "id": "5f39528202dd7b77",
      "text": "The data input to any of those hash algorithms is described somewhere around -\n [https://github.com/ipfs/go-ipfs/tree/master/merkledag github]\n\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Merkle DAG",
        "story": []
      },
      "date": 1502991056952
    },
    {
      "item": {
        "type": "factory",
        "id": "50e200b2c6d88c8c"
      },
      "id": "50e200b2c6d88c8c",
      "type": "add",
      "date": 1502991057900
    },
    {
      "type": "edit",
      "id": "50e200b2c6d88c8c",
      "item": {
        "type": "paragraph",
        "id": "50e200b2c6d88c8c",
        "text": "Every Merkle is a directed acyclic graph (DAG) because each node is accessed via its name. Each branch of Merkle is the hash of its local contents, naming children by their hash instead of their full contents. So after creation there is no way to edit a node. This prevents cycles (assuming there are no hash collisions), since one can not link the first created node to the last node to create the last reference."
      },
      "date": 1502991068456
    },
    {
      "type": "add",
      "id": "4c1bbe3db43e7a49",
      "item": {
        "type": "paragraph",
        "id": "4c1bbe3db43e7a49",
        "text": "In general for any Merkle, to create a new branch or verify an existing branch, a hash algorithm is used on some combination of the local contents, such as a list of child hashes and other bytes. A few different hash algorithms are available in IPFS."
      },
      "after": "50e200b2c6d88c8c",
      "date": 1502991074414
    },
    {
      "type": "add",
      "id": "5f39528202dd7b77",
      "item": {
        "type": "paragraph",
        "id": "5f39528202dd7b77",
        "text": "The data input to any of those hash algorithms is described somewhere around -\n [https://github.com/ipfs/go-ipfs/tree/master/merkledag github]\n\n"
      },
      "after": "4c1bbe3db43e7a49",
      "date": 1502991085670
    },
    {
      "type": "edit",
      "id": "4c1bbe3db43e7a49",
      "item": {
        "type": "paragraph",
        "id": "4c1bbe3db43e7a49",
        "text": "In general for any Merkle, to create a new branch or verify an existing branch, a hash algorithm is used on some combination of the local contents, such as a list of child hashes and other bytes. A few different hash algorithms are available in [[IPFS]] - see [multihash]]."
      },
      "date": 1502991112190
    }
  ]
}