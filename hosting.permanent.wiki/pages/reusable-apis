{
  "title": "Reusable APIs",
  "story": [
    {
      "type": "paragraph",
      "id": "36aca2dbf58eb318",
      "text": "REST API complexity is an important problem for companies building mobile applications. The tendency to build new APIs for each new project has negative consequences over time. "
    },
    {
      "type": "video",
      "id": "46651133a66ca963",
      "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
      "punt": {
        "url": "https://www.dreamfactory.com/resources/video/what-are-reusable-apis",
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36"
      },
      "text": "YOUTUBE qkuPvkXDwGU\n[[Reusable APIs]] This talk explains the importance of reusable REST APIs. - [https://www.dreamfactory.com/resources/video/what-are-reusable-apis dreamfactory.com]"
    },
    {
      "type": "paragraph",
      "id": "702a7521e06123aa",
      "text": "Adopting a REST API platform strategy with reusable and general-purpose services addresses this problem and provides many benefits in terms of more agile development and quicker time to value. In this paper I have tried to provide some of the lessons we learned about constructing reusable REST APIs while developing the DreamFactory platform — I hope this provides a useful template as your enterprise embarks on mobile application development."
    },
    {
      "type": "paragraph",
      "id": "9119184529059db5",
      "text": "# Characteristics of a Reusable API"
    },
    {
      "type": "paragraph",
      "id": "73dcdc131feea6ec",
      "text": "There are some basic characteristics that any reusable REST API needs to have. The API needs to support both HTML5 and Native Mobile access patterns. Requests and responses should include JSON or XML with objects, arrays, and sub-arrays. Noun based endpoints should be automatically generated depending on the database schema. All HTTP verbs (GET, PUT, DELETE, etc.) need to be implemented for every use case. Support for web standards like OAuth, CORS, GZIP, and SSL is also important."
    },
    {
      "type": "paragraph",
      "id": "9fda8ad992ed04bd",
      "text": "There needs to be a consistent URL structure for accessing any backend data source. The File Storage API should be a subset of the NoSQL API, which should be a subset of the SQL API. Parameter names should be reused across services where possible. This presents developers with a familiar interface for any data source. The API should include interactive documentation that allows developers to quickly experiment with different parameters. "
    },
    {
      "type": "paragraph",
      "id": "ad27888afb832646",
      "text": "In general, the structure of the request URL and associated parameters needs to be very flexible and easy to use, but also comprehensive in scope. Looking at the example below, there is a base server, an API version, the backend database, and a particular table name in the request URL string. Then the parameters specify a complex filter with a field name, operator, and value. Lastly an additional parameter sorts the returned JSON data array."
    },
    {
      "type": "paragraph",
      "id": "955b4d02d9293029",
      "text": "A huge number of application development scenarios can be implemented just with the filter parameter. This allows any subset of data to be identified and operated on. For example, objects in a particular date range could be loaded into a calendar interface with a filter string. Complex logical operations should also be supported. The filter string interface needs to protect against SQL Injection attacks. "
    },
    {
      "type": "markdown",
      "id": "447c88b4af673471",
      "text": "Other database specific features include:\n\n- Pagination and sorting\n- Complex logical operations\n- Rollback and commit\n- Role based access controls\n- Record level access controls\n- Stored functions and procedures"
    },
    {
      "type": "paragraph",
      "id": "7b98f75ff648b017",
      "text": "The DreamFactory API platform supports operations on arrays of objects, but you can also specify related objects as a URL parameter. This allows complex documents to be downloaded from a SQL database and used immediately as a JSON object. The data can be edited along with the related objects. When committed back to the platform, all of the changes are updated including parent, child, and junction relationships. This flexibility supports a huge number of very efficient data access patterns."
    },
    {
      "type": "paragraph",
      "id": "2f86014a162de554",
      "text": "The vast majority of application development use cases can be supported with a reusable REST API right out of the box. For special cases, a server-side scripting capability can be used to customize existing services or create entirely new ones. [[DreamFactory]] uses the V8 JavaScript engine for this purpose."
    },
    {
      "type": "markdown",
      "id": "82d9cc8315471543",
      "text": "- Custom business logic\n- Workflow triggers\n- Formula fields\n- Field validation\n- Web service orchestration"
    },
    {
      "type": "markdown",
      "id": "7d3a6c83-c8f0-41c6-96a0-e6f8acd2cc28",
      "text": "# See also\n\n- [[Microservices]]\n- [[DreamFactory]]\n- [[DreamFactory Services]]\n- [[Reusable APIs]]\n- [[DreamFactory Wiki]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Reusable APIs",
        "story": []
      },
      "date": 1502214955469
    },
    {
      "item": {
        "type": "factory",
        "id": "36aca2dbf58eb318"
      },
      "id": "36aca2dbf58eb318",
      "type": "add",
      "date": 1502214956745
    },
    {
      "type": "edit",
      "id": "36aca2dbf58eb318",
      "item": {
        "type": "paragraph",
        "id": "36aca2dbf58eb318",
        "text": "Ben Busse, product lead at DreamFactory, explains the importance of reusable REST APIs. This talk describes lessons learned writing one-off APIs the bad way, important characteristics of a reusable API, and how architects and developers can use reusable APIs in practice. With mobile applications taking over the enterprise, this talk provides practical guidance for a winning API strategy.\n\nCharacteristics of a Reusable API\n\nThere are some basic characteristics that any reusable REST API needs to have. The API needs to support both HTML5 and Native Mobile access patterns. Requests and responses should include JSON or XML with objects, arrays, and sub-arrays. Noun based endpoints should be automatically generated depending on the database schema. All HTTP verbs (GET, PUT, DELETE, etc.) need to be implemented for every use case. Support for web standards like OAuth, CORS, GZIP, and SSL is also important.\n\nThere needs to be a consistent URL structure for accessing any backend data source. The File Storage API should be a subset of the NoSQL API, which should be a subset of the SQL API. Parameter names should be reused across services where possible. This presents developers with a familiar interface for any data source. The API should include interactive documentation that allows developers to quickly experiment with different parameters. \n\nIn general, the structure of the request URL and associated parameters needs to be very flexible and easy to use, but also comprehensive in scope. Looking at the example below, there is a base server, an API version, the backend database, and a particular table name in the request URL string. Then the parameters specify a complex filter with a field name, operator, and value. Lastly an additional parameter sorts the returned JSON data array.\n\nA huge number of application development scenarios can be implemented just with the filter parameter. This allows any subset of data to be identified and operated on. For example, objects in a particular date range could be loaded into a calendar interface with a filter string. Complex logical operations should also be supported. The filter string interface needs to protect against SQL Injection attacks. Other database specific features include:\n\n• Pagination and sorting\n• Complex logical operations\n• Rollback and commit\n• Role based access controls\n• Record level access controls\n• Stored functions and procedures\n\nThe DreamFactory API platform supports operations on arrays of objects, but you can also specify related objects as a URL parameter. This allows complex documents to be downloaded from a SQL database and used immediately as a JSON object. The data can be edited along with the related objects. When committed back to the platform, all of the changes are updated including parent, child, and junction relationships. This flexibility supports a huge number of very efficient data access patterns.\n\nThe vast majority of application development use cases can be supported with a reusable REST API right out of the box. For special cases, a server-side scripting capability can be used to customize existing services or create entirely new ones. DreamFactory uses the V8 JavaScript engine for this purpose. Here are some of the special cases that you might want to implement with server-side scripting: \n\n"
      },
      "date": 1502214970337
    },
    {
      "type": "add",
      "id": "82d9cc8315471543",
      "item": {
        "type": "paragraph",
        "id": "82d9cc8315471543",
        "text": "- Custom business logic\n- Workflow triggers\n- Formula fields\n- Field validation\n- Web service orchestration"
      },
      "after": "36aca2dbf58eb318",
      "date": 1502214980236
    },
    {
      "type": "edit",
      "id": "82d9cc8315471543",
      "item": {
        "type": "markdown",
        "id": "82d9cc8315471543",
        "text": "- Custom business logic\n- Workflow triggers\n- Formula fields\n- Field validation\n- Web service orchestration"
      },
      "date": 1502214981338
    },
    {
      "type": "edit",
      "id": "36aca2dbf58eb318",
      "item": {
        "type": "paragraph",
        "id": "36aca2dbf58eb318",
        "text": "REST API complexity is an important problem for companies building mobile applications. The tendency to build new APIs for each new project has negative consequences over time. Adopting a REST API platform strategy with reusable and general-purpose services addresses this problem and provides many benefits in terms of more agile development and quicker time to value. In this paper I have tried to provide some of the lessons we learned about constructing reusable REST APIs while developing the DreamFactory platform — I hope this provides a useful template as your enterprise embarks on mobile application development."
      },
      "date": 1502214994453
    },
    {
      "type": "edit",
      "id": "36aca2dbf58eb318",
      "item": {
        "type": "paragraph",
        "id": "36aca2dbf58eb318",
        "text": "REST API complexity is an important problem for companies building mobile applications. The tendency to build new APIs for each new project has negative consequences over time. "
      },
      "date": 1502215003881
    },
    {
      "type": "add",
      "id": "702a7521e06123aa",
      "item": {
        "type": "paragraph",
        "id": "702a7521e06123aa",
        "text": "Adopting a REST API platform strategy with reusable and general-purpose services addresses this problem and provides many benefits in terms of more agile development and quicker time to value. In this paper I have tried to provide some of the lessons we learned about constructing reusable REST APIs while developing the DreamFactory platform — I hope this provides a useful template as your enterprise embarks on mobile application development."
      },
      "after": "36aca2dbf58eb318",
      "date": 1502215006813
    },
    {
      "type": "add",
      "id": "9119184529059db5",
      "item": {
        "type": "paragraph",
        "id": "9119184529059db5",
        "text": "# Characteristics of a Reusable API"
      },
      "after": "702a7521e06123aa",
      "date": 1502215092624
    },
    {
      "type": "add",
      "id": "73dcdc131feea6ec",
      "item": {
        "type": "paragraph",
        "id": "73dcdc131feea6ec",
        "text": "There are some basic characteristics that any reusable REST API needs to have. The API needs to support both HTML5 and Native Mobile access patterns. Requests and responses should include JSON or XML with objects, arrays, and sub-arrays. Noun based endpoints should be automatically generated depending on the database schema. All HTTP verbs (GET, PUT, DELETE, etc.) need to be implemented for every use case. Support for web standards like OAuth, CORS, GZIP, and SSL is also important."
      },
      "after": "9119184529059db5",
      "date": 1502215096897
    },
    {
      "type": "add",
      "id": "9fda8ad992ed04bd",
      "item": {
        "type": "paragraph",
        "id": "9fda8ad992ed04bd",
        "text": "There needs to be a consistent URL structure for accessing any backend data source. The File Storage API should be a subset of the NoSQL API, which should be a subset of the SQL API. Parameter names should be reused across services where possible. This presents developers with a familiar interface for any data source. The API should include interactive documentation that allows developers to quickly experiment with different parameters. "
      },
      "after": "73dcdc131feea6ec",
      "date": 1502215101448
    },
    {
      "type": "add",
      "id": "ad27888afb832646",
      "item": {
        "type": "paragraph",
        "id": "ad27888afb832646",
        "text": "In general, the structure of the request URL and associated parameters needs to be very flexible and easy to use, but also comprehensive in scope. Looking at the example below, there is a base server, an API version, the backend database, and a particular table name in the request URL string. Then the parameters specify a complex filter with a field name, operator, and value. Lastly an additional parameter sorts the returned JSON data array."
      },
      "after": "9fda8ad992ed04bd",
      "date": 1502215106641
    },
    {
      "type": "add",
      "id": "955b4d02d9293029",
      "item": {
        "type": "paragraph",
        "id": "955b4d02d9293029",
        "text": "A huge number of application development scenarios can be implemented just with the filter parameter. This allows any subset of data to be identified and operated on. For example, objects in a particular date range could be loaded into a calendar interface with a filter string. Complex logical operations should also be supported. The filter string interface needs to protect against SQL Injection attacks. "
      },
      "after": "ad27888afb832646",
      "date": 1502215116769
    },
    {
      "type": "add",
      "id": "447c88b4af673471",
      "item": {
        "type": "paragraph",
        "id": "447c88b4af673471",
        "text": "Other database specific features include:\n\n- Pagination and sorting\n- Complex logical operations\n- Rollback and commit\n- Role based access controls\n- Record level access controls\n- Stored functions and procedures"
      },
      "after": "955b4d02d9293029",
      "date": 1502215140578
    },
    {
      "type": "add",
      "id": "7b98f75ff648b017",
      "item": {
        "type": "paragraph",
        "id": "7b98f75ff648b017",
        "text": "The DreamFactory API platform supports operations on arrays of objects, but you can also specify related objects as a URL parameter. This allows complex documents to be downloaded from a SQL database and used immediately as a JSON object. The data can be edited along with the related objects. When committed back to the platform, all of the changes are updated including parent, child, and junction relationships. This flexibility supports a huge number of very efficient data access patterns."
      },
      "after": "447c88b4af673471",
      "date": 1502215144369
    },
    {
      "type": "add",
      "id": "2f86014a162de554",
      "item": {
        "type": "paragraph",
        "id": "2f86014a162de554",
        "text": "The vast majority of application development use cases can be supported with a reusable REST API right out of the box. For special cases, a server-side scripting capability can be used to customize existing services or create entirely new ones. [[DreamFactory]] uses the V8 JavaScript engine for this purpose."
      },
      "after": "7b98f75ff648b017",
      "date": 1502215151160
    },
    {
      "type": "edit",
      "id": "447c88b4af673471",
      "item": {
        "type": "markdown",
        "id": "447c88b4af673471",
        "text": "Other database specific features include:\n\n- Pagination and sorting\n- Complex logical operations\n- Rollback and commit\n- Role based access controls\n- Record level access controls\n- Stored functions and procedures"
      },
      "date": 1502215152659
    },
    {
      "type": "add",
      "item": {
        "type": "video",
        "id": "46651133a66ca963",
        "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
        "punt": {
          "url": "https://www.dreamfactory.com/resources/video/what-are-reusable-apis",
          "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36"
        },
        "text": "YOUTUBE qkuPvkXDwGU\n[[Reusable APIs]] This talk explains the importance of reusable REST APIs."
      },
      "after": "36aca2dbf58eb318",
      "id": "46651133a66ca963",
      "date": 1502215159837
    },
    {
      "type": "edit",
      "id": "46651133a66ca963",
      "item": {
        "type": "video",
        "id": "46651133a66ca963",
        "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
        "punt": {
          "url": "https://www.dreamfactory.com/resources/video/what-are-reusable-apis",
          "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36"
        },
        "text": "YOUTUBE qkuPvkXDwGU\n[[Reusable APIs]] This talk explains the importance of reusable REST APIs. - [https://www.dreamfactory.com/resources/video/what-are-reusable-apis dreamfactory.com]"
      },
      "date": 1502215619940
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "7d3a6c83-c8f0-41c6-96a0-e6f8acd2cc28",
        "text": "# See also\n\n- [[Microservices]]\n- [[DreamFactory]]\n- [[DreamFactory Services]]\n- [[Reusable APIs]]\n- [[DreamFactory Wiki]]"
      },
      "after": "82d9cc8315471543",
      "id": "7d3a6c83-c8f0-41c6-96a0-e6f8acd2cc28",
      "date": 1502217137603
    }
  ]
}