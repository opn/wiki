{
  "title": "Stack Based Prototypes",
  "story": [
    {
      "type": "paragraph",
      "id": "ba149371d56c0a7c",
      "text": "A stack based prototype is an evolving [[functional prototype]] of the final application. The aim is to break down each screen of the [[paper prototype]] into separate components, and combine them into an early stage layout."
    },
    {
      "type": "paragraph",
      "id": "43fd81c5f8697a37",
      "text": "In this way we have individual small components that can be separately tested, and used across any number of stacks. We call these components [[Views]]."
    },
    {
      "type": "html",
      "id": "a86c29817b63f5c3",
      "text": "A view is composed of three parts:<ol><li>  A stack<li> A behavior<li> A menu (set of tools and tests)"
    },
    {
      "type": "paragraph",
      "id": "a60978b3570cb818",
      "text": "The behavior and menu are saved as [[script-only stacks]], while the view is a regular LiveCode group stored on the first card of a simple stack."
    },
    {
      "type": "paragraph",
      "id": "3eb0fdb398509e38",
      "text": "In the video below you can see an example of of a stack based prototype for the [[SivaSiva Mobile Application]]."
    },
    {
      "type": "video",
      "id": "6928964ebfa6baa8",
      "text": "VIMEO 175109296\nThe first draft [[stack based prototype]] of the SivaSiva Character Trait Workbook Module."
    },
    {
      "type": "paragraph",
      "id": "6cf78bf2c856fd6a",
      "text": "The next video explains how this [[stack based prototype]] is constructed out of components we call [[views]], and [[Script-only Stack Behaviors]]."
    },
    {
      "type": "video",
      "id": "7332f1397f918f02",
      "text": "VIMEO 175111026\nA description of how stacks, script only behaviours and libraries are used to create a modular framework."
    },
    {
      "type": "paragraph",
      "id": "e37216c704a45aee",
      "text": "Using components can lead to a number of advantages, from better testing, to keeping the code and designs all in one place across multiple stacks, and finally the ability to build up complex components out of simpler parts that you nest into more complex compound components."
    },
    {
      "type": "paragraph",
      "id": "83510106586b6d7a",
      "text": "The video below shows some of these features:"
    },
    {
      "type": "video",
      "id": "f2ca0cb0a9419a8b",
      "text": "VIMEO 175112096\nHow it becomes fast and easy to iterate designs (and inform early stage designs) when you work with individually programmed components i.e. views and behaviours."
    },
    {
      "type": "paragraph",
      "id": "87f10db733297b8e",
      "text": "Finally (though not shown here), designing interfaces this way fit swell with the eventual aim of creating native [[Livecode Builder Widgets]] with better performance and robustness across a range of platforms."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Stack Based Prototypes",
        "story": []
      },
      "date": 1468767295879
    },
    {
      "item": {
        "type": "factory",
        "id": "ba149371d56c0a7c"
      },
      "id": "ba149371d56c0a7c",
      "type": "add",
      "date": 1468767297096
    },
    {
      "type": "edit",
      "id": "ba149371d56c0a7c",
      "item": {
        "type": "paragraph",
        "id": "ba149371d56c0a7c",
        "text": "A stack based prototype is an evolving [[functional prototype]] of the final application. The aim is to break down each screen of the [[paper prototype]] into separate components, and combine them into an early stage layout."
      },
      "date": 1468767406959
    },
    {
      "type": "add",
      "id": "43fd81c5f8697a37",
      "item": {
        "type": "paragraph",
        "id": "43fd81c5f8697a37",
        "text": "In this way we have individual small components that can be separately tested, and used across any number of stacks. We call these components [[Views]]."
      },
      "after": "ba149371d56c0a7c",
      "date": 1468767464523
    },
    {
      "type": "add",
      "id": "a86c29817b63f5c3",
      "item": {
        "type": "paragraph",
        "id": "a86c29817b63f5c3",
        "text": "A view is composed of three parts:<ol><li>  A stack<li> A behavior<li> A men (set of tools and tests)"
      },
      "after": "43fd81c5f8697a37",
      "date": 1468767545871
    },
    {
      "type": "edit",
      "id": "a86c29817b63f5c3",
      "item": {
        "type": "html",
        "id": "a86c29817b63f5c3",
        "text": "A view is composed of three parts:<ol><li>  A stack<li> A behavior<li> A men (set of tools and tests)"
      },
      "date": 1468767547124
    },
    {
      "type": "edit",
      "id": "a86c29817b63f5c3",
      "item": {
        "type": "html",
        "id": "a86c29817b63f5c3",
        "text": "A view is composed of three parts:<ol><li>  A stack<li> A behavior<li> A menu (set of tools and tests)"
      },
      "date": 1468767558144
    },
    {
      "item": {
        "type": "factory",
        "id": "a60978b3570cb818"
      },
      "id": "a60978b3570cb818",
      "type": "add",
      "after": "a86c29817b63f5c3",
      "date": 1468767559769
    },
    {
      "type": "edit",
      "id": "a60978b3570cb818",
      "item": {
        "type": "paragraph",
        "id": "a60978b3570cb818",
        "text": "The behavior and menu are saved as [[script-only stacks]], while the view is a regular LiveCode group stored on the first card of a simple stack."
      },
      "date": 1468767632214
    },
    {
      "type": "add",
      "id": "3eb0fdb398509e38",
      "item": {
        "type": "paragraph",
        "id": "3eb0fdb398509e38",
        "text": "In the video below you can see an example of of a stack based prototype for the [[SivaSiva Mobile Application]]."
      },
      "after": "a60978b3570cb818",
      "date": 1468767707177
    },
    {
      "type": "add",
      "item": {
        "type": "video",
        "id": "6928964ebfa6baa8",
        "text": "VIMEO 175109296\nThe first draft [[stack based prototype]] of the SivaSiva Character Trait Workbook Module."
      },
      "after": "3eb0fdb398509e38",
      "id": "6928964ebfa6baa8",
      "date": 1468767712455
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6cf78bf2c856fd6a",
        "text": "The next video explains how this [[stack based prototype]] is constructed out of components we call [[views]], and [[Script-only Stack Behaviors]]."
      },
      "after": "6928964ebfa6baa8",
      "id": "6cf78bf2c856fd6a",
      "date": 1468859934631
    },
    {
      "type": "add",
      "item": {
        "type": "video",
        "id": "7332f1397f918f02",
        "text": "VIMEO 175111026\nA description of how stacks, script only behaviours and libraries are used to create a modular framework."
      },
      "after": "6cf78bf2c856fd6a",
      "id": "7332f1397f918f02",
      "date": 1468859939039
    },
    {
      "type": "add",
      "item": {
        "type": "video",
        "id": "f2ca0cb0a9419a8b",
        "text": "VIMEO 175112096\nHow it becomes fast and easy to iterate designs (and inform early stage designs) when you work with individually programmed components i.e. views and behaviours."
      },
      "after": "7332f1397f918f02",
      "id": "f2ca0cb0a9419a8b",
      "date": 1468859953231
    },
    {
      "type": "add",
      "id": "e37216c704a45aee",
      "item": {
        "type": "paragraph",
        "id": "e37216c704a45aee",
        "text": "Using components can lead to a number of advantages, from better testing, to keeping the code and designs all in one place across multiple stacks, and finally the ability to build up complex components out of simpler parts that you nest into more complex compound components."
      },
      "after": "6cf78bf2c856fd6a",
      "date": 1468860094503
    },
    {
      "type": "add",
      "id": "83510106586b6d7a",
      "item": {
        "type": "paragraph",
        "id": "83510106586b6d7a",
        "text": "The video below shows some of these features:"
      },
      "after": "e37216c704a45aee",
      "date": 1468860107641
    },
    {
      "type": "move",
      "order": [
        "ba149371d56c0a7c",
        "43fd81c5f8697a37",
        "a86c29817b63f5c3",
        "a60978b3570cb818",
        "3eb0fdb398509e38",
        "6928964ebfa6baa8",
        "6cf78bf2c856fd6a",
        "83510106586b6d7a",
        "7332f1397f918f02",
        "e37216c704a45aee",
        "f2ca0cb0a9419a8b"
      ],
      "id": "e37216c704a45aee",
      "date": 1468860109639
    },
    {
      "type": "move",
      "order": [
        "ba149371d56c0a7c",
        "43fd81c5f8697a37",
        "a86c29817b63f5c3",
        "a60978b3570cb818",
        "3eb0fdb398509e38",
        "6928964ebfa6baa8",
        "6cf78bf2c856fd6a",
        "7332f1397f918f02",
        "e37216c704a45aee",
        "83510106586b6d7a",
        "f2ca0cb0a9419a8b"
      ],
      "id": "83510106586b6d7a",
      "date": 1468860112255
    },
    {
      "item": {
        "type": "factory",
        "id": "87f10db733297b8e"
      },
      "id": "87f10db733297b8e",
      "type": "add",
      "after": "f2ca0cb0a9419a8b",
      "date": 1468860115135
    },
    {
      "type": "edit",
      "id": "87f10db733297b8e",
      "item": {
        "type": "paragraph",
        "id": "87f10db733297b8e",
        "text": "Finally (though not shown here), designing interfaces this way fit swell with the eventual aim of creating native [[Livecode Builder Widgets]] with better performance and robustness across a range of platforms."
      },
      "date": 1468860219682
    }
  ]
}