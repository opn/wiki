{
  "title": "model_ProjectFiles",
  "story": [
    {
      "type": "paragraph",
      "id": "f9ae09b06b1e6042",
      "text": "This model wraps access to key project files and folders. This model is based on a [[Project Naming Convention]], which specifies the names of files and folders inside of a single toplevel [[Project Folder]]."
    },
    {
      "type": "paragraph",
      "id": "1dbfe9ca79df8e93",
      "text": "This toplevel project folder contains a [[Project Home Stack]], a disk based [[Project Array]], and a series of [[Standard Project Folders]]."
    },
    {
      "type": "code",
      "id": "a2aa8c18f11050bc",
      "text": "getprop project_Folder [pSubFolderPath]\n put the stack_Name of the target into stackName\n put project_GetFolder (stackName, pSubFolderPath) into projectFolder\n return projectFolder\nend project_Folder\n"
    },
    {
      "type": "paragraph",
      "id": "73c37b846f89b664",
      "text": "Assumes the project home stack exists and is at the root of the project folder."
    },
    {
      "type": "paragraph",
      "id": "6f657290f337f89e",
      "text": "There are several ways of finding the project home stack:"
    },
    {
      "type": "code",
      "id": "5ed5929717079c77",
      "text": "put the name of stack projectName"
    },
    {
      "type": "reference",
      "id": "067a2db89ef69cd6",
      "site": "lcw.livecode.world",
      "slug": "project-naming-convention",
      "title": "Project Naming Convention",
      "text": "Projects are designed to be as simple as possible. A single folder containing a [[project home stack]], a [[Project Array]], and a series of [[Standard Project Folders]]. These folders and files conform to the a simple naming convention."
    },
    {
      "type": "code",
      "id": "4d380c5f56b533a7",
      "text": "function project_GetFolder stackName, pSubFolderPath"
    },
    {
      "type": "paragraph",
      "id": "4c0f6afb14131cc7",
      "text": "The first step is to fetch the project folder from the stored library array and return that if the folder exists:"
    },
    {
      "type": "code",
      "id": "426d0d4218a89689",
      "text": "put project_GetFolderFromArray (projectName, pSubFolderPath) into projectFolder"
    },
    {
      "type": "paragraph",
      "id": "a846616400dfca16",
      "text": "If it does not exist we then try to find the project folder based on the naming conventions by looking for a stack that has the same name as the project:"
    },
    {
      "type": "code",
      "id": "0411945ee66ff0ce",
      "text": "put project_SearchForProjectFolder (stackName) into projectFolder\n "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "model_ProjectFiles",
        "story": []
      },
      "date": 1471082077107
    },
    {
      "item": {
        "type": "factory",
        "id": "f9ae09b06b1e6042"
      },
      "id": "f9ae09b06b1e6042",
      "type": "add",
      "date": 1471082078836
    },
    {
      "type": "edit",
      "id": "f9ae09b06b1e6042",
      "item": {
        "type": "paragraph",
        "id": "f9ae09b06b1e6042",
        "text": "This model wraps access to key project files and folders."
      },
      "date": 1471082125443
    },
    {
      "item": {
        "type": "factory",
        "id": "a2aa8c18f11050bc"
      },
      "id": "a2aa8c18f11050bc",
      "type": "add",
      "after": "f9ae09b06b1e6042",
      "date": 1471082166268
    },
    {
      "item": {
        "type": "factory",
        "id": "73c37b846f89b664"
      },
      "id": "73c37b846f89b664",
      "type": "add",
      "after": "a2aa8c18f11050bc",
      "date": 1471082186856
    },
    {
      "type": "edit",
      "id": "a2aa8c18f11050bc",
      "item": {
        "type": "code",
        "id": "a2aa8c18f11050bc",
        "text": "getprop project_Folder [pSubFolderPath]\n put the stack_Name of the target into stackName\n put project_GetFolder (stackName, pSubFolderPath) into projectFolder\n return projectFolder\nend project_Folder\n"
      },
      "date": 1471082188174
    },
    {
      "type": "edit",
      "id": "73c37b846f89b664",
      "item": {
        "type": "paragraph",
        "id": "73c37b846f89b664",
        "text": "   -- assumes the project home stack exists and is at the root of the project folder\n   -- put the project_HomeStack of the target into projectHomeStack\n   -- put the short name of stack projectHomeStack into projectHomeStackName\n"
      },
      "date": 1471082189976
    },
    {
      "type": "edit",
      "id": "73c37b846f89b664",
      "item": {
        "type": "paragraph",
        "id": "73c37b846f89b664",
        "text": "Assumes the project home stack exists and is at the root of the project folder."
      },
      "date": 1471082213998
    },
    {
      "item": {
        "type": "factory",
        "id": "5ed5929717079c77"
      },
      "id": "5ed5929717079c77",
      "type": "add",
      "after": "6f657290f337f89e",
      "date": 1471082264948
    },
    {
      "type": "add",
      "id": "6f657290f337f89e",
      "item": {
        "type": "paragraph",
        "id": "6f657290f337f89e",
        "text": "There are several ways of finding the project hme stack:"
      },
      "after": "73c37b846f89b664",
      "date": 1471082266586
    },
    {
      "type": "edit",
      "id": "5ed5929717079c77",
      "item": {
        "type": "code",
        "id": "5ed5929717079c77",
        "text": "the project_HomeStack of the target\nthe short name of stack projectHomeStack"
      },
      "date": 1471082292391
    },
    {
      "item": {
        "type": "factory",
        "id": "1b4d8d9378c6d8e7"
      },
      "id": "1b4d8d9378c6d8e7",
      "type": "add",
      "after": "5ed5929717079c77",
      "date": 1471082319500
    },
    {
      "type": "edit",
      "id": "1b4d8d9378c6d8e7",
      "item": {
        "type": "paragraph",
        "id": "1b4d8d9378c6d8e7",
        "text": "Here is a list of naming conventions we use for projects:\n\nA project has a home stack.\nThe home stack is often a script only stack, but this is not required.\nThe short name of the homestack is the name of the project.\nThe short file of the homestack is the name of the project followed by \".livecode\" (eg \"lcw.livecode\").\nWe use the \".livecode\" regardless of whether the stack is a script only stack to make it easier to derive the path from the project name and therfore locate.\nThe short file of the homestack is in lower case (eg \"lcw.livecode\" not \"LCW.livecode\")\n"
      },
      "date": 1471082321616
    },
    {
      "type": "edit",
      "id": "1b4d8d9378c6d8e7",
      "item": {
        "type": "paragraph",
        "id": "1b4d8d9378c6d8e7",
        "text": "# Naming conventions"
      },
      "date": 1471082349287
    },
    {
      "type": "add",
      "id": "161ac668bc2e98fc",
      "item": {
        "type": "paragraph",
        "id": "161ac668bc2e98fc",
        "text": "Here is a list of naming conventions we use for projects:\n\n* A project has a home stack.\n* The home stack is often a script only stack, but this is not required.\n* The short name of the homestack is the name of the project.\n* The short file of the homestack is the name of the project followed by \".livecode\" (eg \"lcw.livecode\").\n"
      },
      "after": "1b4d8d9378c6d8e7",
      "date": 1471082371448
    },
    {
      "type": "edit",
      "id": "161ac668bc2e98fc",
      "item": {
        "type": "paragraph",
        "id": "161ac668bc2e98fc",
        "text": "Here is a list of naming conventions we use for projects:\n\n* A project has a home stack.\n* The home stack is often a script only stack, but this is not required.\n* The short name of the homestack is the name of the project.\n* The short file of the homestack is the name of the project followed by \".livecode\" (eg \"lcw.livecode\").\n* We use the \".livecode\" regardless of whether the stack is a script only stack to make it easier to derive the path from the project name and therfore locate.\n* The short file of the homestack is in lower case (eg \"lcw.livecode\" not \"LCW.livecode\")\n"
      },
      "date": 1471082388609
    },
    {
      "type": "edit",
      "id": "161ac668bc2e98fc",
      "item": {
        "type": "markdown",
        "id": "161ac668bc2e98fc",
        "text": "Here is a list of naming conventions we use for projects:\n\n* A project has a home stack.\n* The home stack is often a script only stack, but this is not required.\n* The short name of the homestack is the name of the project.\n* The short file of the homestack is the name of the project followed by \".livecode\" (eg \"lcw.livecode\").\n* We use the \".livecode\" regardless of whether the stack is a script only stack to make it easier to derive the path from the project name and therfore locate.\n* The short file of the homestack is in lower case (eg \"lcw.livecode\" not \"LCW.livecode\")\n"
      },
      "date": 1471082389452
    },
    {
      "type": "edit",
      "id": "1b4d8d9378c6d8e7",
      "item": {
        "type": "markdown",
        "id": "1b4d8d9378c6d8e7",
        "text": "# Naming conventions"
      },
      "date": 1471082390709
    },
    {
      "item": {
        "type": "factory",
        "id": "4d380c5f56b533a7"
      },
      "id": "4d380c5f56b533a7",
      "type": "add",
      "after": "161ac668bc2e98fc",
      "date": 1471082416522
    },
    {
      "type": "edit",
      "id": "4d380c5f56b533a7",
      "item": {
        "type": "code",
        "id": "4d380c5f56b533a7",
        "text": "function project_GetFolder stackName, pSubFolderPath\n   put project_GetFolderFromArray (stackName, pSubFolderPath) into projectFolder\n   if projectFolder is empty then\n      if exists (stack stackName) is false then return empty\n      put the project_FindFolder of stack stackName  into projectFolder\n      if projectFolder is empty then\n         return empty\n      end if\n   end if\n   text_AddTrailing projectFolder, slash\n   if pSubFolderPath is not empty then\n      if char 1 of pSubFolderPath = slach then delete char 1 of pSubFolderPath\n      put pSubFolderPath after projectFolder\n   end if\n   return projectFolder\nend project_GetFolder"
      },
      "date": 1471082419513
    },
    {
      "type": "edit",
      "id": "4d380c5f56b533a7",
      "item": {
        "type": "code",
        "id": "4d380c5f56b533a7",
        "text": "function project_GetFolder stackName, pSubFolderPath\n put project_GetFolderFromArray (stackName, pSubFolderPath) into projectFolder\n\n text_AddTrailing projectFolder, slash\n if pSubFolderPath is not empty then\n  if char 1 of pSubFolderPath = slach then delete char 1 of pSubFolderPath\n  put pSubFolderPath after projectFolder\n end if\n return projectFolder\nend project_GetFolder"
      },
      "date": 1471082522987
    },
    {
      "item": {
        "type": "factory",
        "id": "549189a8853ee6db"
      },
      "id": "549189a8853ee6db",
      "type": "add",
      "after": "4d380c5f56b533a7",
      "date": 1471082540365
    },
    {
      "type": "edit",
      "id": "549189a8853ee6db",
      "item": {
        "type": "code",
        "id": "549189a8853ee6db",
        "text": "if projectFolder is empty then\n if exists (stack stackName) is false then return empty\n  put the project_FindFolder of stack stackName  into projectFolder\n   if projectFolder is empty then\n    return empty\n   end if\nend if"
      },
      "date": 1471082578856
    },
    {
      "type": "edit",
      "id": "549189a8853ee6db",
      "item": {
        "type": "code",
        "id": "549189a8853ee6db",
        "text": "if projectFolder is empty then\n  put the project_FindFolder of stack stackName  into projectFolder\nend if"
      },
      "date": 1471082612234
    },
    {
      "type": "edit",
      "id": "4d380c5f56b533a7",
      "item": {
        "type": "code",
        "id": "4d380c5f56b533a7",
        "text": "function project_GetFolder stackName, pSubFolderPath"
      },
      "date": 1471082731060
    },
    {
      "item": {
        "type": "factory",
        "id": "0411945ee66ff0ce"
      },
      "id": "0411945ee66ff0ce",
      "type": "add",
      "after": "549189a8853ee6db",
      "date": 1471082736150
    },
    {
      "type": "edit",
      "id": "0411945ee66ff0ce",
      "item": {
        "type": "code",
        "id": "0411945ee66ff0ce",
        "text": "put project_SearchForProjectFolder (stackName) into projectFolder\n "
      },
      "date": 1471082744621
    },
    {
      "type": "move",
      "order": [
        "f9ae09b06b1e6042",
        "a2aa8c18f11050bc",
        "73c37b846f89b664",
        "6f657290f337f89e",
        "5ed5929717079c77",
        "1b4d8d9378c6d8e7",
        "161ac668bc2e98fc",
        "4d380c5f56b533a7",
        "0411945ee66ff0ce",
        "549189a8853ee6db"
      ],
      "id": "0411945ee66ff0ce",
      "date": 1471082747020
    },
    {
      "item": {
        "type": "factory",
        "id": "4c0f6afb14131cc7"
      },
      "id": "4c0f6afb14131cc7",
      "type": "add",
      "after": "549189a8853ee6db",
      "date": 1471082753276
    },
    {
      "type": "move",
      "order": [
        "f9ae09b06b1e6042",
        "a2aa8c18f11050bc",
        "73c37b846f89b664",
        "6f657290f337f89e",
        "5ed5929717079c77",
        "1b4d8d9378c6d8e7",
        "161ac668bc2e98fc",
        "4d380c5f56b533a7",
        "4c0f6afb14131cc7",
        "0411945ee66ff0ce",
        "549189a8853ee6db"
      ],
      "id": "4c0f6afb14131cc7",
      "date": 1471082755375
    },
    {
      "type": "edit",
      "id": "4c0f6afb14131cc7",
      "item": {
        "type": "paragraph",
        "id": "4c0f6afb14131cc7",
        "text": "The first step is to fetch the project folder from the stored library array:"
      },
      "date": 1471082792255
    },
    {
      "type": "edit",
      "id": "4c0f6afb14131cc7",
      "item": {
        "type": "paragraph",
        "id": "4c0f6afb14131cc7",
        "text": "The first step is to fetch the project folder from the stored library array and return that if the folder exists:"
      },
      "date": 1471082820369
    },
    {
      "item": {
        "type": "factory",
        "id": "426d0d4218a89689"
      },
      "id": "426d0d4218a89689",
      "type": "add",
      "after": "549189a8853ee6db",
      "date": 1471082822917
    },
    {
      "type": "edit",
      "id": "426d0d4218a89689",
      "item": {
        "type": "code",
        "id": "426d0d4218a89689",
        "text": "put project_GetFolderFromArray (stackName, pSubFolderPath) into projectFolder"
      },
      "date": 1471082825459
    },
    {
      "type": "move",
      "order": [
        "f9ae09b06b1e6042",
        "a2aa8c18f11050bc",
        "73c37b846f89b664",
        "6f657290f337f89e",
        "5ed5929717079c77",
        "1b4d8d9378c6d8e7",
        "161ac668bc2e98fc",
        "4d380c5f56b533a7",
        "4c0f6afb14131cc7",
        "426d0d4218a89689",
        "0411945ee66ff0ce",
        "549189a8853ee6db"
      ],
      "id": "426d0d4218a89689",
      "date": 1471082828485
    },
    {
      "type": "remove",
      "id": "549189a8853ee6db",
      "date": 1471082848576
    },
    {
      "item": {
        "type": "factory",
        "id": "a846616400dfca16"
      },
      "id": "a846616400dfca16",
      "type": "add",
      "after": "0411945ee66ff0ce",
      "date": 1471082852777
    },
    {
      "type": "move",
      "order": [
        "f9ae09b06b1e6042",
        "a2aa8c18f11050bc",
        "73c37b846f89b664",
        "6f657290f337f89e",
        "5ed5929717079c77",
        "1b4d8d9378c6d8e7",
        "161ac668bc2e98fc",
        "4d380c5f56b533a7",
        "4c0f6afb14131cc7",
        "426d0d4218a89689",
        "a846616400dfca16",
        "0411945ee66ff0ce"
      ],
      "id": "a846616400dfca16",
      "date": 1471082854330
    },
    {
      "type": "edit",
      "id": "a846616400dfca16",
      "item": {
        "type": "paragraph",
        "id": "a846616400dfca16",
        "text": "If it does not exist we then try to find the project folder based on the naming conventions:"
      },
      "date": 1471082877546
    },
    {
      "type": "edit",
      "id": "a846616400dfca16",
      "item": {
        "type": "paragraph",
        "id": "a846616400dfca16",
        "text": "If it does not exist we then try to find the project folder based on the naming conventions by looking for a stack that has the same name as the project:"
      },
      "date": 1471082929207
    },
    {
      "item": {
        "type": "factory",
        "id": "067a2db89ef69cd6"
      },
      "id": "067a2db89ef69cd6",
      "type": "add",
      "after": "0411945ee66ff0ce",
      "date": 1471083022071
    },
    {
      "type": "edit",
      "id": "426d0d4218a89689",
      "item": {
        "type": "code",
        "id": "426d0d4218a89689",
        "text": "put project_GetFolderFromArray (projectName, pSubFolderPath) into projectFolder"
      },
      "date": 1471083150363
    },
    {
      "type": "edit",
      "id": "f9ae09b06b1e6042",
      "item": {
        "type": "paragraph",
        "id": "f9ae09b06b1e6042",
        "text": "This model wraps access to key project files and folders. This model is based around the idea of a [[Project Home Stack]], a disk based [[Project Array]], and a Project Naming Convention]]."
      },
      "date": 1471083323666
    },
    {
      "type": "edit",
      "id": "f9ae09b06b1e6042",
      "item": {
        "type": "paragraph",
        "id": "f9ae09b06b1e6042",
        "text": "This model wraps access to key project files and folders. This model is based around the idea of a [[Project Home Stack]], a disk based [[Project Array]], and a [[Project Naming Convention]]."
      },
      "date": 1471083328938
    },
    {
      "type": "edit",
      "id": "f9ae09b06b1e6042",
      "item": {
        "type": "paragraph",
        "id": "f9ae09b06b1e6042",
        "text": "This model wraps access to key project files and folders. This model is based around the idea of a toplevel [[Project Folder]] that contains a [[Project Home Stack]], a disk based [[Project Array]], and a series of [[Standard Project Folders]]."
      },
      "date": 1471083392570
    },
    {
      "type": "edit",
      "id": "f9ae09b06b1e6042",
      "item": {
        "type": "paragraph",
        "id": "f9ae09b06b1e6042",
        "text": "This model wraps access to key project files and folders. This model is based on a [[Project Naming Convention]], which specifies the names of files and folders inside of a single toplevel [[Project Folder]]."
      },
      "date": 1471083452949
    },
    {
      "type": "add",
      "id": "1dbfe9ca79df8e93",
      "item": {
        "type": "paragraph",
        "id": "1dbfe9ca79df8e93",
        "text": "This toplevel project folder contains a [[Project Home Stack]], a disk based [[Project Array]], and a series of [[Standard Project Folders]]."
      },
      "after": "f9ae09b06b1e6042",
      "date": 1471083473232
    },
    {
      "type": "remove",
      "id": "161ac668bc2e98fc",
      "date": 1471086551351
    },
    {
      "type": "edit",
      "id": "067a2db89ef69cd6",
      "item": {
        "type": "reference",
        "id": "067a2db89ef69cd6",
        "site": "lcw.livecode.world",
        "slug": "project-naming-convention",
        "title": "Project Naming Convention",
        "text": "Here is a list of naming conventions we use for projects:\n\n* A project has a home stack.\n* The home stack is often a script only stack, but this is not required.\n* The short name of the homestack is the name of the project.\n* The short file of the homestack is the name of the project followed by \".livecode\" (eg \"lcw.livecode\").\n* We use the \".livecode\" regardless of whether the stack is a script only stack to make it easier to derive the path from the project name and therfore locate.\n* The short file of the homestack is in lower case (eg \"lcw.livecode\" not \"LCW.livecode\")\n"
      },
      "date": 1471086561587
    },
    {
      "type": "edit",
      "id": "067a2db89ef69cd6",
      "item": {
        "type": "reference",
        "id": "067a2db89ef69cd6",
        "site": "lcw.livecode.world",
        "slug": "project-naming-convention",
        "title": "Project Naming Convention",
        "text": "Projects are designed to be as simple as possible. A single folder containing a [[project home stack]], a [[Project Array]], and a series of [[Standard Project Folders]]. These folders and files conform to the a simple naming convention."
      },
      "date": 1471086777075
    },
    {
      "type": "move",
      "order": [
        "f9ae09b06b1e6042",
        "1dbfe9ca79df8e93",
        "a2aa8c18f11050bc",
        "73c37b846f89b664",
        "6f657290f337f89e",
        "5ed5929717079c77",
        "067a2db89ef69cd6",
        "1b4d8d9378c6d8e7",
        "4d380c5f56b533a7",
        "4c0f6afb14131cc7",
        "426d0d4218a89689",
        "a846616400dfca16",
        "0411945ee66ff0ce"
      ],
      "id": "067a2db89ef69cd6",
      "date": 1471086784537
    },
    {
      "type": "remove",
      "id": "1b4d8d9378c6d8e7",
      "date": 1471086786879
    },
    {
      "type": "edit",
      "id": "6f657290f337f89e",
      "item": {
        "type": "paragraph",
        "id": "6f657290f337f89e",
        "text": "There are several ways of finding the project home stack:"
      },
      "date": 1471171409899
    },
    {
      "type": "edit",
      "id": "5ed5929717079c77",
      "item": {
        "type": "code",
        "id": "5ed5929717079c77",
        "text": "put the name of stack projectName"
      },
      "date": 1471171436091
    }
  ]
}