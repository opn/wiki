{
  "title": "Ideas behind Micro Frontends",
  "story": [
    {
      "type": "paragraph",
      "id": "37755aedf7e63e79",
      "text": "Here we look at the core ideas behind [[Micro Frontends]]. Let's discuss these and see how they compare to the existing [[Wiki Client]], and how this may be used for [[Platform Earth Frontends]]."
    },
    {
      "type": "markdown",
      "id": "e0efdcb381d5ad31",
      "text": "- [[Be Technology Agnostic]]\nEach team should be able to choose and upgrade their stack without having to coordinate with other teams. Custom Elements are a great way to hide implementation details while providing a neutral interface to others.\n\n"
    },
    {
      "type": "markdown",
      "id": "658edbe6eb84efd4",
      "text": "- [[Isolate Team Code]]\nDon’t share a runtime, even if all teams use the same framework. Build independent apps that are self contained. Don’t rely on shared state or global variables.\n\n"
    },
    {
      "type": "markdown",
      "id": "dbba465093948fae",
      "text": "- [[Establish Team Prefixes]]\nAgree on naming conventions where isolation is not possible yet. Namespace CSS, Events, Local Storage and Cookies to avoid collisions and clarify ownership.\nFavor Native Browser Features over Custom APIs\nUse Browser Events for communication instead of building a global PubSub system. If you really have to build a cross team API, try keeping it as simple as possible.\n\n"
    },
    {
      "type": "markdown",
      "id": "c2f9400803e816cf",
      "text": "- [[Build a Resilient Site]]\nYour feature should be useful, even if JavaScript failed or hasn’t executed yet. Use Universal Rendering and Progressive Enhancement to improve perceived performance.\n\n"
    },
    {
      "type": "markdown",
      "id": "cafe4d0f319e89ee",
      "text": "- [[The DOM is the API]]\nCustom Elements, the interoperability aspect from the Web Components Spec, are a good primitive for integration in the browser. Each team builds their component using their web technology of choice and wraps it inside a Custom Element (e.g. <order-minicart></order-minicart>). The DOM specification of this particular element (tag-name, attributes & events) acts as the contract or public API for other teams. The advantage is that they can use the component and its functionality without having to know the implementation. They just have to be able to interact with the DOM."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Ideas behind Micro Frontends",
        "story": []
      },
      "date": 1520169844559
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "e0efdcb381d5ad31",
        "text": "- [[Be Technology Agnostic]]\nEach team should be able to choose and upgrade their stack without having to coordinate with other teams. Custom Elements are a great way to hide implementation details while providing a neutral interface to others.\n- [[Isolate Team Code]]\nDon’t share a runtime, even if all teams use the same framework. Build independent apps that are self contained. Don’t rely on shared state or global variables.\n- [[Establish Team Prefixes]]\nAgree on naming conventions where isolation is not possible yet. Namespace CSS, Events, Local Storage and Cookies to avoid collisions and clarify ownership.\nFavor Native Browser Features over Custom APIs\nUse Browser Events for communication instead of building a global PubSub system. If you really have to build a cross team API, try keeping it as simple as possible.\n- [[Build a Resilient Site]]\nYour feature should be useful, even if JavaScript failed or hasn’t executed yet. Use Universal Rendering and Progressive Enhancement to improve perceived performance.\n- [[The DOM is the API]]\nCustom Elements, the interoperability aspect from the Web Components Spec, are a good primitive for integration in the browser. Each team builds their component using their web technology of choice and wraps it inside a Custom Element (e.g. <order-minicart></order-minicart>). The DOM specification of this particular element (tag-name, attributes & events) acts as the contract or public API for other teams. The advantage is that they can use the component and its functionality without having to know the implementation. They just have to be able to interact with the DOM."
      },
      "id": "e0efdcb381d5ad31",
      "date": 1520169848328
    },
    {
      "item": {
        "type": "factory",
        "id": "37755aedf7e63e79"
      },
      "id": "37755aedf7e63e79",
      "type": "add",
      "after": "e0efdcb381d5ad31",
      "date": 1520169898755
    },
    {
      "type": "move",
      "order": [
        "37755aedf7e63e79",
        "e0efdcb381d5ad31"
      ],
      "id": "37755aedf7e63e79",
      "date": 1520169900233
    },
    {
      "type": "edit",
      "id": "e0efdcb381d5ad31",
      "item": {
        "type": "markdown",
        "id": "e0efdcb381d5ad31",
        "text": "- [[Be Technology Agnostic]]\nEach team should be able to choose and upgrade their stack without having to coordinate with other teams. Custom Elements are a great way to hide implementation details while providing a neutral interface to others.\n\n"
      },
      "date": 1520169908784
    },
    {
      "type": "add",
      "id": "658edbe6eb84efd4",
      "item": {
        "type": "markdown",
        "id": "658edbe6eb84efd4",
        "text": "- [[Isolate Team Code]]\nDon’t share a runtime, even if all teams use the same framework. Build independent apps that are self contained. Don’t rely on shared state or global variables.\n\n"
      },
      "after": "e0efdcb381d5ad31",
      "date": 1520169910914
    },
    {
      "type": "add",
      "id": "dbba465093948fae",
      "item": {
        "type": "markdown",
        "id": "dbba465093948fae",
        "text": "- [[Establish Team Prefixes]]\nAgree on naming conventions where isolation is not possible yet. Namespace CSS, Events, Local Storage and Cookies to avoid collisions and clarify ownership.\nFavor Native Browser Features over Custom APIs\nUse Browser Events for communication instead of building a global PubSub system. If you really have to build a cross team API, try keeping it as simple as possible.\n\n"
      },
      "after": "658edbe6eb84efd4",
      "date": 1520169913672
    },
    {
      "type": "add",
      "id": "c2f9400803e816cf",
      "item": {
        "type": "markdown",
        "id": "c2f9400803e816cf",
        "text": "- [[Build a Resilient Site]]\nYour feature should be useful, even if JavaScript failed or hasn’t executed yet. Use Universal Rendering and Progressive Enhancement to improve perceived performance.\n\n"
      },
      "after": "dbba465093948fae",
      "date": 1520169915947
    },
    {
      "type": "add",
      "id": "cafe4d0f319e89ee",
      "item": {
        "type": "markdown",
        "id": "cafe4d0f319e89ee",
        "text": "- [[The DOM is the API]]\nCustom Elements, the interoperability aspect from the Web Components Spec, are a good primitive for integration in the browser. Each team builds their component using their web technology of choice and wraps it inside a Custom Element (e.g. <order-minicart></order-minicart>). The DOM specification of this particular element (tag-name, attributes & events) acts as the contract or public API for other teams. The advantage is that they can use the component and its functionality without having to know the implementation. They just have to be able to interact with the DOM."
      },
      "after": "c2f9400803e816cf",
      "date": 1520169919880
    },
    {
      "type": "edit",
      "id": "37755aedf7e63e79",
      "item": {
        "type": "paragraph",
        "id": "37755aedf7e63e79",
        "text": "Here we look at the core ideas behind [[Micro Frontends]]. Let's discuss these and see how they compare to the existing [[Wiki Client]], and how this may be used for [[PlatformEarth Forontends]]."
      },
      "date": 1520171283435
    },
    {
      "type": "edit",
      "id": "37755aedf7e63e79",
      "item": {
        "type": "paragraph",
        "id": "37755aedf7e63e79",
        "text": "Here we look at the core ideas behind [[Micro Frontends]]. Let's discuss these and see how they compare to the existing [[Wiki Client]], and how this may be used for [[PlatformEarth Frontends]]."
      },
      "date": 1520171623301
    },
    {
      "type": "edit",
      "id": "37755aedf7e63e79",
      "item": {
        "type": "paragraph",
        "id": "37755aedf7e63e79",
        "text": "Here we look at the core ideas behind [[Micro Frontends]]. Let's discuss these and see how they compare to the existing [[Wiki Client]], and how this may be used for [[Platform Earth Frontends]]."
      },
      "date": 1520171631574
    }
  ]
}