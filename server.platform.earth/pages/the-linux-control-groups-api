{
  "title": "The Linux Control Groups API",
  "story": [
    {
      "type": "markdown",
      "id": "08367e44a6e98667",
      "text": "Understanding the new control groups API [https://lwn.net/Articles/679786/ page]"
    },
    {
      "type": "video",
      "id": "147cf50ac9e1d512",
      "text": "YOUTUBE zMJD8PJKoYQ\nRami Rosen - Namespaces and CGroups, the basis of Linux containers\n"
    },
    {
      "type": "markdown",
      "id": "9c7adcacfae907d9",
      "text": "The latest version of the Linux kernel has moved to a security model that is similar to an object capabilities model. It's known as Control Groups and contains two components: control groups and namespaces.\n\nUsing control groups and namespaces, the Linux kernel makes physical kernel resources visible to process and available for allocation and use during program execution. For example, programs allocate memory during execution and the memory must be managed by the kernel, so during process initialization the Linux kernel uses a memory namespace to control the memory allocations visible to the new process.\n\nTogether, Linux control groups and namespaces form a very capability-like API. "
    },
    {
      "type": "markdown",
      "id": "7452fc766075f22f",
      "text": "Exposing this API to users, who want to write software to perform resource management on programs. [http://pyrofex.net/docs/pyr8_jsapi_v1alpha1/cgroup.html deadpage]\n"
    },
    {
      "type": "markdown",
      "id": "c288a48b7a8c8592",
      "text": "Enabling the Control Group API\n\nIn a typical pyr8 deployment, only a small number of processes have the control group API enabled. It can be enabled by passing the --with-cgroup flag as shown.\n\nbash pyr8 --with-cgroup ...\n"
    },
    {
      "type": "markdown",
      "id": "876b6af7b2d1733d",
      "text": "Processes that need to manage cgroups for other processes and partition resources for a physical system need to be run with CAP_SYS_ADMIN, typically by running them as root.\n\nThe Control Group Class\n\nMethods\n\n- cap(): capability<utils>\nReturns a C++-backed capability object for this database object.\n\n- dir(): capability<Directory>\nReturns a C++-backed capability object for the control group directory on the filesystem.\n\n- fork(capability<File> binary, list<string> args, Map env): capability<Process>\nReturns a C++-backed capability object for a process spawned in this control group."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "The Linux Control Groups API",
        "story": []
      },
      "date": 1518650876782
    },
    {
      "item": {
        "type": "factory",
        "id": "9c7adcacfae907d9"
      },
      "id": "9c7adcacfae907d9",
      "type": "add",
      "date": 1518650878791
    },
    {
      "type": "edit",
      "id": "9c7adcacfae907d9",
      "item": {
        "type": "markdown",
        "id": "9c7adcacfae907d9",
        "text": "The Linux Control Groups API\nThe latest version of the Linux kernel has moved to a security model that is similar to pyr8âs object capabilities model. It's known as âControl Groupsâ and contains two components: control groups and namespaces.\n\nUsing control groups and namespaces, the Linux kernel makes physical kernel resources visible to process and available for allocation and use during program execution. For example, programs allocate memory during execution and the memory must be managed by the kernel, so during process initialization the Linux kernel uses a memory namespace to control the memory allocations visible to the new process.\n\nTogether, Linuxâs control groups and namespaces form a very capability-like API and pyr8 exposes that API to users, who want to write software to perform resource management on pyr8 programs."
      },
      "date": 1518650918798
    },
    {
      "type": "edit",
      "id": "9c7adcacfae907d9",
      "item": {
        "type": "markdown",
        "id": "9c7adcacfae907d9",
        "text": "The latest version of the Linux kernel has moved to a security model that is similar to pyr8âs object capabilities model. It's known as âControl Groupsâ and contains two components: control groups and namespaces.\n\nUsing control groups and namespaces, the Linux kernel makes physical kernel resources visible to process and available for allocation and use during program execution. For example, programs allocate memory during execution and the memory must be managed by the kernel, so during process initialization the Linux kernel uses a memory namespace to control the memory allocations visible to the new process.\n\nTogether, Linuxâs control groups and namespaces form a very capability-like API and pyr8 exposes that API to users, who want to write software to perform resource management on pyr8 programs."
      },
      "date": 1518650961078
    },
    {
      "type": "edit",
      "id": "9c7adcacfae907d9",
      "item": {
        "type": "markdown",
        "id": "9c7adcacfae907d9",
        "text": "The latest version of the Linux kernel has moved to a security model that is similar to an object capabilities model. It's known as Control Groups and contains two components: control groups and namespaces.\n\nUsing control groups and namespaces, the Linux kernel makes physical kernel resources visible to process and available for allocation and use during program execution. For example, programs allocate memory during execution and the memory must be managed by the kernel, so during process initialization the Linux kernel uses a memory namespace to control the memory allocations visible to the new process.\n\nTogether, Linuxâs control groups and namespaces form a very capability-like API and pyr8 exposes that API to users, who want to write software to perform resource management on pyr8 programs."
      },
      "date": 1518650991798
    },
    {
      "type": "edit",
      "id": "9c7adcacfae907d9",
      "item": {
        "type": "markdown",
        "id": "9c7adcacfae907d9",
        "text": "The latest version of the Linux kernel has moved to a security model that is similar to an object capabilities model. It's known as Control Groups and contains two components: control groups and namespaces.\n\nUsing control groups and namespaces, the Linux kernel makes physical kernel resources visible to process and available for allocation and use during program execution. For example, programs allocate memory during execution and the memory must be managed by the kernel, so during process initialization the Linux kernel uses a memory namespace to control the memory allocations visible to the new process.\n\nTogether, Linux control groups and namespaces form a very capability-like API and pyr8 exposes that API to users, who want to write software to perform resource management on pyr8 programs."
      },
      "date": 1518651035974
    },
    {
      "type": "edit",
      "id": "9c7adcacfae907d9",
      "item": {
        "type": "markdown",
        "id": "9c7adcacfae907d9",
        "text": "The latest version of the Linux kernel has moved to a security model that is similar to an object capabilities model. It's known as Control Groups and contains two components: control groups and namespaces.\n\nUsing control groups and namespaces, the Linux kernel makes physical kernel resources visible to process and available for allocation and use during program execution. For example, programs allocate memory during execution and the memory must be managed by the kernel, so during process initialization the Linux kernel uses a memory namespace to control the memory allocations visible to the new process.\n\nTogether, Linux control groups and namespaces form a very capability-like API and pyr8 exposes that API to users, who want to write software to perform resource management on pyr8 programs. [http://pyrofex.net/docs/pyr8_jsapi_v1alpha1/cgroup.html page]"
      },
      "date": 1518651059759
    },
    {
      "type": "edit",
      "id": "9c7adcacfae907d9",
      "item": {
        "type": "markdown",
        "id": "9c7adcacfae907d9",
        "text": "The latest version of the Linux kernel has moved to a security model that is similar to an object capabilities model. It's known as Control Groups and contains two components: control groups and namespaces.\n\nUsing control groups and namespaces, the Linux kernel makes physical kernel resources visible to process and available for allocation and use during program execution. For example, programs allocate memory during execution and the memory must be managed by the kernel, so during process initialization the Linux kernel uses a memory namespace to control the memory allocations visible to the new process.\n\nTogether, Linux control groups and namespaces form a very capability-like API and pyr8 exposes that API to users, who want to write software to perform resource management on pyr8 programs. [http://pyrofex.net/docs/pyr8_jsapi_v1alpha1/cgroup.html page]\n"
      },
      "date": 1524547523536
    },
    {
      "type": "add",
      "id": "b98ff6d74075c82f",
      "item": {
        "type": "markdown",
        "id": "b98ff6d74075c82f",
        "text": "[https://lwn.net/Articles/679786/ ]"
      },
      "after": "9c7adcacfae907d9",
      "date": 1524547536756
    },
    {
      "type": "add",
      "id": "08367e44a6e98667",
      "item": {
        "type": "markdown",
        "id": "08367e44a6e98667",
        "text": "Understanding the new control groups API []"
      },
      "after": "9c7adcacfae907d9",
      "date": 1524547579553
    },
    {
      "type": "edit",
      "id": "08367e44a6e98667",
      "item": {
        "type": "markdown",
        "id": "08367e44a6e98667",
        "text": "Understanding the new control groups API [https://lwn.net/Articles/679786/ page]"
      },
      "date": 1524547594638
    },
    {
      "type": "remove",
      "id": "b98ff6d74075c82f",
      "date": 1524547606163
    },
    {
      "item": {
        "type": "factory",
        "id": "147cf50ac9e1d512"
      },
      "id": "147cf50ac9e1d512",
      "type": "add",
      "after": "08367e44a6e98667",
      "date": 1524547607887
    },
    {
      "type": "edit",
      "id": "147cf50ac9e1d512",
      "item": {
        "type": "video",
        "id": "147cf50ac9e1d512",
        "text": "YOUTUBE zMJD8PJKoYQ\n(double-click to edit caption)\n"
      },
      "date": 1524547646357
    },
    {
      "type": "edit",
      "id": "147cf50ac9e1d512",
      "item": {
        "type": "video",
        "id": "147cf50ac9e1d512",
        "text": "YOUTUBE zMJD8PJKoYQ\nRami Rosen - Namespaces and CGroups, the basis of Linux containers\n"
      },
      "date": 1524547687496
    },
    {
      "type": "edit",
      "id": "9c7adcacfae907d9",
      "item": {
        "type": "markdown",
        "id": "9c7adcacfae907d9",
        "text": "The latest version of the Linux kernel has moved to a security model that is similar to an object capabilities model. It's known as Control Groups and contains two components: control groups and namespaces.\n\nUsing control groups and namespaces, the Linux kernel makes physical kernel resources visible to process and available for allocation and use during program execution. For example, programs allocate memory during execution and the memory must be managed by the kernel, so during process initialization the Linux kernel uses a memory namespace to control the memory allocations visible to the new process.\n\nTogether, Linux control groups and namespaces form a very capability-like API. Exposing this API to users, who want to write software to perform resource management on programs. [http://pyrofex.net/docs/pyr8_jsapi_v1alpha1/cgroup.html page]\n"
      },
      "date": 1524547767565
    },
    {
      "type": "add",
      "id": "c288a48b7a8c8592",
      "item": {
        "type": "markdown",
        "id": "c288a48b7a8c8592",
        "text": "Enabling the Control Group API\n\nIn a typical pyr8 deployment, only a small number of processes have the control group API enabled. It can be enabled by passing the --with-cgroup flag as shown.\n\nbash pyr8 --with-cgroup ...\n"
      },
      "after": "9c7adcacfae907d9",
      "date": 1524547900695
    },
    {
      "type": "add",
      "id": "876b6af7b2d1733d",
      "item": {
        "type": "markdown",
        "id": "876b6af7b2d1733d",
        "text": "Processes that need to manage cgroups for other processes and partition resources for a physical system need to be run with CAP_SYS_ADMIN, typically by running them as root.\n\nThe Control Group Class\n\nMethods\ncap(): capability<utils>\nReturns a C++-backed capability object for this database object.\ndir(): capability<Directory>\nReturns a C++-backed capability object for the control groupâs directory on the filesystem.\nfork(capability<File> binary, list<string> args, Map env): capability<Process>\nReturns a C++-backed capability object for a process spawned in this control group."
      },
      "after": "c288a48b7a8c8592",
      "date": 1524547918013
    },
    {
      "type": "edit",
      "id": "876b6af7b2d1733d",
      "item": {
        "type": "markdown",
        "id": "876b6af7b2d1733d",
        "text": "Processes that need to manage cgroups for other processes and partition resources for a physical system need to be run with CAP_SYS_ADMIN, typically by running them as root.\n\nThe Control Group Class\n\nMethods\n\ncap(): capability<utils>\nReturns a C++-backed capability object for this database object.\n\ndir(): capability<Directory>\nReturns a C++-backed capability object for the control groupâs directory on the filesystem.\n\nfork(capability<File> binary, list<string> args, Map env): capability<Process>\nReturns a C++-backed capability object for a process spawned in this control group."
      },
      "date": 1524547937614
    },
    {
      "type": "move",
      "order": [
        "9c7adcacfae907d9",
        "08367e44a6e98667",
        "c288a48b7a8c8592",
        "876b6af7b2d1733d",
        "147cf50ac9e1d512"
      ],
      "id": "08367e44a6e98667",
      "date": 1524547964820
    },
    {
      "type": "move",
      "order": [
        "9c7adcacfae907d9",
        "08367e44a6e98667",
        "147cf50ac9e1d512",
        "c288a48b7a8c8592",
        "876b6af7b2d1733d"
      ],
      "id": "147cf50ac9e1d512",
      "date": 1524547972798
    },
    {
      "type": "edit",
      "id": "876b6af7b2d1733d",
      "item": {
        "type": "markdown",
        "id": "876b6af7b2d1733d",
        "text": "Processes that need to manage cgroups for other processes and partition resources for a physical system need to be run with CAP_SYS_ADMIN, typically by running them as root.\n\nThe Control Group Class\n\nMethods\n\ncap(): capability<utils>\nReturns a C++-backed capability object for this database object.\n\ndir(): capability<Directory>\nReturns a C++-backed capability object for the control group directory on the filesystem.\n\nfork(capability<File> binary, list<string> args, Map env): capability<Process>\nReturns a C++-backed capability object for a process spawned in this control group."
      },
      "date": 1524548042094
    },
    {
      "type": "edit",
      "id": "9c7adcacfae907d9",
      "item": {
        "type": "markdown",
        "id": "9c7adcacfae907d9",
        "text": "The latest version of the Linux kernel has moved to a security model that is similar to an object capabilities model. It's known as Control Groups and contains two components: control groups and namespaces.\n\nUsing control groups and namespaces, the Linux kernel makes physical kernel resources visible to process and available for allocation and use during program execution. For example, programs allocate memory during execution and the memory must be managed by the kernel, so during process initialization the Linux kernel uses a memory namespace to control the memory allocations visible to the new process.\n\nTogether, Linux control groups and namespaces form a very capability-like API. "
      },
      "date": 1524548144374
    },
    {
      "item": {
        "type": "factory",
        "id": "7452fc766075f22f"
      },
      "id": "7452fc766075f22f",
      "type": "add",
      "after": "876b6af7b2d1733d",
      "date": 1524548151885
    },
    {
      "type": "edit",
      "id": "7452fc766075f22f",
      "item": {
        "type": "markdown",
        "id": "7452fc766075f22f",
        "text": "Exposing this API to users, who want to write software to perform resource management on programs. [http://pyrofex.net/docs/pyr8_jsapi_v1alpha1/cgroup.html page]\n"
      },
      "date": 1524548158099
    },
    {
      "type": "move",
      "order": [
        "9c7adcacfae907d9",
        "08367e44a6e98667",
        "147cf50ac9e1d512",
        "7452fc766075f22f",
        "c288a48b7a8c8592",
        "876b6af7b2d1733d"
      ],
      "id": "7452fc766075f22f",
      "date": 1524548161260
    },
    {
      "type": "edit",
      "id": "876b6af7b2d1733d",
      "item": {
        "type": "markdown",
        "id": "876b6af7b2d1733d",
        "text": "Processes that need to manage cgroups for other processes and partition resources for a physical system need to be run with CAP_SYS_ADMIN, typically by running them as root.\n\nThe Control Group Class\n\nMethods\n\n- cap(): capability<utils>\nReturns a C++-backed capability object for this database object.\n\n- dir(): capability<Directory>\nReturns a C++-backed capability object for the control group directory on the filesystem.\n\n- fork(capability<File> binary, list<string> args, Map env): capability<Process>\nReturns a C++-backed capability object for a process spawned in this control group."
      },
      "date": 1524548187835
    },
    {
      "type": "move",
      "order": [
        "08367e44a6e98667",
        "9c7adcacfae907d9",
        "147cf50ac9e1d512",
        "7452fc766075f22f",
        "c288a48b7a8c8592",
        "876b6af7b2d1733d"
      ],
      "id": "08367e44a6e98667",
      "date": 1524548207985
    },
    {
      "type": "move",
      "order": [
        "08367e44a6e98667",
        "147cf50ac9e1d512",
        "9c7adcacfae907d9",
        "7452fc766075f22f",
        "c288a48b7a8c8592",
        "876b6af7b2d1733d"
      ],
      "id": "147cf50ac9e1d512",
      "date": 1524548217619
    },
    {
      "type": "edit",
      "id": "7452fc766075f22f",
      "item": {
        "type": "markdown",
        "id": "7452fc766075f22f",
        "text": "Exposing this API to users, who want to write software to perform resource management on programs. [http://pyrofex.net/docs/pyr8_jsapi_v1alpha1/cgroup.html deadpage]\n"
      },
      "date": 1524584323693
    },
    {
      "type": "fork",
      "site": "clive.tries.fed.wiki",
      "date": 1525326558334
    }
  ]
}