{
  "title": "Abstract syntax tree",
  "journal": [
    {
      "date": 1524121965789,
      "type": "create",
      "item": {
        "story": "",
        "title": "Abstract syntax tree"
      }
    },
    {
      "type": "fork",
      "date": 1524121954616
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ec68564b89a673e0",
        "text": "# Coco/R\n"
      },
      "after": "34ad73ce-eba4-436a-82fa-14c13481a9c0",
      "id": "ec68564b89a673e0",
      "date": 1524122435143
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "18b5a9a37f239818",
        "text": "Coco/R is a compiler generator, which takes an attributed grammar of a source language and generates a scanner and a parser for this language. The scanner works as a deterministic finite automaton. The parser uses recursive descent. LL(1) conflicts can be resolved by a multi-symbol lookahead or by semantic checks. Thus the class of accepted grammars is LL(k) for an arbitrary k.\n\nThere are versions of Coco/R for different languages (see below). The latest versions from the University of Linz are those for C#, Java and C++, which can be downloaded from - [http://www.ssw.uni-linz.ac.at/coco/ uni-linz.ac.at]"
      },
      "after": "ec68564b89a673e0",
      "id": "18b5a9a37f239818",
      "date": 1524122438489
    },
    {
      "type": "edit",
      "id": "e99cd725-0a8f-4e15-8dfd-ec504e22c3db",
      "item": {
        "type": "paragraph",
        "id": "e99cd725-0a8f-4e15-8dfd-ec504e22c3db",
        "text": "In computer science, an abstract syntax tree (AST), or just syntax tree, is a tree representation of the abstract syntactic structure of source code written in a programming language. Each node of the tree denotes a construct occurring in the source code. The syntax is \"abstract\" in not representing every detail appearing in the real syntax. - [https://en.wikipedia.org/wiki/Abstract_syntax_tree wikipedia]"
      },
      "date": 1524122452497
    },
    {
      "type": "add",
      "id": "2fee3de3483e54a9",
      "item": {
        "type": "paragraph",
        "id": "2fee3de3483e54a9",
        "text": "For instance, grouping parentheses are implicit in the tree structure, and a syntactic construct like an if-condition-then expression may be denoted by means of a single node with three branches."
      },
      "after": "e99cd725-0a8f-4e15-8dfd-ec504e22c3db",
      "date": 1524122453887
    },
    {
      "type": "edit",
      "id": "e99cd725-0a8f-4e15-8dfd-ec504e22c3db",
      "item": {
        "type": "paragraph",
        "id": "e99cd725-0a8f-4e15-8dfd-ec504e22c3db",
        "text": "In computer science, an abstract syntax tree (AST), or just syntax tree, is a tree representation of the abstract syntactic structure of source code written in a programming language. Each node of the tree denotes a construct occurring in the source code. The syntax is \"abstract\" in not representing every detail appearing in the real syntax - [https://en.wikipedia.org/wiki/Abstract_syntax_tree wikipedia]"
      },
      "date": 1524122459261
    },
    {
      "type": "move",
      "order": [
        "e99cd725-0a8f-4e15-8dfd-ec504e22c3db",
        "34ad73ce-eba4-436a-82fa-14c13481a9c0",
        "2fee3de3483e54a9",
        "ec68564b89a673e0",
        "18b5a9a37f239818",
        "13c353cd-a51f-453f-9166-a53dfdd305b1",
        "0f1bfa95-e5bf-41ca-9c6a-e903d4f6f00d",
        "b1ff0d8e-8a20-440b-9896-2e965aa265de",
        "32f6e032-2195-44a9-98a3-b1a477e6c8bc",
        "1cbeb235-0446-452d-b4bc-c0ac84ed7d52",
        "3ea70e0a-a130-4389-a1bd-e885e43aea01"
      ],
      "id": "2fee3de3483e54a9",
      "date": 1524122461384
    },
    {
      "type": "add",
      "id": "88bd0cb887ff6b01",
      "item": {
        "type": "paragraph",
        "id": "88bd0cb887ff6b01",
        "text": "# Some learning to do"
      },
      "after": "2fee3de3483e54a9",
      "date": 1524122477992
    },
    {
      "type": "add",
      "id": "5d38efcd7785da60",
      "item": {
        "type": "paragraph",
        "id": "5d38efcd7785da60",
        "text": "Here I'm starting some research on how to create an abstract syntax tree from source code. Perhaps we need a compiler generator like Coc."
      },
      "after": "88bd0cb887ff6b01",
      "date": 1524122551120
    },
    {
      "type": "edit",
      "id": "88bd0cb887ff6b01",
      "item": {
        "type": "markdown",
        "id": "88bd0cb887ff6b01",
        "text": "# Some learning to do"
      },
      "date": 1524122553038
    },
    {
      "type": "edit",
      "id": "5d38efcd7785da60",
      "item": {
        "type": "paragraph",
        "id": "5d38efcd7785da60",
        "text": "Here I'm starting some research on how to create an abstract syntax tree from source code. Perhaps we need a compiler generator like Coco."
      },
      "date": 1524122557193
    },
    {
      "type": "edit",
      "id": "5d38efcd7785da60",
      "item": {
        "type": "paragraph",
        "id": "5d38efcd7785da60",
        "text": "Here I'm starting some research on how to create an abstract syntax tree from source code. Perhaps we need a compiler generator like Coco - [https://stackoverflow.com/questions/1721553/how-to-construct-an-abstract-syntax-tree stackoverflow]"
      },
      "date": 1524122811337
    },
    {
      "type": "add",
      "id": "b6883efdd7929544",
      "item": {
        "type": "paragraph",
        "id": "b6883efdd7929544",
        "text": "- https://ruslanspivak.com/lsbasi-part7/"
      },
      "after": "5d38efcd7785da60",
      "date": 1524122977697
    },
    {
      "type": "edit",
      "id": "b6883efdd7929544",
      "item": {
        "type": "markdown",
        "id": "b6883efdd7929544",
        "text": "- https://ruslanspivak.com/lsbasi-part7/"
      },
      "date": 1524122979092
    },
    {
      "type": "edit",
      "id": "b6883efdd7929544",
      "item": {
        "type": "markdown",
        "id": "b6883efdd7929544",
        "text": "- https://ruslanspivak.com/lsbasi-part7/\n- [https://www.amazon.com/gp/product/193435645X/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=193435645X&linkCode=as2&tag=russblo0b-20&linkId=MP4DCXDV6DJMEJBL amazon]"
      },
      "date": 1524123052651
    },
    {
      "type": "edit",
      "id": "b6883efdd7929544",
      "item": {
        "type": "markdown",
        "id": "b6883efdd7929544",
        "text": "- https://ruslanspivak.com/lsbasi-part7/\n- Language Implementation Patterns - [https://www.amazon.com/gp/product/193435645X/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=193435645X&linkCode=as2&tag=russblo0b-20&linkId=MP4DCXDV6DJMEJBL amazon]"
      },
      "date": 1524123074461
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "e99cd725-0a8f-4e15-8dfd-ec504e22c3db",
      "text": "In computer science, an abstract syntax tree (AST), or just syntax tree, is a tree representation of the abstract syntactic structure of source code written in a programming language. Each node of the tree denotes a construct occurring in the source code. The syntax is \"abstract\" in not representing every detail appearing in the real syntax - [https://en.wikipedia.org/wiki/Abstract_syntax_tree wikipedia]"
    },
    {
      "type": "html",
      "id": "34ad73ce-eba4-436a-82fa-14c13481a9c0",
      "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;'>\n<a href='https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Abstract_syntax_tree_for_Euclidean_algorithm.svg/284px-Abstract_syntax_tree_for_Euclidean_algorithm.svg.png' target='_blank'>\n<img style='display:block; margin:auto; width:100%;'\nsrc='https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Abstract_syntax_tree_for_Euclidean_algorithm.svg/284px-Abstract_syntax_tree_for_Euclidean_algorithm.svg.png'>\n</a>\n\n<p class=caption>\nAbstract syntax tree. tree representation of the abstract syntactic structure of source code\n- [https://upload.wikimedia.org/wikipedia/commons/c/c7/Abstract_syntax_tree_for_Euclidean_algorithm.svg wikimedia.org]\n</p></div>"
    },
    {
      "type": "paragraph",
      "id": "2fee3de3483e54a9",
      "text": "For instance, grouping parentheses are implicit in the tree structure, and a syntactic construct like an if-condition-then expression may be denoted by means of a single node with three branches."
    },
    {
      "type": "markdown",
      "id": "88bd0cb887ff6b01",
      "text": "# Some learning to do"
    },
    {
      "type": "paragraph",
      "id": "5d38efcd7785da60",
      "text": "Here I'm starting some research on how to create an abstract syntax tree from source code. Perhaps we need a compiler generator like Coco - [https://stackoverflow.com/questions/1721553/how-to-construct-an-abstract-syntax-tree stackoverflow]"
    },
    {
      "type": "markdown",
      "id": "b6883efdd7929544",
      "text": "- https://ruslanspivak.com/lsbasi-part7/\n- Language Implementation Patterns - [https://www.amazon.com/gp/product/193435645X/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=193435645X&linkCode=as2&tag=russblo0b-20&linkId=MP4DCXDV6DJMEJBL amazon]"
    },
    {
      "type": "markdown",
      "id": "ec68564b89a673e0",
      "text": "# Coco/R\n"
    },
    {
      "type": "markdown",
      "id": "18b5a9a37f239818",
      "text": "Coco/R is a compiler generator, which takes an attributed grammar of a source language and generates a scanner and a parser for this language. The scanner works as a deterministic finite automaton. The parser uses recursive descent. LL(1) conflicts can be resolved by a multi-symbol lookahead or by semantic checks. Thus the class of accepted grammars is LL(k) for an arbitrary k.\n\nThere are versions of Coco/R for different languages (see below). The latest versions from the University of Linz are those for C#, Java and C++, which can be downloaded from - [http://www.ssw.uni-linz.ac.at/coco/ uni-linz.ac.at]"
    },
    {
      "type": "markdown",
      "id": "13c353cd-a51f-453f-9166-a53dfdd305b1",
      "text": "# Sections"
    },
    {
      "type": "html",
      "id": "0f1bfa95-e5bf-41ca-9c6a-e903d4f6f00d",
      "text": "<form action='https://rest.livecode.world/mediawiki/importSection'><input name=section_title size=60 value='Application_in_compilers'>\n<input name=url type=hidden value='https://en.wikipedia.org/w/index.php?title=Abstract syntax tree&action=edit&section=1'>\n<input type=submit value=create></form>"
    },
    {
      "type": "html",
      "id": "b1ff0d8e-8a20-440b-9896-2e965aa265de",
      "text": "<form action='https://rest.livecode.world/mediawiki/importSection'><input name=section_title size=60 value='Unified_AST'>\n<input name=url type=hidden value='https://en.wikipedia.org/w/index.php?title=Abstract syntax tree&action=edit&section=6'>\n<input type=submit value=create></form>"
    },
    {
      "type": "html",
      "id": "32f6e032-2195-44a9-98a3-b1a477e6c8bc",
      "text": "<form action='https://rest.livecode.world/mediawiki/importSection'><input name=section_title size=60 value='See_also'>\n<input name=url type=hidden value='https://en.wikipedia.org/w/index.php?title=Abstract syntax tree&action=edit&section=7'>\n<input type=submit value=create></form>"
    },
    {
      "type": "markdown",
      "id": "1cbeb235-0446-452d-b4bc-c0ac84ed7d52",
      "text": "# See also"
    },
    {
      "type": "markdown",
      "id": "3ea70e0a-a130-4389-a1bd-e885e43aea01",
      "text": "- [[Application in compilers]]\n- [[Unified AST]]\n- [[See also]]"
    }
  ]
}