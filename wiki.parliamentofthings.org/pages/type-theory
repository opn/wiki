{
  "title": "Type theory",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Type theory"
      },
      "date": 1466349731051,
      "source": {
        "pageTitle": "Type theory",
        "pageSlug": "Type_theory",
        "url": "https://en.wikipedia.org/wiki/Type_theory",
        "date": 1466349731051,
        "link_dictionary": {
          "wiki_links": {
            "Difference from set theory": {
              "section_number": 3,
              "section_level": 2,
              "dot_number": 3
            },
            "Optional features": {
              "section_number": 4,
              "section_level": 2,
              "dot_number": 4
            },
            "Relation to category theory": {
              "section_number": 21,
              "section_level": 2,
              "dot_number": 7
            },
            "External links": {
              "section_number": 25,
              "section_level": 2,
              "dot_number": 11
            },
            "References": {
              "section_number": 23,
              "section_level": 2,
              "dot_number": 9
            },
            "History": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Basic concepts": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "See also": {
              "section_number": 22,
              "section_level": 2,
              "dot_number": 8
            },
            "Further reading": {
              "section_number": 24,
              "section_level": 2,
              "dot_number": 10
            },
            "Practical impact": {
              "section_number": 15,
              "section_level": 2,
              "dot_number": 6
            },
            "Systems of type theory": {
              "section_number": 11,
              "section_level": 2,
              "dot_number": 5
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 721613040,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466349734421
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "52b29fbb-46f6-4427-8600-3d9e60aa4b12",
        "text": "There is extensive overlap and interaction between the fields of type theory and type systems. Type systems are a programming language feature designed to identify bugs. Any static program analysis, such as the type checking algorithms in the semantic analysis phase of [[compiler]], has a connection to type theory - [https://en.wikipedia.org/wiki/Type_theory#Programming_languages wikipedia]"
      },
      "after": "4d7d01eb-0b14-4ebc-bdf3-ad01a041a569",
      "id": "52b29fbb-46f6-4427-8600-3d9e60aa4b12",
      "date": 1466358204748
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "41b31f49-4256-43b7-a42c-debb8584da03",
        "text": "A prime example is Agda ([[Agda (programming language)]]), a programming language which uses [[intuitionistic type theory]] for its type system. The programming language ML ([[ML (programming language)]]) was developed for manipulating type theories (see LCF ([[Logic for Computable Functions]])) and its own type system was heavily influenced by them."
      },
      "after": "52b29fbb-46f6-4427-8600-3d9e60aa4b12",
      "id": "41b31f49-4256-43b7-a42c-debb8584da03",
      "date": 1466358207253
    },
    {
      "type": "add",
      "id": "4ba6140b3aa4aada",
      "item": {
        "type": "paragraph",
        "id": "4ba6140b3aa4aada",
        "text": "# Programming Languages"
      },
      "after": "4d7d01eb-0b14-4ebc-bdf3-ad01a041a569",
      "date": 1466358227435
    },
    {
      "type": "edit",
      "id": "4ba6140b3aa4aada",
      "item": {
        "type": "markdown",
        "id": "4ba6140b3aa4aada",
        "text": "# Programming Languages"
      },
      "date": 1466358229055
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b8fc34a7-7538-4a5e-b4bb-f2f85ab82ac0",
        "text": "The first computer proof assistant, called [[Automath]], used type theory to encode mathematics on a computer. Martin-Löf specifically developed [[intuitionistic type theory]] to encode ''all'' mathematics to serve as a new foundation for mathematics. There is current research into mathematical foundations using [[homotopy type theory]] - [https://en.wikipedia.org/wiki/Type_theory#Mathematical_foundations wikipedia]"
      },
      "after": "41b31f49-4256-43b7-a42c-debb8584da03",
      "id": "b8fc34a7-7538-4a5e-b4bb-f2f85ab82ac0",
      "date": 1466358238820
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "25fd8226-4be8-4337-8cec-dc5a62e646f3",
        "text": "Mathematicians working in [[category theory]] already had difficulty working with the widely accepted foundation of [[Zermelo–Fraenkel set theory]]. This led to proposals such as Lawvere's [[Elementary Theory of the Category of Sets]] (ETCS). Homotopy type theory continues in this line using type theory. Researchers are exploring connections between dependent types (especially the identity type) and [[algebraic topology]] (specifically [[homotopy]])."
      },
      "after": "b8fc34a7-7538-4a5e-b4bb-f2f85ab82ac0",
      "id": "25fd8226-4be8-4337-8cec-dc5a62e646f3",
      "date": 1466358242148
    },
    {
      "type": "add",
      "id": "bd0d0751a3d081eb",
      "item": {
        "type": "paragraph",
        "id": "bd0d0751a3d081eb",
        "text": "# mathematical foundations"
      },
      "after": "41b31f49-4256-43b7-a42c-debb8584da03",
      "date": 1466358257893
    },
    {
      "type": "edit",
      "id": "bd0d0751a3d081eb",
      "item": {
        "type": "paragraph",
        "id": "bd0d0751a3d081eb",
        "text": "# Mathematical foundations"
      },
      "date": 1466358262188
    },
    {
      "type": "edit",
      "id": "bd0d0751a3d081eb",
      "item": {
        "type": "markdown",
        "id": "bd0d0751a3d081eb",
        "text": "# Mathematical foundations"
      },
      "date": 1466358263354
    },
    {
      "type": "edit",
      "id": "4ba6140b3aa4aada",
      "item": {
        "type": "markdown",
        "id": "4ba6140b3aa4aada",
        "text": "# Programming languages"
      },
      "date": 1466358267612
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ae08aa94-6729-4782-bd30-f1267e502daf",
        "text": "[[Gregory Bateson]] introduced a theory of logical types into the social sciences; his notions of [[double bind]] and [[logical levels]] are based on Russell's theory of types - [https://en.wikipedia.org/wiki/Type_theory#Social_sciences wikipedia]"
      },
      "after": "25fd8226-4be8-4337-8cec-dc5a62e646f3",
      "id": "ae08aa94-6729-4782-bd30-f1267e502daf",
      "date": 1466358362285
    },
    {
      "type": "edit",
      "id": "25fd8226-4be8-4337-8cec-dc5a62e646f3",
      "item": {
        "type": "paragraph",
        "id": "25fd8226-4be8-4337-8cec-dc5a62e646f3",
        "text": "Mathematicians working in [[category theory]] already had difficulty working with the widely accepted foundation of [[Zermelo–Fraenkel set theory]]. This led to proposals such as Lawvere's [[Elementary Theory of the Category of Sets]] (ETCS). "
      },
      "date": 1466358377005
    },
    {
      "type": "add",
      "id": "52b3da5f5d97e467",
      "item": {
        "type": "paragraph",
        "id": "52b3da5f5d97e467",
        "text": "Homotopy type theory continues in this line using type theory. Researchers are exploring connections between dependent types (especially the identity type) and [[algebraic topology]] (specifically [[homotopy]])."
      },
      "after": "25fd8226-4be8-4337-8cec-dc5a62e646f3",
      "date": 1466358382078
    },
    {
      "type": "add",
      "id": "787c0d3901daeaaf",
      "item": {
        "type": "paragraph",
        "id": "787c0d3901daeaaf",
        "text": "# Social sciences"
      },
      "after": "52b3da5f5d97e467",
      "date": 1466358389359
    },
    {
      "type": "edit",
      "id": "787c0d3901daeaaf",
      "item": {
        "type": "markdown",
        "id": "787c0d3901daeaaf",
        "text": "# Social sciences"
      },
      "date": 1466358390412
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
        "text": "Although the initial motivation for [[category theory]] was far removed from foundationalism, the two fields turned out to have deep connections. As [[John Lane Bell]] writes: \"In fact categories can ''themselves'' be viewed as type theories of a certain kind; this fact alone indicates that type theory is much more closely related to category theory than it is to set theory.\" In brief, a category can be viewed as a type theory by regarding its objects as types (or sorts), i.e. \"Roughly speaking, a category may be thought of as a type theory shorn of its syntax.\" A number of significant results follow in this way:[ Handbook of the History of Logic. Volume 6. Sets and Extensions in the Twentieth Century] - [https://en.wikipedia.org/wiki/Type_theory#Relation_to_category_theory wikipedia]"
      },
      "after": "ae08aa94-6729-4782-bd30-f1267e502daf",
      "id": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
      "date": 1466358407414
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "d501d7c0-367c-449e-bf4e-5f4dd4599ba3",
        "text": "* [[Cartesian closed category|cartesian closed categories]] correspond to the typed λ-calculus ([[Lambek]], 1970);\n* [[C-monoid]]s (categories with products and exponentials and a single, nonterminal object) correspond to the untyped λ-calculus (observed independently by Lambek and [[Dana Scott]] around 1980);\n* [[Locally cartesian closed category|locally cartesian closed categories]] correspond to [[Martin-Löf type theory|Martin-Löf type theories]] (Seely, 1984)."
      },
      "after": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
      "id": "d501d7c0-367c-449e-bf4e-5f4dd4599ba3",
      "date": 1466358411088
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d206a118-8f56-49eb-8150-f08265b47ae0",
        "text": "The interplay, known as [[categorical logic]], has been a subject of active research since then; see the monograph of Jacobs (1999) for instance."
      },
      "after": "d501d7c0-367c-449e-bf4e-5f4dd4599ba3",
      "id": "d206a118-8f56-49eb-8150-f08265b47ae0",
      "date": 1466358414941
    },
    {
      "type": "edit",
      "id": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
      "item": {
        "type": "paragraph",
        "id": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
        "text": "# Realtion to category theory"
      },
      "date": 1466358443481
    },
    {
      "type": "edit",
      "id": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
      "item": {
        "type": "markdown",
        "id": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
        "text": "# Realtion to category theory"
      },
      "date": 1466358445254
    },
    {
      "type": "add",
      "id": "118d08e52773675c",
      "item": {
        "type": "paragraph",
        "id": "118d08e52773675c",
        "text": "Although the initial motivation for [[category theory]] was far removed from foundationalism, the two fields turned out to have deep connections. As [[John Lane Bell]] writes: \"In fact categories can ''themselves'' be viewed as type theories of a certain kind; this fact alone indicates that type theory is much more closely related to category theory than it is to set theory.\" In brief, a category can be viewed as a type theory by regarding its objects as types (or sorts), i.e. \"Roughly speaking, a category may be thought of as a type theory shorn of its syntax.\" A number of significant results follow in this way:[ Handbook of the History of Logic. Volume 6. Sets and Extensions in the Twentieth Century] - [https://en.wikipedia.org/wiki/Type_theory#Relation_to_category_theory wikipedia]"
      },
      "after": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
      "date": 1466358446271
    },
    {
      "type": "edit",
      "id": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
      "item": {
        "type": "markdown",
        "id": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
        "text": "# Relation to category theory"
      },
      "date": 1466358460874
    },
    {
      "type": "edit",
      "id": "118d08e52773675c",
      "item": {
        "type": "paragraph",
        "id": "118d08e52773675c",
        "text": "Although the initial motivation for [[category theory]] was far removed from foundationalism, the two fields turned out to have deep connections. As [[John Lane Bell]] writes: \"In fact categories can ''themselves'' be viewed as type theories of a certain kind; this fact alone indicates that type theory is much more closely related to category theory than it is to set theory.\" "
      },
      "date": 1466358513219
    },
    {
      "type": "add",
      "id": "4aeaa71cd28b8adc",
      "item": {
        "type": "paragraph",
        "id": "4aeaa71cd28b8adc",
        "text": "In brief, a category can be viewed as a type theory by regarding its objects as types (or sorts), i.e. \"Roughly speaking, a category may be thought of as a type theory shorn of its syntax.\" A number of significant results follow in this way:"
      },
      "after": "118d08e52773675c",
      "date": 1466358517651
    },
    {
      "type": "edit",
      "id": "118d08e52773675c",
      "item": {
        "type": "paragraph",
        "id": "118d08e52773675c",
        "text": "Although the initial motivation for [[category theory]] was far removed from foundationalism, the two fields turned out to have deep connections - [https://en.wikipedia.org/wiki/Type_theory#Relation_to_category_theory wikipedia]"
      },
      "date": 1466358523515
    },
    {
      "type": "add",
      "id": "3668bba654f187a8",
      "item": {
        "type": "paragraph",
        "id": "3668bba654f187a8",
        "text": "As [[John Lane Bell]] writes: "
      },
      "after": "118d08e52773675c",
      "date": 1466358533664
    },
    {
      "item": {
        "type": "factory",
        "id": "12f122f09ad8b265"
      },
      "id": "12f122f09ad8b265",
      "type": "add",
      "after": "f0c2a9a5-c751-46fc-bc98-ab03e85a2ea2",
      "date": 1466358541030
    },
    {
      "type": "move",
      "order": [
        "f723cbef-0544-4032-9159-14acd560c626",
        "75b2eb20-4a44-4b34-834c-dd8e43accd2b",
        "4d7d01eb-0b14-4ebc-bdf3-ad01a041a569",
        "4ba6140b3aa4aada",
        "52b29fbb-46f6-4427-8600-3d9e60aa4b12",
        "41b31f49-4256-43b7-a42c-debb8584da03",
        "bd0d0751a3d081eb",
        "b8fc34a7-7538-4a5e-b4bb-f2f85ab82ac0",
        "25fd8226-4be8-4337-8cec-dc5a62e646f3",
        "52b3da5f5d97e467",
        "787c0d3901daeaaf",
        "ae08aa94-6729-4782-bd30-f1267e502daf",
        "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
        "118d08e52773675c",
        "3668bba654f187a8",
        "12f122f09ad8b265",
        "4aeaa71cd28b8adc",
        "d501d7c0-367c-449e-bf4e-5f4dd4599ba3",
        "d206a118-8f56-49eb-8150-f08265b47ae0",
        "f0c2a9a5-c751-46fc-bc98-ab03e85a2ea2"
      ],
      "id": "12f122f09ad8b265",
      "date": 1466358544080
    },
    {
      "type": "edit",
      "id": "12f122f09ad8b265",
      "item": {
        "type": "html",
        "id": "12f122f09ad8b265",
        "text": "<blockquote>\nIn fact categories can ''themselves'' be viewed as type theories of a certain kind; this fact alone indicates that type theory is much more closely related to category theory than it is to set theory.\n</blockquote>"
      },
      "date": 1466358557478
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "f723cbef-0544-4032-9159-14acd560c626",
      "text": "In mathematics, logic, and computer science, a type theory is any of a class of formal systems, some of which can serve as alternatives to set theory as a foundation for all mathematics. In type theory, every \"term\" has a \"type\" and operations are restricted to terms of a certain type - [https://en.wikipedia.org/wiki/Type_theory wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "75b2eb20-4a44-4b34-834c-dd8e43accd2b",
      "text": "Type theory is closely related to (and in some cases overlaps with) type systems, which are a programming language feature used to reduce bugs. The types of type theory were created to avoid paradoxes in a variety of formal logics and rewrite systems and sometimes \"type theory\" is used to refer to this broader application."
    },
    {
      "type": "paragraph",
      "id": "4d7d01eb-0b14-4ebc-bdf3-ad01a041a569",
      "text": "Two well-known type theories that can serve as mathematical foundations are Alonzo Church's typed λ-calculus and Per Martin-Löf's intuitionistic type theory."
    },
    {
      "type": "markdown",
      "id": "4ba6140b3aa4aada",
      "text": "# Programming languages"
    },
    {
      "type": "paragraph",
      "id": "52b29fbb-46f6-4427-8600-3d9e60aa4b12",
      "text": "There is extensive overlap and interaction between the fields of type theory and type systems. Type systems are a programming language feature designed to identify bugs. Any static program analysis, such as the type checking algorithms in the semantic analysis phase of [[compiler]], has a connection to type theory - [https://en.wikipedia.org/wiki/Type_theory#Programming_languages wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "41b31f49-4256-43b7-a42c-debb8584da03",
      "text": "A prime example is Agda ([[Agda (programming language)]]), a programming language which uses [[intuitionistic type theory]] for its type system. The programming language ML ([[ML (programming language)]]) was developed for manipulating type theories (see LCF ([[Logic for Computable Functions]])) and its own type system was heavily influenced by them."
    },
    {
      "type": "markdown",
      "id": "bd0d0751a3d081eb",
      "text": "# Mathematical foundations"
    },
    {
      "type": "paragraph",
      "id": "b8fc34a7-7538-4a5e-b4bb-f2f85ab82ac0",
      "text": "The first computer proof assistant, called [[Automath]], used type theory to encode mathematics on a computer. Martin-Löf specifically developed [[intuitionistic type theory]] to encode ''all'' mathematics to serve as a new foundation for mathematics. There is current research into mathematical foundations using [[homotopy type theory]] - [https://en.wikipedia.org/wiki/Type_theory#Mathematical_foundations wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "25fd8226-4be8-4337-8cec-dc5a62e646f3",
      "text": "Mathematicians working in [[category theory]] already had difficulty working with the widely accepted foundation of [[Zermelo–Fraenkel set theory]]. This led to proposals such as Lawvere's [[Elementary Theory of the Category of Sets]] (ETCS). "
    },
    {
      "type": "paragraph",
      "id": "52b3da5f5d97e467",
      "text": "Homotopy type theory continues in this line using type theory. Researchers are exploring connections between dependent types (especially the identity type) and [[algebraic topology]] (specifically [[homotopy]])."
    },
    {
      "type": "markdown",
      "id": "787c0d3901daeaaf",
      "text": "# Social sciences"
    },
    {
      "type": "paragraph",
      "id": "ae08aa94-6729-4782-bd30-f1267e502daf",
      "text": "[[Gregory Bateson]] introduced a theory of logical types into the social sciences; his notions of [[double bind]] and [[logical levels]] are based on Russell's theory of types - [https://en.wikipedia.org/wiki/Type_theory#Social_sciences wikipedia]"
    },
    {
      "type": "markdown",
      "id": "b8947d58-23a2-404a-9fb8-dd862dddaaa7",
      "text": "# Relation to category theory"
    },
    {
      "type": "paragraph",
      "id": "118d08e52773675c",
      "text": "Although the initial motivation for [[category theory]] was far removed from foundationalism, the two fields turned out to have deep connections - [https://en.wikipedia.org/wiki/Type_theory#Relation_to_category_theory wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "3668bba654f187a8",
      "text": "As [[John Lane Bell]] writes: "
    },
    {
      "type": "html",
      "id": "12f122f09ad8b265",
      "text": "<blockquote>\nIn fact categories can ''themselves'' be viewed as type theories of a certain kind; this fact alone indicates that type theory is much more closely related to category theory than it is to set theory.\n</blockquote>"
    },
    {
      "type": "paragraph",
      "id": "4aeaa71cd28b8adc",
      "text": "In brief, a category can be viewed as a type theory by regarding its objects as types (or sorts), i.e. \"Roughly speaking, a category may be thought of as a type theory shorn of its syntax.\" A number of significant results follow in this way:"
    },
    {
      "type": "markdown",
      "id": "d501d7c0-367c-449e-bf4e-5f4dd4599ba3",
      "text": "* [[Cartesian closed category|cartesian closed categories]] correspond to the typed λ-calculus ([[Lambek]], 1970);\n* [[C-monoid]]s (categories with products and exponentials and a single, nonterminal object) correspond to the untyped λ-calculus (observed independently by Lambek and [[Dana Scott]] around 1980);\n* [[Locally cartesian closed category|locally cartesian closed categories]] correspond to [[Martin-Löf type theory|Martin-Löf type theories]] (Seely, 1984)."
    },
    {
      "type": "paragraph",
      "id": "d206a118-8f56-49eb-8150-f08265b47ae0",
      "text": "The interplay, known as [[categorical logic]], has been a subject of active research since then; see the monograph of Jacobs (1999) for instance."
    },
    {
      "type": "markdown",
      "id": "f0c2a9a5-c751-46fc-bc98-ab03e85a2ea2",
      "text": "# See also\n* [[History]]\n* [[Basic concepts]]\n* [[Difference from set theory]]\n* [[Optional features]]\n* [[Systems of type theory]]\n* [[Practical impact]]\n* [[Relation to category theory]]\n* [[See also]]\n* [[References]]\n* [[Further reading]]\n* [[External links]]"
    }
  ]
}