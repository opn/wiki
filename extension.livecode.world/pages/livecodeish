{
  "title": "LiveCodeish",
  "story": [
    {
      "id": "4bc105c8384b3034",
      "text": "[[Livecode Builder]] extensions will be based upon a \"new dialect\" of LiveCode (let's call it [[LiveCodeish]]. ",
      "type": "paragraph"
    },
    {
      "type": "paragraph",
      "id": "49efce92568f151f",
      "text": "Essentially the dialect will be a distilled form of the current LiveCode core syntax and semantics - this syntax will be cleaned up and its functionality will be much better defined (for example, getting rid of auto-conversion of arrays to empty strings and \"fixing\" the non-standard \"for x to y\" loop we have). "
    },
    {
      "id": "c133a85c1c0a355a",
      "text": "There are perhaps three aspects of this proposed new LiveCodeish language which deserve mention:\n<OL>\n<LI>  No Glue Code\n<LI>  It is a [[Typed Language]]\n<LI>  No [[Message Path]]\n</OL>",
      "type": "html"
    },
    {
      "type": "html",
      "id": "4aebcb8d68bd8827",
      "text": "<H3>No Glue Code"
    },
    {
      "type": "paragraph",
      "id": "5cf2314d5a1e9a7e",
      "text": "The first is that this new dialect will provide the ability to directly hook into native code through binding to functions in native code (whether that be Java, Objective-C or C/C++) thus, hopefully, eliminating the need to write \"glue-code\" externals and, again, making extending LiveCode much more accessible to anyone that can code in LiveCode rather than those few who can, or have the time to delve into these lower-level environments."
    },
    {
      "type": "html",
      "id": "f723340853fad97e",
      "text": "<H3>Typed Language"
    },
    {
      "type": "paragraph",
      "id": "f35b909975723d58",
      "text": "The next is that it will (eventually) be typed in a very natural way. You will be able to declare variables and handler parameters as having a given type (by default their type will be any). "
    },
    {
      "type": "paragraph",
      "id": "2f734a1cda4df03d",
      "text": "Whenever you try to assign a value to the variable the engine will attempt to convert it to the appropriate type and only throw an error if this is not possible. "
    },
    {
      "type": "paragraph",
      "id": "9d6fbc8380c05273",
      "text": "For example a variable with an integer type can have an integer put into it directly, a real number can be put into it after its been automatically rounded, and even a string can - as long as the string can be converted to an integer. "
    },
    {
      "type": "paragraph",
      "id": "d11d4c57dbfaf1ce",
      "text": "This simple ability will mean that it will be easier to write \"correct\" code - you'll be able to much more easily debug things where it could be type-mismatches that are causing errors. "
    },
    {
      "type": "paragraph",
      "id": "c046363737f579f1",
      "text": "It also means that (in the future) suitably typed code will run more efficiently - for example if you have an integer variable then that can be much more efficiently represented internally than a variable which can hold any type."
    },
    {
      "type": "html",
      "id": "b1e2b3e9d3929b15",
      "text": "<H3>No Message Path"
    },
    {
      "type": "paragraph",
      "id": "d34fddc9c84cf8e7",
      "text": "The third thing about LiveCodeish which is quite different from normal LiveCode scripts is that there is no message path - well, the message path is there, it's just that command and functions in extensions do not sit in it. "
    },
    {
      "type": "paragraph",
      "id": "af94d8a231af6f89",
      "text": "This is exactly the same situation as current engine commands and functions - they are bound at compile time. This not sitting in the message path does not mean that extensions have no access to it, quite the reverse as they will have access in the same way as engine syntax does - you will be able to send messages to objects through the message path just as the engine can. "
    },
    {
      "type": "paragraph",
      "id": "64bcc4f9266127c4",
      "text": "This slight change in perspective brings LiveCodeish much closer to more \"traditional\" languages - and means that over time a much larger range of optimization potential becomes available (as things are more static in this world - dynamicity is great, except when you want to optimize at compile time!). "
    },
    {
      "type": "paragraph",
      "id": "b7a84836a5aaf8c7",
      "text": "Indeed, I can see no reason that LiveCodeish should not be eventually compilable to native code with performance at a level where the decision to code something in C or LiveCodeish due to that metric is a non-issue - LiveCodeish will be amply able."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "LiveCodeish",
        "story": []
      },
      "date": 1437144586515
    },
    {
      "item": {
        "type": "factory",
        "id": "af7d4fcff20e59dc"
      },
      "id": "af7d4fcff20e59dc",
      "type": "add",
      "date": 1437144587969
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "49efce92568f151f",
        "text": "Essentially the dialect will be a distilled form of the current LiveCode core syntax and semantics - this syntax will be cleaned up and its functionality will be much better defined (for example, getting rid of auto-conversion of arrays to empty strings and \"fixing\" the non-standard \"for x to y\" loop we have). "
      },
      "id": "49efce92568f151f",
      "date": 1437144593635
    },
    {
      "type": "add",
      "item": {
        "id": "4bc105c8384b3034",
        "text": "Livecode Builder extensions will be based upon a \"new dialect\" of LiveCode (let's call it [[LiveCodeish]]. ",
        "type": "paragraph"
      },
      "id": "4bc105c8384b3034",
      "date": 1437144597228
    },
    {
      "type": "edit",
      "id": "4bc105c8384b3034",
      "item": {
        "id": "4bc105c8384b3034",
        "text": "[[Livecode Builder]] extensions will be based upon a \"new dialect\" of LiveCode (let's call it [[LiveCodeish]]. ",
        "type": "paragraph"
      },
      "date": 1437144605262
    },
    {
      "type": "add",
      "item": {
        "id": "c133a85c1c0a355a",
        "text": "There are perhaps three aspects of this proposed new LiveCodeish language which deserve mention:\n<OL>\n<LI>  No Glue Code\n<LI>  It is a [[Typed Language]]\n<LI>  No [[Message Path]]\n</OL>",
        "type": "html"
      },
      "after": "49efce92568f151f",
      "id": "c133a85c1c0a355a",
      "date": 1437144615964
    },
    {
      "type": "remove",
      "id": "af7d4fcff20e59dc",
      "date": 1437144618811
    },
    {
      "type": "add",
      "item": {
        "type": "html",
        "id": "4aebcb8d68bd8827",
        "text": "<H3>No Glue Code"
      },
      "after": "c133a85c1c0a355a",
      "id": "4aebcb8d68bd8827",
      "date": 1437144621927
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5cf2314d5a1e9a7e",
        "text": "The first is that this new dialect will provide the ability to directly hook into native code through binding to functions in native code (whether that be Java, Objective-C or C/C++) thus, hopefully, eliminating the need to write \"glue-code\" externals and, again, making extending LiveCode much more accessible to anyone that can code in LiveCode rather than those few who can, or have the time to delve into these lower-level environments."
      },
      "after": "4aebcb8d68bd8827",
      "id": "5cf2314d5a1e9a7e",
      "date": 1437144629544
    },
    {
      "type": "add",
      "item": {
        "type": "html",
        "id": "f723340853fad97e",
        "text": "<H3>Typed Language"
      },
      "after": "5cf2314d5a1e9a7e",
      "id": "f723340853fad97e",
      "date": 1437144634631
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f35b909975723d58",
        "text": "The next is that it will (eventually) be typed in a very natural way. You will be able to declare variables and handler parameters as having a given type (by default their type will be any). "
      },
      "after": "f723340853fad97e",
      "id": "f35b909975723d58",
      "date": 1437144638803
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2f734a1cda4df03d",
        "text": "Whenever you try to assign a value to the variable the engine will attempt to convert it to the appropriate type and only throw an error if this is not possible. "
      },
      "after": "f35b909975723d58",
      "id": "2f734a1cda4df03d",
      "date": 1437144660729
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9d6fbc8380c05273",
        "text": "For example a variable with an integer type can have an integer put into it directly, a real number can be put into it after its been automatically rounded, and even a string can - as long as the string can be converted to an integer. "
      },
      "after": "2f734a1cda4df03d",
      "id": "9d6fbc8380c05273",
      "date": 1437144665126
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d11d4c57dbfaf1ce",
        "text": "This simple ability will mean that it will be easier to write \"correct\" code - you'll be able to much more easily debug things where it could be type-mismatches that are causing errors. "
      },
      "after": "9d6fbc8380c05273",
      "id": "d11d4c57dbfaf1ce",
      "date": 1437144685471
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c046363737f579f1",
        "text": "It also means that (in the future) suitably typed code will run more efficiently - for example if you have an integer variable then that can be much more efficiently represented internally than a variable which can hold any type."
      },
      "after": "d11d4c57dbfaf1ce",
      "id": "c046363737f579f1",
      "date": 1437144692504
    },
    {
      "type": "add",
      "item": {
        "type": "html",
        "id": "b1e2b3e9d3929b15",
        "text": "<H3>No Message Path"
      },
      "after": "c046363737f579f1",
      "id": "b1e2b3e9d3929b15",
      "date": 1437144700783
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d34fddc9c84cf8e7",
        "text": "The third thing about LiveCodeish which is quite different from normal LiveCode scripts is that there is no message path - well, the message path is there, it's just that command and functions in extensions do not sit in it. "
      },
      "after": "b1e2b3e9d3929b15",
      "id": "d34fddc9c84cf8e7",
      "date": 1437144704196
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "af94d8a231af6f89",
        "text": "This is exactly the same situation as current engine commands and functions - they are bound at compile time. This not sitting in the message path does not mean that extensions have no access to it, quite the reverse as they will have access in the same way as engine syntax does - you will be able to send messages to objects through the message path just as the engine can. "
      },
      "after": "d34fddc9c84cf8e7",
      "id": "af94d8a231af6f89",
      "date": 1437144708674
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "64bcc4f9266127c4",
        "text": "This slight change in perspective brings LiveCodeish much closer to more \"traditional\" languages - and means that over time a much larger range of optimization potential becomes available (as things are more static in this world - dynamicity is great, except when you want to optimize at compile time!). "
      },
      "after": "af94d8a231af6f89",
      "id": "64bcc4f9266127c4",
      "date": 1437144712616
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b7a84836a5aaf8c7",
        "text": "Indeed, I can see no reason that LiveCodeish should not be eventually compilable to native code with performance at a level where the decision to code something in C or LiveCodeish due to that metric is a non-issue - LiveCodeish will be amply able."
      },
      "after": "64bcc4f9266127c4",
      "id": "b7a84836a5aaf8c7",
      "date": 1437144716507
    },
    {
      "type": "fork",
      "site": "livecode.viral.academy",
      "date": 1448912116504
    }
  ]
}