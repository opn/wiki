{
  "title": "JSON-LD Signature",
  "story": [
    {
      "type": "paragraph",
      "id": "666bb75a5f8774e4",
      "text": "This specification adds authentication and integrity protection to Linked Data documents through the use of public/private key cryptography without sacrificing Linked Data features such as extensibility and composability - [https://web-payments.org/specs/source/ld-signatures/#bib-RDF-DATASET-NORMALIZATION web-payments.org]"
    },
    {
      "type": "paragraph",
      "id": "3e57b3d68abb1846",
      "text": "The following algorithm specifies how to create a digital signature that can be later used to verify the authenticity and integrity of a Linked Data Document - [https://web-payments.org/specs/source/ld-signatures/ web-payments.org]"
    },
    {
      "type": "paragraph",
      "id": "91263174bb280d4c",
      "text": "A Linked Data Document, document, a private key, and an identifier for the public/private key pair, creator, are required inputs. Anonce and a domain may also be optionally specified as inputs. A Signed Linked Data Document is produced as output. Whenever this algorithm must encode strings, it uses UTF-8 encoding."
    },
    {
      "type": "markdown",
      "id": "90144091b40629a3",
      "text": "* Create a copy of document, output.\n* Remove any signature nodes from the default graph in output.\n* Generate a normalized document by normalizing document according to the URDNA2015 [[RDF-Dataset-Normalization]] algorithm.\n* Generate an ISO8601 combined date and time string, created containing the current date and time, accurate to at least one second, in Universal Time Code format. For example: 2011-09-23T20:21:34Z. * Add an entry to headers with a key of http://purl.org/dc/elements/1.1/ created and a value of created.\n* Create a value tbs that represents the data to be signed, and set it to the result of running the Create * Verify Hash Algorithm.\n* Digitally sign tbs using the private key and the the RSASSA-PKCS1-v1_5 [PKCS1] algorithm and base-64 encode the resulting value. The resulting base-64 encoded string is the signatureValue.\n* Add a signature node to output containing a Linked Data Signature using creator, created, signatureValue, and if given, the nonce, anddomain.\n* Return output as the Signed Linked Data Document - [https://www.npmjs.com/package/jsonld-signatures npmjs.com]"
    },
    {
      "type": "markdown",
      "id": "663fd4cffa73553f",
      "text": "# Related Links"
    },
    {
      "type": "reference",
      "id": "5303c79b03d39743",
      "site": "c0de.academy",
      "slug": "rdf-dataset-normalization",
      "title": "RDF-Dataset-Normalization",
      "text": "This document outlines an algorithm for normalizing RDF datasets such that these operations can be performed - [http://json-ld.github.io/normalization/spec/#normalization json-ld.github.io]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "JSON-LD Signature",
        "story": []
      },
      "date": 1452623400798
    },
    {
      "item": {
        "type": "factory",
        "id": "663fd4cffa73553f"
      },
      "id": "663fd4cffa73553f",
      "type": "add",
      "date": 1452623402229
    },
    {
      "item": {
        "type": "factory",
        "id": "5303c79b03d39743"
      },
      "id": "5303c79b03d39743",
      "type": "add",
      "after": "663fd4cffa73553f",
      "date": 1452623403561
    },
    {
      "type": "edit",
      "id": "5303c79b03d39743",
      "item": {
        "type": "reference",
        "id": "5303c79b03d39743",
        "site": "c0de.academy",
        "slug": "rdf-dataset-normalization",
        "title": "RDF-Dataset-Normalization",
        "text": "This document outlines an algorithm for normalizing RDF datasets such that these operations can be performed - [http://json-ld.github.io/normalization/spec/#normalization json-ld.github.io]"
      },
      "date": 1452623405395
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "666bb75a5f8774e4",
        "text": "This specification adds authentication and integrity protection to Linked Data documents through the use of public/private key cryptography without sacrificing Linked Data features such as extensibility and composability - [https://web-payments.org/specs/source/ld-signatures/#bib-RDF-DATASET-NORMALIZATION web-payments.org]"
      },
      "id": "666bb75a5f8774e4",
      "date": 1452623408587
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3e57b3d68abb1846",
        "text": "The following algorithm specifies how to create a digital signature that can be later used to verify the authenticity and integrity of a Linked Data Document - [https://web-payments.org/specs/source/ld-signatures/ web-payments.org]"
      },
      "after": "666bb75a5f8774e4",
      "id": "3e57b3d68abb1846",
      "date": 1452623411291
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "91263174bb280d4c",
        "text": "A Linked Data Document, document, a private key, and an identifier for the public/private key pair, creator, are required inputs. Anonce and a domain may also be optionally specified as inputs. A Signed Linked Data Document is produced as output. Whenever this algorithm must encode strings, it uses UTF-8 encoding."
      },
      "after": "3e57b3d68abb1846",
      "id": "91263174bb280d4c",
      "date": 1452623413119
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "90144091b40629a3",
        "text": "* Create a copy of document, output.\n* Remove any signature nodes from the default graph in output.\n* Generate a normalized document by normalizing document according to the URDNA2015 [[RDF-Dataset-Normalization]] algorithm.\n* Generate an ISO8601 combined date and time string, created containing the current date and time, accurate to at least one second, in Universal Time Code format. For example: 2011-09-23T20:21:34Z. * Add an entry to headers with a key of http://purl.org/dc/elements/1.1/ created and a value of created.\n* Create a value tbs that represents the data to be signed, and set it to the result of running the Create * Verify Hash Algorithm.\n* Digitally sign tbs using the private key and the the RSASSA-PKCS1-v1_5 [PKCS1] algorithm and base-64 encode the resulting value. The resulting base-64 encoded string is the signatureValue.\n* Add a signature node to output containing a Linked Data Signature using creator, created, signatureValue, and if given, the nonce, anddomain.\n* Return output as the Signed Linked Data Document - [https://www.npmjs.com/package/jsonld-signatures npmjs.com]"
      },
      "after": "91263174bb280d4c",
      "id": "90144091b40629a3",
      "date": 1452623415147
    },
    {
      "type": "edit",
      "id": "663fd4cffa73553f",
      "item": {
        "type": "paragraph",
        "id": "663fd4cffa73553f",
        "text": "# Related Links"
      },
      "date": 1452623436013
    },
    {
      "type": "edit",
      "id": "663fd4cffa73553f",
      "item": {
        "type": "markdown",
        "id": "663fd4cffa73553f",
        "text": "# Related Links"
      },
      "date": 1452623437603
    }
  ]
}