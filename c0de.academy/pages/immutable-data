{
  "title": "Immutable Data",
  "story": [
    {
      "type": "paragraph",
      "id": "656f9896-793a-4c71-a215-34825e29e1ac",
      "text": "In object-oriented and functional programming, an [[immutable object]] is an object whose state cannot be modified after it is created. "
    },
    {
      "type": "paragraph",
      "id": "23ff941be51b0f50",
      "text": "This is in contrast to a mutable object (changeable object), which can be modified after it is created. In some cases, an object is considered immutable even if some internally used attributes change but the object's state appears to be unchanging from an external point of view. For example, an object that uses memoization to cache the results of expensive computations could still be considered an immutable object - [https://en.wikipedia.org/wiki/Immutable_object wikipedia]"
    },
    {
      "type": "html",
      "id": "de8ac49b84bc4cf1",
      "text": "<video width=\"420\" controls src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\">\n  This is fallback content to display for user agents that do not support the video tag.\n</video>\n[http://courses.csail.mit.edu/6.851/spring12/lectures/L01.html  mit.edu]"
    },
    {
      "type": "paragraph",
      "id": "72b85594247c23ba",
      "text": "Both mutable and immutable objects have their own uses, pros and cons."
    },
    {
      "type": "paragraph",
      "id": "26c025045fa6eecc",
      "text": "Immutable objects do indeed make life simpler in many cases. They are especially applicable for value types, where objects don't have an identity so they can be easily replaced. And they can make concurrent programming way safer and cleaner (most of the notoriously hard to find concurrency bugs are ultimately caused by mutable state shared between threads) - [https://softwareengineering.stackexchange.com/questions/151733/if-immutable-objects-are-good-why-do-people-keep-creating-mutable-objects stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "864e2b518443cdd4",
      "text": "However, for large and/or complex objects, creating a new copy of the object for every single change can be very costly and/or tedious. And for objects with a distinct identity, changing an existing objects is much more simple and intuitive than creating a new, modified copy of it.\n\nThink about a game character. In games, speed is top priority, so representing your game characters with mutable objects will most likely make your game run significantly faster than an alternative implementation where a new copy of the game character is spawned for every little change.\n\nMoreover, our perception of the real world is inevitably based on mutable objects. When you fill up your car with fuel at the gas station, you perceive it as the same object all along (i.e. its identity is maintained while its state is changing) - not as if the old car with an empty tank got replaced with consecutive new car instances having their tank gradually more and more full. So whenever we are modeling some real-world domain in a program, it is usually more straightforward and easier to implement the domain model using mutable objects to represent real-world entities.\n\nApart from all these legitimate reasons, alas, the most probable cause why people keep creating mutable objects is inertia of mind, a.k.a. resistance to change. Note that most developers of today have been trained well before immutability (and the containing paradigm, functional programming) became \"trendy\" in their sphere of influence, and don't keep their knowledge up to date about new tools and methods of our trade - in fact, many of us humans positively resist new ideas and processes. \"I have been programming like this for nn years and I don't care about the latest stupid fads!\""
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Immutable Data",
        "story": []
      },
      "date": 1493479702755
    },
    {
      "item": {
        "type": "factory",
        "id": "53a09879ad0ba6fa"
      },
      "id": "53a09879ad0ba6fa",
      "type": "add",
      "date": 1493479704817
    },
    {
      "type": "fork",
      "site": "permanent.wiki"
    },
    {
      "type": "edit",
      "id": "53a09879ad0ba6fa",
      "item": {
        "type": "video",
        "id": "53a09879ad0ba6fa",
        "text": "http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\nfdsa"
      },
      "date": 1493480509269
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "4c0a920edec8b08e",
        "text": "<video src=\"movie.webm\" poster=\"movie.jpg\" controls>\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "after": "53a09879ad0ba6fa",
      "id": "4c0a920edec8b08e",
      "date": 1493480584122
    },
    {
      "item": {
        "type": "factory",
        "id": "de8ac49b84bc4cf1"
      },
      "id": "de8ac49b84bc4cf1",
      "type": "add",
      "after": "4c0a920edec8b08e",
      "date": 1493480588565
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4"
      },
      "date": 1493480591970
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"movie.jpg\" controls>\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480609465
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=420src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"movie.jpg\" controls>\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480636403
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=420src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\" controls>\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480661675
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=420 src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\" controls>\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480683158
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\" controls>\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480704478
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=420 src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\">\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480729075
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=420 src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4 controls\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\">\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480751968
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=420 controls src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\">\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480765111
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=\"400\" controls src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\">\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480795664
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=\"400\" controls src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" \n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480836331
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=\"420\" controls src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\">\n  This is fallback content to display for user agents that do not support the video tag.\n</video>"
      },
      "date": 1493480875677
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "656f9896-793a-4c71-a215-34825e29e1ac",
        "text": "In object-oriented and functional programming, an immutable object (unchangeable object) is an object whose state cannot be modified after it is created. This is in contrast to a mutable object (changeable object), which can be modified after it is created. In some cases, an object is considered immutable even if some internally used attributes change but the object's state appears to be unchanging from an external point of view. For example, an object that uses memoization to cache the results of expensive computations could still be considered an immutable object - [https://en.wikipedia.org/wiki/Immutable_object wikipedia]"
      },
      "id": "656f9896-793a-4c71-a215-34825e29e1ac",
      "date": 1493480957756
    },
    {
      "type": "remove",
      "id": "53a09879ad0ba6fa",
      "date": 1493480960941
    },
    {
      "type": "edit",
      "id": "656f9896-793a-4c71-a215-34825e29e1ac",
      "item": {
        "type": "paragraph",
        "id": "656f9896-793a-4c71-a215-34825e29e1ac",
        "text": "In object-oriented and functional programming, an [[immutable object]] is an object whose state cannot be modified after it is created. "
      },
      "date": 1493480990174
    },
    {
      "type": "add",
      "id": "23ff941be51b0f50",
      "item": {
        "type": "paragraph",
        "id": "23ff941be51b0f50",
        "text": "This is in contrast to a mutable object (changeable object), which can be modified after it is created. In some cases, an object is considered immutable even if some internally used attributes change but the object's state appears to be unchanging from an external point of view. For example, an object that uses memoization to cache the results of expensive computations could still be considered an immutable object - [https://en.wikipedia.org/wiki/Immutable_object wikipedia]"
      },
      "after": "656f9896-793a-4c71-a215-34825e29e1ac",
      "date": 1493480990824
    },
    {
      "type": "remove",
      "id": "4c0a920edec8b08e",
      "date": 1493480993695
    },
    {
      "item": {
        "type": "factory",
        "id": "72b85594247c23ba"
      },
      "id": "72b85594247c23ba",
      "type": "add",
      "after": "de8ac49b84bc4cf1",
      "date": 1493480998774
    },
    {
      "type": "edit",
      "id": "de8ac49b84bc4cf1",
      "item": {
        "type": "html",
        "id": "de8ac49b84bc4cf1",
        "text": "<video width=\"420\" controls src=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_720p.mp4\" poster=\"http://courses.csail.mit.edu/6.851/spring12/lectures/video/L01_title.png\">\n  This is fallback content to display for user agents that do not support the video tag.\n</video>\n[http://courses.csail.mit.edu/6.851/spring12/lectures/L01.html  mit.edu]"
      },
      "date": 1493483204063
    },
    {
      "type": "edit",
      "id": "72b85594247c23ba",
      "item": {
        "type": "paragraph",
        "id": "72b85594247c23ba",
        "text": "Both mutable and immutable objects have their own uses, pros and cons.\n\nImmutable objects do indeed make life simpler in many cases. They are especially applicable for value types, where objects don't have an identity so they can be easily replaced. And they can make concurrent programming way safer and cleaner (most of the notoriously hard to find concurrency bugs are ultimately caused by mutable state shared between threads). However, for large and/or complex objects, creating a new copy of the object for every single change can be very costly and/or tedious. And for objects with a distinct identity, changing an existing objects is much more simple and intuitive than creating a new, modified copy of it.\n\nThink about a game character. In games, speed is top priority, so representing your game characters with mutable objects will most likely make your game run significantly faster than an alternative implementation where a new copy of the game character is spawned for every little change.\n\nMoreover, our perception of the real world is inevitably based on mutable objects. When you fill up your car with fuel at the gas station, you perceive it as the same object all along (i.e. its identity is maintained while its state is changing) - not as if the old car with an empty tank got replaced with consecutive new car instances having their tank gradually more and more full. So whenever we are modeling some real-world domain in a program, it is usually more straightforward and easier to implement the domain model using mutable objects to represent real-world entities.\n\nApart from all these legitimate reasons, alas, the most probable cause why people keep creating mutable objects is inertia of mind, a.k.a. resistance to change. Note that most developers of today have been trained well before immutability (and the containing paradigm, functional programming) became \"trendy\" in their sphere of influence, and don't keep their knowledge up to date about new tools and methods of our trade - in fact, many of us humans positively resist new ideas and processes. \"I have been programming like this for nn years and I don't care about the latest stupid fads!\""
      },
      "date": 1493484690929
    },
    {
      "type": "edit",
      "id": "72b85594247c23ba",
      "item": {
        "type": "paragraph",
        "id": "72b85594247c23ba",
        "text": "Both mutable and immutable objects have their own uses, pros and cons."
      },
      "date": 1493484709776
    },
    {
      "type": "add",
      "id": "26c025045fa6eecc",
      "item": {
        "type": "paragraph",
        "id": "26c025045fa6eecc",
        "text": "Immutable objects do indeed make life simpler in many cases. They are especially applicable for value types, where objects don't have an identity so they can be easily replaced. And they can make concurrent programming way safer and cleaner (most of the notoriously hard to find concurrency bugs are ultimately caused by mutable state shared between threads) - [https://softwareengineering.stackexchange.com/questions/151733/if-immutable-objects-are-good-why-do-people-keep-creating-mutable-objects stackoverflow]"
      },
      "after": "72b85594247c23ba",
      "date": 1493484724039
    },
    {
      "type": "add",
      "id": "864e2b518443cdd4",
      "item": {
        "type": "paragraph",
        "id": "864e2b518443cdd4",
        "text": "However, for large and/or complex objects, creating a new copy of the object for every single change can be very costly and/or tedious. And for objects with a distinct identity, changing an existing objects is much more simple and intuitive than creating a new, modified copy of it.\n\nThink about a game character. In games, speed is top priority, so representing your game characters with mutable objects will most likely make your game run significantly faster than an alternative implementation where a new copy of the game character is spawned for every little change.\n\nMoreover, our perception of the real world is inevitably based on mutable objects. When you fill up your car with fuel at the gas station, you perceive it as the same object all along (i.e. its identity is maintained while its state is changing) - not as if the old car with an empty tank got replaced with consecutive new car instances having their tank gradually more and more full. So whenever we are modeling some real-world domain in a program, it is usually more straightforward and easier to implement the domain model using mutable objects to represent real-world entities.\n\nApart from all these legitimate reasons, alas, the most probable cause why people keep creating mutable objects is inertia of mind, a.k.a. resistance to change. Note that most developers of today have been trained well before immutability (and the containing paradigm, functional programming) became \"trendy\" in their sphere of influence, and don't keep their knowledge up to date about new tools and methods of our trade - in fact, many of us humans positively resist new ideas and processes. \"I have been programming like this for nn years and I don't care about the latest stupid fads!\""
      },
      "after": "26c025045fa6eecc",
      "date": 1493484726460
    }
  ]
}