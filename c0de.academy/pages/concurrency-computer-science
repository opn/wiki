{
  "title": "Concurrency (computer science)",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Concurrency (computer science)"
      },
      "date": 1469876429856,
      "source": {
        "pageTitle": "Concurrency (computer science)",
        "pageSlug": "Concurrency_(computer_science)",
        "url": "https://en.wikipedia.org/wiki/Concurrency_(computer_science)",
        "date": 1469876429856,
        "link_dictionary": {
          "wiki_links": {
            "Practice": {
              "section_number": 5,
              "section_level": 2,
              "dot_number": 3
            },
            "References": {
              "section_number": 7,
              "section_level": 2,
              "dot_number": 5
            },
            "External links": {
              "section_number": 9,
              "section_level": 2,
              "dot_number": 7
            },
            "Theory": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "See also": {
              "section_number": 6,
              "section_level": 2,
              "dot_number": 4
            },
            "Further reading": {
              "section_number": 8,
              "section_level": 2,
              "dot_number": 6
            },
            "Issues": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 729072954,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "item": {
        "type": "video",
        "id": "ca066260b05041fc",
        "text": "YOUTUBE cN_DpYBzKso\n(double-click to edit caption)\n"
      },
      "id": "ca066260b05041fc",
      "type": "add",
      "after": "f8fbda60-7233-46ec-8ccd-c6e7d850c14d",
      "date": 1469876434647,
      "error": {
        "type": "error",
        "msg": "Not Found",
        "response": "Page not found"
      }
    },
    {
      "type": "fork",
      "date": 1469876433545
    },
    {
      "type": "move",
      "order": [
        "36e7a5b2-b4d0-41b4-8c55-baf03aa1f4a9",
        "9c0dc9fa-b591-4355-a2df-8953990382c0",
        "f6104e81-dc3c-49c4-a113-509682d994dd",
        "4ad79458-4376-4d92-9d30-3cf3b5dff077",
        "ca066260b05041fc",
        "f8fbda60-7233-46ec-8ccd-c6e7d850c14d"
      ],
      "id": "ca066260b05041fc",
      "date": 1469876442842,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "edit",
      "id": "ca066260b05041fc",
      "item": {
        "type": "video",
        "id": "ca066260b05041fc",
        "text": "YOUTUBE cN_DpYBzKso\n(double-click to edit caption)\n"
      },
      "date": 1469876457086
    },
    {
      "type": "fork",
      "date": 1469876461349
    },
    {
      "type": "edit",
      "id": "ca066260b05041fc",
      "item": {
        "type": "video",
        "id": "ca066260b05041fc",
        "text": "YOUTUBE cN_DpYBzKso\nRob (@rob_pike) is a software pioneer. His influence is everywhere: Unix, Plan 9 OS, The Unix Programming Environment book, UTF-8, and most recently the Go programming language - [http://blog.golang.org/concurrency-is... blog.golang.org] \nSlides: [http://talks.golang.org/2012/waza.slide talks.golang.org]\n\nThe only reason I re-uploaded this is to be able to add it to my YouTube playlist: http://www.youtube.com/playlist?list=..."
      },
      "date": 1469876564623
    },
    {
      "item": {
        "type": "factory",
        "id": "570a7996a08d28e1"
      },
      "id": "570a7996a08d28e1",
      "type": "add",
      "after": "f8fbda60-7233-46ec-8ccd-c6e7d850c14d",
      "date": 1469876576468
    },
    {
      "type": "edit",
      "id": "570a7996a08d28e1",
      "item": {
        "type": "video",
        "id": "570a7996a08d28e1",
        "text": "VIMEO 49718712\n(double-click to edit caption)\n"
      },
      "date": 1469876583389
    },
    {
      "type": "edit",
      "id": "ca066260b05041fc",
      "item": {
        "type": "video",
        "id": "ca066260b05041fc",
        "text": "YOUTUBE cN_DpYBzKso\nRob (@rob_pike) is a software pioneer. His influence is everywhere: Unix, Plan 9 OS, The Unix Programming Environment book, UTF-8, and most recently the Go programming language - [http://blog.golang.org/concurrency-is... blog.golang.org] \nSlides: [http://talks.golang.org/2012/waza.slide talks.golang.org]"
      },
      "date": 1469876646982
    },
    {
      "type": "edit",
      "id": "ca066260b05041fc",
      "item": {
        "type": "video",
        "id": "ca066260b05041fc",
        "text": "YOUTUBE cN_DpYBzKso\nRob (@rob_pike) is a software pioneer. His influence is everywhere: Unix, Plan 9 OS, The Unix Programming Environment book, UTF-8, and most recently the Go programming language - [http://blog.golang.org/concurrency-is-not-parallelism blog.golang.org] \nSlides: [http://talks.golang.org/2012/waza.slide talks.golang.org]"
      },
      "date": 1469876670787
    },
    {
      "type": "edit",
      "id": "570a7996a08d28e1",
      "item": {
        "type": "video",
        "id": "570a7996a08d28e1",
        "text": "VIMEO 49718712\nRob (@rob_pike) is a software pioneer. His influence is everywhere: Unix, Plan 9 OS, The Unix Programming Environment book, UTF-8, and most recently the Go programming language - [http://blog.golang.org/concurrency-is-not-parallelism blog.golang.org] \nSlides: [http://talks.golang.org/2012/waza.slide talks.golang.org]"
      },
      "date": 1469876796761
    },
    {
      "type": "remove",
      "id": "ca066260b05041fc",
      "date": 1469876804765
    },
    {
      "item": {
        "type": "factory",
        "id": "b153182f025272db"
      },
      "id": "b153182f025272db",
      "type": "add",
      "after": "570a7996a08d28e1",
      "date": 1469877841124
    },
    {
      "type": "edit",
      "id": "b153182f025272db",
      "item": {
        "type": "video",
        "id": "b153182f025272db",
        "text": "YOUTUBE jR9pAaQlVRc\n(double-click to edit caption)\n"
      },
      "date": 1469877895965
    },
    {
      "type": "move",
      "order": [
        "36e7a5b2-b4d0-41b4-8c55-baf03aa1f4a9",
        "b153182f025272db",
        "9c0dc9fa-b591-4355-a2df-8953990382c0",
        "f6104e81-dc3c-49c4-a113-509682d994dd",
        "4ad79458-4376-4d92-9d30-3cf3b5dff077",
        "f8fbda60-7233-46ec-8ccd-c6e7d850c14d",
        "570a7996a08d28e1"
      ],
      "id": "b153182f025272db",
      "date": 1469877910964
    },
    {
      "type": "edit",
      "id": "b153182f025272db",
      "item": {
        "type": "video",
        "id": "b153182f025272db",
        "text": "YOUTUBE jR9pAaQlVRc\ndsa"
      },
      "date": 1469877966263
    },
    {
      "type": "add",
      "id": "1eb82e0989be5ff3",
      "item": {
        "type": "paragraph",
        "id": "1eb82e0989be5ff3",
        "text": "# History of hardware concurrency"
      },
      "after": "36e7a5b2-b4d0-41b4-8c55-baf03aa1f4a9",
      "date": 1469877981802
    },
    {
      "type": "edit",
      "id": "1eb82e0989be5ff3",
      "item": {
        "type": "markdown",
        "id": "1eb82e0989be5ff3",
        "text": "# History of hardware concurrency"
      },
      "date": 1469877984038
    },
    {
      "type": "add",
      "id": "80c285a4e205a568",
      "item": {
        "type": "paragraph",
        "id": "80c285a4e205a568",
        "text": "Our industry has grown up with a sequential model of computing, evolved to husband the logic associated with a few vacuum tubes. Now we must struggle to harness the vast concurrency of modern transistor circuits. Is concurrency fundamentally hard, or does it just seem hard because of our history of sequential programming? I believe some of each. Concurrency is fundamentally hard for only two reasons. One is that concurrent action requires coordination. The other is that concurrent action of many processes can produce an exponential explosion of states. How can we be sure that all such states are benign?"
      },
      "after": "1eb82e0989be5ff3",
      "date": 1469877988147
    },
    {
      "type": "add",
      "id": "60490ed52dc36016",
      "item": {
        "type": "paragraph",
        "id": "60490ed52dc36016",
        "text": "\nConcurrency is easy when we escape its details. Maybe instead of \"programming sequential processes\" we might better \"configure concurrent communication.\" A communication view of computing matches well the cost structure of modern hardware, where logic is now essentially free but moving data is relatively slow and expensive in time and energy. Making communication central to computation also prepares us for the increasing role geometry will play in the future of computing. New thinking may be essential to harnessing the vast concurrency provided by modern transistor circuits."
      },
      "after": "80c285a4e205a568",
      "date": 1469877990604
    },
    {
      "type": "move",
      "order": [
        "36e7a5b2-b4d0-41b4-8c55-baf03aa1f4a9",
        "1eb82e0989be5ff3",
        "80c285a4e205a568",
        "b153182f025272db",
        "60490ed52dc36016",
        "9c0dc9fa-b591-4355-a2df-8953990382c0",
        "f6104e81-dc3c-49c4-a113-509682d994dd",
        "4ad79458-4376-4d92-9d30-3cf3b5dff077",
        "f8fbda60-7233-46ec-8ccd-c6e7d850c14d",
        "570a7996a08d28e1"
      ],
      "id": "b153182f025272db",
      "date": 1469877994327
    },
    {
      "type": "remove",
      "id": "f6104e81-dc3c-49c4-a113-509682d994dd",
      "date": 1469878008995
    },
    {
      "type": "edit",
      "id": "b153182f025272db",
      "item": {
        "type": "video",
        "id": "b153182f025272db",
        "text": "YOUTUBE jR9pAaQlVRc\nSome Thoughts About Concurrency by Ivan Sutherland, Visiting Scientist at Portland State University"
      },
      "date": 1469878029374
    },
    {
      "type": "edit",
      "id": "1eb82e0989be5ff3",
      "item": {
        "type": "markdown",
        "id": "1eb82e0989be5ff3",
        "text": "# History of concurrency (hardware)"
      },
      "date": 1469878061903
    },
    {
      "type": "edit",
      "id": "36e7a5b2-b4d0-41b4-8c55-baf03aa1f4a9",
      "item": {
        "type": "paragraph",
        "id": "36e7a5b2-b4d0-41b4-8c55-baf03aa1f4a9",
        "text": "In computer science, concurrency is the decomposability property of a program, algorithm, or problem into order-independent or partially-ordered components or units - [https://en.wikipedia.org/wiki/Concurrency_(computer_science) wikipedia]"
      },
      "date": 1469878092847
    },
    {
      "type": "add",
      "id": "ed0901280d249c12",
      "item": {
        "type": "paragraph",
        "id": "ed0901280d249c12",
        "text": "This means that even if the concurrent units of the program, algorithm, or problem are executed out-of-order or in partial order, the final outcome will remain the same. This allows for parallel execution of the concurrent units, which can significantly improve overall speed of the execution in multi-processor and multi-core systems."
      },
      "after": "36e7a5b2-b4d0-41b4-8c55-baf03aa1f4a9",
      "date": 1469878093614
    },
    {
      "type": "edit",
      "id": "80c285a4e205a568",
      "item": {
        "type": "paragraph",
        "id": "80c285a4e205a568",
        "text": "Our industry has grown up with a sequential model of computing, evolved to husband the logic associated with a few vacuum tubes. Now we must struggle to harness the vast concurrency of modern transistor circuits. "
      },
      "date": 1469878108265
    },
    {
      "type": "add",
      "id": "94f12af8d475d120",
      "item": {
        "type": "paragraph",
        "id": "94f12af8d475d120",
        "text": "Is concurrency fundamentally hard, or does it just seem hard because of our history of sequential programming? I believe some of each. Concurrency is fundamentally hard for only two reasons. One is that concurrent action requires coordination. The other is that concurrent action of many processes can produce an exponential explosion of states. How can we be sure that all such states are benign?"
      },
      "after": "80c285a4e205a568",
      "date": 1469878109720
    },
    {
      "type": "edit",
      "id": "94f12af8d475d120",
      "item": {
        "type": "paragraph",
        "id": "94f12af8d475d120",
        "text": "Is concurrency fundamentally hard, or does it just seem hard because of our history of sequential programming? I believe some of each. "
      },
      "date": 1469878115905
    },
    {
      "type": "add",
      "id": "27a657d460a77d92",
      "item": {
        "type": "paragraph",
        "id": "27a657d460a77d92",
        "text": "Concurrency is fundamentally hard for only two reasons. One is that concurrent action requires coordination. The other is that concurrent action of many processes can produce an exponential explosion of states. How can we be sure that all such states are benign?"
      },
      "after": "94f12af8d475d120",
      "date": 1469878118040
    },
    {
      "type": "edit",
      "id": "9c0dc9fa-b591-4355-a2df-8953990382c0",
      "item": {
        "type": "html",
        "id": "9c0dc9fa-b591-4355-a2df-8953990382c0",
        "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;'>\n<a href='https://commons.wikimedia.org/wiki/File:An_illustration_of_the_dining_philosophers_problem.png' target='_blank'>\n<img style='display:block; margin:auto; width:100%;'\nsrc='https://upload.wikimedia.org/wikipedia/commons/7/7b/An_illustration_of_the_dining_philosophers_problem.png'>\n</a>\n\n<p class=caption>\nAn illustration of the dining philosophers problem.\nPhilosophers clockwise from top - [[Plato]], Konfuzius, [[Socrates]], [[Voltaire]] and [[Descartes]]  - [https://commons.wikimedia.org/wiki/File:An_illustration_of_the_dining_philosophers_problem.png wikimedia]\n</p></div>"
      },
      "date": 1469878197066
    },
    {
      "type": "edit",
      "id": "60490ed52dc36016",
      "item": {
        "type": "paragraph",
        "id": "60490ed52dc36016",
        "text": "Concurrency is easy when we escape its details. Maybe instead of \"programming sequential processes\" we might better \"configure concurrent communication.\" A communication view of computing matches well the cost structure of modern hardware, where logic is now essentially free but moving data is relatively slow and expensive in time and energy. "
      },
      "date": 1469878218027
    },
    {
      "type": "add",
      "id": "fb8704b86d826da3",
      "item": {
        "type": "paragraph",
        "id": "fb8704b86d826da3",
        "text": "Making communication central to computation also prepares us for the increasing role geometry will play in the future of computing. New thinking may be essential to harnessing the vast concurrency provided by modern transistor circuits."
      },
      "after": "60490ed52dc36016",
      "date": 1469878220155
    },
    {
      "type": "add",
      "id": "dbd0c796b4b6334c",
      "item": {
        "type": "paragraph",
        "id": "dbd0c796b4b6334c",
        "text": "# Concurrency models"
      },
      "after": "fb8704b86d826da3",
      "date": 1469878230669
    },
    {
      "type": "edit",
      "id": "dbd0c796b4b6334c",
      "item": {
        "type": "markdown",
        "id": "dbd0c796b4b6334c",
        "text": "# Concurrency models"
      },
      "date": 1469878231746
    },
    {
      "type": "remove",
      "id": "4ad79458-4376-4d92-9d30-3cf3b5dff077",
      "date": 1469878235573
    },
    {
      "type": "edit",
      "id": "dbd0c796b4b6334c",
      "item": {
        "type": "markdown",
        "id": "dbd0c796b4b6334c",
        "text": "# Concurrency models\nA number of mathematical models have been developed for general concurrent computation including [[Petri nets]], process calculi, the Parallel Random Access Machine model, the [[Actor model]] and the [[Reo Coordination Language]]."
      },
      "date": 1469878262943
    },
    {
      "item": {
        "type": "factory",
        "id": "edab47587ac87f86"
      },
      "id": "edab47587ac87f86",
      "type": "add",
      "after": "570a7996a08d28e1",
      "date": 1475588141080
    },
    {
      "type": "edit",
      "id": "edab47587ac87f86",
      "item": {
        "type": "markdown",
        "id": "edab47587ac87f86",
        "text": "# See also"
      },
      "date": 1475588149907
    },
    {
      "item": {
        "type": "factory",
        "id": "fec1c222c16c94b1"
      },
      "id": "fec1c222c16c94b1",
      "type": "add",
      "after": "edab47587ac87f86",
      "date": 1475588152595
    },
    {
      "type": "edit",
      "id": "fec1c222c16c94b1",
      "item": {
        "type": "reference",
        "id": "fec1c222c16c94b1",
        "site": "c0de.academy",
        "slug": "reo-coordination-language",
        "title": "Reo Coordination Language",
        "text": "Reo is a domain-specific language for programming and analyzing coordination protocols that compose individual processes into full systems, broadly construed - [https://en.wikipedia.org/wiki/Reo_Coordination_Language wikipedia]"
      },
      "date": 1475588155398
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "36e7a5b2-b4d0-41b4-8c55-baf03aa1f4a9",
      "text": "In computer science, concurrency is the decomposability property of a program, algorithm, or problem into order-independent or partially-ordered components or units - [https://en.wikipedia.org/wiki/Concurrency_(computer_science) wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "ed0901280d249c12",
      "text": "This means that even if the concurrent units of the program, algorithm, or problem are executed out-of-order or in partial order, the final outcome will remain the same. This allows for parallel execution of the concurrent units, which can significantly improve overall speed of the execution in multi-processor and multi-core systems."
    },
    {
      "type": "markdown",
      "id": "1eb82e0989be5ff3",
      "text": "# History of concurrency (hardware)"
    },
    {
      "type": "paragraph",
      "id": "80c285a4e205a568",
      "text": "Our industry has grown up with a sequential model of computing, evolved to husband the logic associated with a few vacuum tubes. Now we must struggle to harness the vast concurrency of modern transistor circuits. "
    },
    {
      "type": "paragraph",
      "id": "94f12af8d475d120",
      "text": "Is concurrency fundamentally hard, or does it just seem hard because of our history of sequential programming? I believe some of each. "
    },
    {
      "type": "paragraph",
      "id": "27a657d460a77d92",
      "text": "Concurrency is fundamentally hard for only two reasons. One is that concurrent action requires coordination. The other is that concurrent action of many processes can produce an exponential explosion of states. How can we be sure that all such states are benign?"
    },
    {
      "type": "video",
      "id": "b153182f025272db",
      "text": "YOUTUBE jR9pAaQlVRc\nSome Thoughts About Concurrency by Ivan Sutherland, Visiting Scientist at Portland State University"
    },
    {
      "type": "paragraph",
      "id": "60490ed52dc36016",
      "text": "Concurrency is easy when we escape its details. Maybe instead of \"programming sequential processes\" we might better \"configure concurrent communication.\" A communication view of computing matches well the cost structure of modern hardware, where logic is now essentially free but moving data is relatively slow and expensive in time and energy. "
    },
    {
      "type": "paragraph",
      "id": "fb8704b86d826da3",
      "text": "Making communication central to computation also prepares us for the increasing role geometry will play in the future of computing. New thinking may be essential to harnessing the vast concurrency provided by modern transistor circuits."
    },
    {
      "type": "markdown",
      "id": "dbd0c796b4b6334c",
      "text": "# Concurrency models\nA number of mathematical models have been developed for general concurrent computation including [[Petri nets]], process calculi, the Parallel Random Access Machine model, the [[Actor model]] and the [[Reo Coordination Language]]."
    },
    {
      "type": "html",
      "id": "9c0dc9fa-b591-4355-a2df-8953990382c0",
      "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;'>\n<a href='https://commons.wikimedia.org/wiki/File:An_illustration_of_the_dining_philosophers_problem.png' target='_blank'>\n<img style='display:block; margin:auto; width:100%;'\nsrc='https://upload.wikimedia.org/wikipedia/commons/7/7b/An_illustration_of_the_dining_philosophers_problem.png'>\n</a>\n\n<p class=caption>\nAn illustration of the dining philosophers problem.\nPhilosophers clockwise from top - [[Plato]], Konfuzius, [[Socrates]], [[Voltaire]] and [[Descartes]]  - [https://commons.wikimedia.org/wiki/File:An_illustration_of_the_dining_philosophers_problem.png wikimedia]\n</p></div>"
    },
    {
      "type": "markdown",
      "id": "f8fbda60-7233-46ec-8ccd-c6e7d850c14d",
      "text": "# See also\n* [[Issues]]\n* [[Theory]]\n* [[Practice]]\n* [[See also]]\n* [[References]]\n* [[Further reading]]\n* [[External links]]"
    },
    {
      "type": "video",
      "id": "570a7996a08d28e1",
      "text": "VIMEO 49718712\nRob (@rob_pike) is a software pioneer. His influence is everywhere: Unix, Plan 9 OS, The Unix Programming Environment book, UTF-8, and most recently the Go programming language - [http://blog.golang.org/concurrency-is-not-parallelism blog.golang.org] \nSlides: [http://talks.golang.org/2012/waza.slide talks.golang.org]"
    },
    {
      "type": "markdown",
      "id": "edab47587ac87f86",
      "text": "# See also"
    },
    {
      "type": "reference",
      "id": "fec1c222c16c94b1",
      "site": "c0de.academy",
      "slug": "reo-coordination-language",
      "title": "Reo Coordination Language",
      "text": "Reo is a domain-specific language for programming and analyzing coordination protocols that compose individual processes into full systems, broadly construed - [https://en.wikipedia.org/wiki/Reo_Coordination_Language wikipedia]"
    }
  ]
}