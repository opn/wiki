{
  "title": "LLVM",
  "story": [
    {
      "type": "paragraph",
      "id": "a7059e82a7c32865",
      "text": "The LLVM compiler infrastructure project (formerly Low Level Virtual Machine) is a [[Compiler Infrastructure]] designed to be a set of reusable libraries with well-defined interfaces - [https://en.wikipedia.org/wiki/LLVM wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "8f7226a6ed3d6798",
      "text": "\n[[LLVM]] can translate from any language supported by gcc 4.2.1 (Ada, C, C++, Fortran, Java, Objective-C, or Objective-C++) or by clang to any of: C, C++, or MSIL by way of the \"arch\" command in llvm-gcc."
    },
    {
      "type": "code",
      "id": "ae2938ee913616c7",
      "text": "llvm-g++ -emit-llvm x.cpp -o program.bc -c\nllc -march=c program.bc -o x.c\ncc x.c -lstdc++\n\nllvm-g++ x.cpp -o program.bc -c\nllc -march=msil program.bc -o program.msil\n\n"
    },
    {
      "type": "paragraph",
      "id": "30f5abcb45fababd",
      "text": "Translation to C has been removed from LLVM since version 3.1. It had numerous problems, to the point of not being able to compile any nontrivial program.[26]\nEmscripten\n\n"
    },
    {
      "type": "markdown",
      "id": "4258d4800fbfa7fe",
      "text": "#History"
    },
    {
      "type": "paragraph",
      "id": "a1328db94786b99c",
      "text": "LLVM is written in C++ and is designed for compile-time, link-time, run-time, and \"idle-time\" optimization of programs written in arbitrary programming languages. "
    },
    {
      "type": "paragraph",
      "id": "aa464c4af531c4c1",
      "text": "Originally implemented for C and C++, the language-agnostic design (and the success) of LLVM has since spawned a wide variety of front ends: languages with compilers that use LLVM include:"
    },
    {
      "type": "html",
      "id": "54a9774ed3840e91",
      "text": "<ul>\n<LI> Common Lisp\n<LI> ActionScript\n<LI> Ada<LI> D<\nLI> Fortran\n<LI> OpenGL Shading Language\n<LI> Go\n<LI> Haskell\n<LI> Java bytecode\n<LI> Julia\n<LI> Objective-C\n<LI> Swift\n<LI> Python\n<LI> Ruby\n<LI> Rust\n<LI> Scala\n<LI> C#\n<LI> Lua\n</ul>"
    },
    {
      "type": "paragraph",
      "id": "abb7b2fc3827082a",
      "text": "The LLVM project started in 2000 at the University of Illinois at Urbana–Champaign, under the direction of Vikram Adve and Chris Lattner. LLVM was originally developed as a research infrastructure to investigate dynamic compilation techniques for static and dynamic programming languages. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "LLVM",
        "story": []
      },
      "date": 1438243975845
    },
    {
      "item": {
        "type": "factory",
        "id": "a7059e82a7c32865"
      },
      "id": "a7059e82a7c32865",
      "type": "add",
      "date": 1438243977538
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8f7226a6ed3d6798",
        "text": "\n[[LLVM]] can translate from any language supported by gcc 4.2.1 (Ada, C, C++, Fortran, Java, Objective-C, or Objective-C++) or by clang to any of: C, C++, or MSIL by way of the \"arch\" command in llvm-gcc."
      },
      "after": "a7059e82a7c32865",
      "id": "8f7226a6ed3d6798",
      "date": 1438243981445
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "ae2938ee913616c7",
        "text": "llvm-g++ -emit-llvm x.cpp -o program.bc -c\nllc -march=c program.bc -o x.c\ncc x.c -lstdc++\n\nllvm-g++ x.cpp -o program.bc -c\nllc -march=msil program.bc -o program.msil\n\n"
      },
      "after": "8f7226a6ed3d6798",
      "id": "ae2938ee913616c7",
      "date": 1438243984302
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "30f5abcb45fababd",
        "text": "Translation to C has been removed from LLVM since version 3.1. It had numerous problems, to the point of not being able to compile any nontrivial program.[26]\nEmscripten\n\n"
      },
      "after": "ae2938ee913616c7",
      "id": "30f5abcb45fababd",
      "date": 1438243987883
    },
    {
      "type": "edit",
      "id": "a7059e82a7c32865",
      "item": {
        "type": "paragraph",
        "id": "a7059e82a7c32865",
        "text": "The LLVM compiler infrastructure project (formerly Low Level Virtual Machine) is a compiler infrastructure designed to be a set of reusable libraries with well-defined interfaces - [dfsa wikipedia]"
      },
      "date": 1438244141474
    },
    {
      "item": {
        "type": "factory",
        "id": "4258d4800fbfa7fe"
      },
      "id": "4258d4800fbfa7fe",
      "type": "add",
      "after": "30f5abcb45fababd",
      "date": 1438244143138
    },
    {
      "type": "edit",
      "id": "4258d4800fbfa7fe",
      "item": {
        "type": "paragraph",
        "id": "4258d4800fbfa7fe",
        "text": "#History"
      },
      "date": 1438244153079
    },
    {
      "type": "add",
      "id": "14d3379cd45b8315",
      "item": {
        "type": "paragraph",
        "id": "14d3379cd45b8315",
        "text": " (Compiler infrastructure libraries are used to construct compilers for programming languages. Compilers turn human-readable code into machine instructions.) LLVM is written in C++ and is designed for compile-time, link-time, run-time, and \"idle-time\" optimization of programs written in arbitrary programming languages. Originally implemented for C and C++, the language-agnostic design (and the success) of LLVM has since spawned a wide variety of front ends: languages with compilers that use LLVM include Common Lisp, ActionScript, Ada, D, Fortran, OpenGL Shading Language, Go, Haskell, Java bytecode, Julia, Objective-C, Swift, Python, Ruby, Rust, Scala, C# and Lua."
      },
      "after": "4258d4800fbfa7fe",
      "date": 1438244164219
    },
    {
      "type": "add",
      "id": "abb7b2fc3827082a",
      "item": {
        "type": "paragraph",
        "id": "abb7b2fc3827082a",
        "text": "The LLVM project started in 2000 at the University of Illinois at Urbana–Champaign, under the direction of Vikram Adve and Chris Lattner. LLVM was originally developed as a research infrastructure to investigate dynamic compilation techniques for static and dynamic programming languages. "
      },
      "after": "14d3379cd45b8315",
      "date": 1438244170073
    },
    {
      "type": "edit",
      "id": "4258d4800fbfa7fe",
      "item": {
        "type": "markdown",
        "id": "4258d4800fbfa7fe",
        "text": "#History"
      },
      "date": 1438244171975
    },
    {
      "type": "edit",
      "id": "14d3379cd45b8315",
      "item": {
        "type": "paragraph",
        "id": "14d3379cd45b8315",
        "text": "Compiler infrastructure libraries are used to construct compilers for programming languages. Compilers turn human-readable code into machine instructions.) "
      },
      "date": 1438244186304
    },
    {
      "type": "add",
      "id": "a1328db94786b99c",
      "item": {
        "type": "paragraph",
        "id": "a1328db94786b99c",
        "text": "LLVM is written in C++ and is designed for compile-time, link-time, run-time, and \"idle-time\" optimization of programs written in arbitrary programming languages. Originally implemented for C and C++, the language-agnostic design (and the success) of LLVM has since spawned a wide variety of front ends: languages with compilers that use LLVM include Common Lisp, ActionScript, Ada, D, Fortran, OpenGL Shading Language, Go, Haskell, Java bytecode, Julia, Objective-C, Swift, Python, Ruby, Rust, Scala, C# and Lua."
      },
      "after": "14d3379cd45b8315",
      "date": 1438244189452
    },
    {
      "type": "edit",
      "id": "14d3379cd45b8315",
      "item": {
        "type": "paragraph",
        "id": "14d3379cd45b8315",
        "text": "Compiler infrastructure libraries are used to construct compilers for programming languages. Compilers turn human-readable code into machine instructions. "
      },
      "date": 1438244200252
    },
    {
      "type": "edit",
      "id": "a7059e82a7c32865",
      "item": {
        "type": "paragraph",
        "id": "a7059e82a7c32865",
        "text": "The LLVM compiler infrastructure project (formerly Low Level Virtual Machine) is a compiler infrastructure designed to be a set of reusable libraries with well-defined interfaces - [https://en.wikipedia.org/wiki/LLVM wikipedia]"
      },
      "date": 1438244211091
    },
    {
      "type": "edit",
      "id": "a7059e82a7c32865",
      "item": {
        "type": "paragraph",
        "id": "a7059e82a7c32865",
        "text": "The LLVM compiler infrastructure project (formerly Low Level Virtual Machine) is a [[Compiler Infrastructure]] designed to be a set of reusable libraries with well-defined interfaces - [https://en.wikipedia.org/wiki/LLVM wikipedia]"
      },
      "date": 1438244236310
    },
    {
      "type": "remove",
      "id": "14d3379cd45b8315",
      "date": 1438244247536
    },
    {
      "type": "edit",
      "id": "a1328db94786b99c",
      "item": {
        "type": "paragraph",
        "id": "a1328db94786b99c",
        "text": "LLVM is written in C++ and is designed for compile-time, link-time, run-time, and \"idle-time\" optimization of programs written in arbitrary programming languages. "
      },
      "date": 1438244270119
    },
    {
      "type": "add",
      "id": "aa464c4af531c4c1",
      "item": {
        "type": "paragraph",
        "id": "aa464c4af531c4c1",
        "text": "Originally implemented for C and C++, the language-agnostic design (and the success) of LLVM has since spawned a wide variety of front ends: languages with compilers that use LLVM include:"
      },
      "after": "a1328db94786b99c",
      "date": 1438244281177
    },
    {
      "type": "add",
      "id": "54a9774ed3840e91",
      "item": {
        "type": "paragraph",
        "id": "54a9774ed3840e91",
        "text": "<OL>Common Lisp<LI> ActionScript<LI> Ada<LI> D<LI> Fortran<LI> OpenGL Shading Language<LI> Go<LI> Haskell<LI> Java bytecode<LI> Julia<LI> Objective-C<LI> Swift<LI> Python<LI> Ruby<LI> Rust<LI> Scala<LI> C#<LI> Lua</OL>"
      },
      "after": "aa464c4af531c4c1",
      "date": 1438244381862
    },
    {
      "type": "edit",
      "id": "54a9774ed3840e91",
      "item": {
        "type": "html",
        "id": "54a9774ed3840e91",
        "text": "<OL>Common Lisp<LI> ActionScript<LI> Ada<LI> D<LI> Fortran<LI> OpenGL Shading Language<LI> Go<LI> Haskell<LI> Java bytecode<LI> Julia<LI> Objective-C<LI> Swift<LI> Python<LI> Ruby<LI> Rust<LI> Scala<LI> C#<LI> Lua</OL>"
      },
      "date": 1438244382660
    },
    {
      "type": "edit",
      "id": "54a9774ed3840e91",
      "item": {
        "type": "html",
        "id": "54a9774ed3840e91",
        "text": "<OL>\n<LI> Common Lisp\n<LI> ActionScript\n<LI> Ada<LI> D<\nLI> Fortran\n<LI> OpenGL Shading Language\n<LI> Go\n<LI> Haskell\n<LI> Java bytecode\n<LI> Julia\n<LI> Objective-C\n<LI> Swift\n<LI> Python\n<LI> Ruby\n<LI> Rust\n<LI> Scala\n<LI> C#\n<LI> Lua\n</OL>"
      },
      "date": 1438244434554
    },
    {
      "type": "edit",
      "id": "54a9774ed3840e91",
      "item": {
        "type": "html",
        "id": "54a9774ed3840e91",
        "text": "<ul>\n<LI> Common Lisp\n<LI> ActionScript\n<LI> Ada<LI> D<\nLI> Fortran\n<LI> OpenGL Shading Language\n<LI> Go\n<LI> Haskell\n<LI> Java bytecode\n<LI> Julia\n<LI> Objective-C\n<LI> Swift\n<LI> Python\n<LI> Ruby\n<LI> Rust\n<LI> Scala\n<LI> C#\n<LI> Lua\n</ul>"
      },
      "date": 1438244448416
    }
  ]
}