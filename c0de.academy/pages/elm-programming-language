{
  "title": "Elm (programming language)",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Elm (programming language)"
      },
      "date": 1469796330324,
      "source": {
        "pageTitle": "Elm (programming language)",
        "pageSlug": "Elm_(programming_language)",
        "url": "https://en.wikipedia.org/wiki/Elm_(programming_language)",
        "date": 1469796330324,
        "link_dictionary": {
          "wiki_links": {
            "Tools": {
              "section_number": 8,
              "section_level": 2,
              "dot_number": 4
            },
            "References": {
              "section_number": 10,
              "section_level": 2,
              "dot_number": 6
            },
            "External links": {
              "section_number": 11,
              "section_level": 2,
              "dot_number": 7
            },
            "Limitations": {
              "section_number": 7,
              "section_level": 2,
              "dot_number": 3
            },
            "History": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Features": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "Example Code": {
              "section_number": 9,
              "section_level": 2,
              "dot_number": 5
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 729591606,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1469796336900
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6c5a13d3-c213-447c-abda-0ae7f1db015f",
        "text": "Elm was designed by Evan Czaplicki as his thesis in 2012. The first release of Elm came with many examples and an online editor that made it easy to try out in a web browser. Evan Czaplicki joined [[Prezi]] in 2013 to work on Elm, and in 2016 moved to [[NoRedInk]] as an Open Source Engineer, also starting the Elm Software Foundation. - [https://en.wikipedia.org/wiki/Elm_(programming_language)#History wikipedia]"
      },
      "after": "98cf4935-6097-4db4-bc92-076e594e38ad",
      "id": "6c5a13d3-c213-447c-abda-0ae7f1db015f",
      "date": 1469796345725
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "58d1d74a-52ef-473d-9e03-8e59ea14895c",
        "text": "The initial implementation of the Elm compiler targets HTML, CSS, and JavaScript. The set of core tools has continued to expand, now including a REPL ([[Read-eval-print loop]]), package manager ([[Package management system]]), time-traveling debugger, and installers for Mac and Windows. Elm also has an ecosystem of community created libraries."
      },
      "after": "6c5a13d3-c213-447c-abda-0ae7f1db015f",
      "id": "58d1d74a-52ef-473d-9e03-8e59ea14895c",
      "date": 1469796347451
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
        "text": "Elm has a small but expressive set of language constructs, including if-expressions, let-expressions, case-expressions, anonymous functions, and list interpolation. From there the key features include signals, immutability, static types, and interoperability with HTML, CSS, and JavaScript - [https://en.wikipedia.org/wiki/Elm_(programming_language)#Features wikipedia]"
      },
      "after": "58d1d74a-52ef-473d-9e03-8e59ea14895c",
      "id": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
      "date": 1469796367382
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5b38214e-d09a-47b0-a8aa-e6b70b5704be",
        "text": "All values in Elm are immutable ([[Immutable object]]), meaning that a value cannot be modified after it is created. Elm uses [[persistent data structure]]s to implement its <code>Array</code>, <code>Dict</code>, and <code>Set</code> libraries."
      },
      "after": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
      "id": "5b38214e-d09a-47b0-a8aa-e6b70b5704be",
      "date": 1469796370179
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "15c53f3c-8420-484d-8d00-3925e41cd4c6",
        "text": "# Immutability"
      },
      "after": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
      "id": "15c53f3c-8420-484d-8d00-3925e41cd4c6",
      "date": 1469796374674
    },
    {
      "type": "edit",
      "id": "da789806-f8f7-473a-97f5-cd21723c0e08",
      "item": {
        "type": "markdown",
        "id": "da789806-f8f7-473a-97f5-cd21723c0e08",
        "text": "# See also\n* [[Limitations]]\n* [[Tools]]\n* [[Example Code]]\n* [[References]]\n* [[External links]]"
      },
      "date": 1469796382176
    },
    {
      "type": "edit",
      "id": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
      "item": {
        "type": "paragraph",
        "id": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
        "text": "# History"
      },
      "date": 1469796392935
    },
    {
      "type": "edit",
      "id": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
      "item": {
        "type": "markdown",
        "id": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
        "text": "# History"
      },
      "date": 1469796394131
    },
    {
      "type": "add",
      "id": "14b69fcbf7117c57",
      "item": {
        "type": "paragraph",
        "id": "14b69fcbf7117c57",
        "text": "Elm has a small but expressive set of language constructs, including if-expressions, let-expressions, case-expressions, anonymous functions, and list interpolation. From there the key features include signals, immutability, static types, and interoperability with HTML, CSS, and JavaScript - [https://en.wikipedia.org/wiki/Elm_(programming_language)#Features wikipedia]"
      },
      "after": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
      "date": 1469796399517
    },
    {
      "type": "add",
      "id": "def99387690a36aa",
      "item": {
        "type": "paragraph",
        "id": "def99387690a36aa",
        "text": "# Features"
      },
      "after": "14b69fcbf7117c57",
      "date": 1469796457754
    },
    {
      "type": "edit",
      "id": "def99387690a36aa",
      "item": {
        "type": "markdown",
        "id": "def99387690a36aa",
        "text": "# Features"
      },
      "date": 1469796458687
    },
    {
      "type": "move",
      "order": [
        "98cf4935-6097-4db4-bc92-076e594e38ad",
        "6c5a13d3-c213-447c-abda-0ae7f1db015f",
        "47a343ed-a71a-44c5-8d94-ad2dfde98962",
        "58d1d74a-52ef-473d-9e03-8e59ea14895c",
        "14b69fcbf7117c57",
        "def99387690a36aa",
        "15c53f3c-8420-484d-8d00-3925e41cd4c6",
        "5b38214e-d09a-47b0-a8aa-e6b70b5704be",
        "da789806-f8f7-473a-97f5-cd21723c0e08"
      ],
      "id": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
      "date": 1469796462958
    },
    {
      "type": "move",
      "order": [
        "98cf4935-6097-4db4-bc92-076e594e38ad",
        "6c5a13d3-c213-447c-abda-0ae7f1db015f",
        "47a343ed-a71a-44c5-8d94-ad2dfde98962",
        "58d1d74a-52ef-473d-9e03-8e59ea14895c",
        "def99387690a36aa",
        "14b69fcbf7117c57",
        "15c53f3c-8420-484d-8d00-3925e41cd4c6",
        "5b38214e-d09a-47b0-a8aa-e6b70b5704be",
        "da789806-f8f7-473a-97f5-cd21723c0e08"
      ],
      "id": "def99387690a36aa",
      "date": 1469796464723
    },
    {
      "type": "edit",
      "id": "5b38214e-d09a-47b0-a8aa-e6b70b5704be",
      "item": {
        "type": "markdown",
        "id": "5b38214e-d09a-47b0-a8aa-e6b70b5704be",
        "text": "All values in Elm are immutable ([[Immutable object]]), meaning that a value cannot be modified after it is created. Elm uses [[persistent data structure]]s to implement its <code>Array</code>, <code>Dict</code>, and <code>Set</code> libraries."
      },
      "date": 1469796494282
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "11b7768c-2ee0-4fbf-a483-0a21b197bb97",
        "text": "# Static Types"
      },
      "after": "5b38214e-d09a-47b0-a8aa-e6b70b5704be",
      "id": "11b7768c-2ee0-4fbf-a483-0a21b197bb97",
      "date": 1469796505143
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d1aaa7e7-b793-44fb-bebc-590d5e1fe5b2",
        "text": "Elm is statically typed. Every definition in Elm can be given a type annotation that describes the exact shape of the value. Types include:"
      },
      "after": "11b7768c-2ee0-4fbf-a483-0a21b197bb97",
      "id": "d1aaa7e7-b793-44fb-bebc-590d5e1fe5b2",
      "date": 1469796508273
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "3030a7dd-f275-4bbe-9082-9f45a2f317d5",
        "text": "* primitive types such as integers and strings\n* basic data structures such as lists, tuples, and extensible records\n* custom types called [[Tagged union|tagged unions]] that let you build entirely new types[http://elm-lang.org/guide/model-the-problem Model The Problem]"
      },
      "after": "d1aaa7e7-b793-44fb-bebc-590d5e1fe5b2",
      "id": "3030a7dd-f275-4bbe-9082-9f45a2f317d5",
      "date": 1469796511204
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b389723b-8953-478d-8f8a-dee33926c25a",
        "text": "Elm also supports full type inference, so the compiler can verify that a program is type-safe without any type annotations."
      },
      "after": "3030a7dd-f275-4bbe-9082-9f45a2f317d5",
      "id": "b389723b-8953-478d-8f8a-dee33926c25a",
      "date": 1469796514004
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "5aa7fd31-9d5d-4805-909f-2fa3a1885043",
        "text": "# Module System"
      },
      "after": "b389723b-8953-478d-8f8a-dee33926c25a",
      "id": "5aa7fd31-9d5d-4805-909f-2fa3a1885043",
      "date": 1469796518332
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4acd0c5a-f1fa-4e5f-a7fa-3e2f2e7b1d69",
        "text": "Elm has a module system ([[Modular programming]]) that allows users to break their code into smaller parts called modules. Users can import and export values, making it possible to hide implementation details that other programmers do not need to think about. Modules form the basis of Elm's community library website, the [http://package.elm-lang.org/packages/ Elm Public Library]."
      },
      "after": "5aa7fd31-9d5d-4805-909f-2fa3a1885043",
      "id": "4acd0c5a-f1fa-4e5f-a7fa-3e2f2e7b1d69",
      "date": 1469796521375
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ce4fe070-8c08-45ec-a381-4cbe56bc7e7b",
        "text": "# Interoperability with HTML, CSS, and JavaScript"
      },
      "after": "4acd0c5a-f1fa-4e5f-a7fa-3e2f2e7b1d69",
      "id": "ce4fe070-8c08-45ec-a381-4cbe56bc7e7b",
      "date": 1469796525017
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7256977f-dabe-4887-a482-3bd3e81436ba",
        "text": "Elm uses an abstraction called ports to communicate with [[JavaScript]]. It allows values to flow in and out of Elm programs, making it possible to communicate between Elm and JavaScript."
      },
      "after": "ce4fe070-8c08-45ec-a381-4cbe56bc7e7b",
      "id": "7256977f-dabe-4887-a482-3bd3e81436ba",
      "date": 1469796529579
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "bb94fa59-e55e-47ec-9da5-6deff1f19bb8",
        "text": "Elm also has a library called elm-html which lets users use HTML within Elm and style it with CSS. It uses a virtual DOM approach to make updates efficient."
      },
      "after": "7256977f-dabe-4887-a482-3bd3e81436ba",
      "id": "bb94fa59-e55e-47ec-9da5-6deff1f19bb8",
      "date": 1469796532717
    },
    {
      "item": {
        "type": "factory",
        "id": "571fefa014c9f54c"
      },
      "id": "571fefa014c9f54c",
      "type": "add",
      "after": "da789806-f8f7-473a-97f5-cd21723c0e08",
      "date": 1469803966748
    },
    {
      "item": {
        "type": "factory",
        "id": "97c670bafebd060e"
      },
      "id": "97c670bafebd060e",
      "type": "add",
      "after": "571fefa014c9f54c",
      "date": 1469803967840
    },
    {
      "item": {
        "type": "factory",
        "id": "7d6f3e4168479696"
      },
      "id": "7d6f3e4168479696",
      "type": "add",
      "after": "97c670bafebd060e",
      "date": 1469803968977
    },
    {
      "type": "edit",
      "id": "571fefa014c9f54c",
      "item": {
        "type": "video",
        "id": "571fefa014c9f54c",
        "text": "VIMEO 36579366\n(double-click to edit caption)\n"
      },
      "date": 1469803985238
    },
    {
      "type": "edit",
      "id": "97c670bafebd060e",
      "item": {
        "type": "video",
        "id": "97c670bafebd060e",
        "text": "VIMEO 71278954\n(double-click to edit caption)\n"
      },
      "date": 1469803994602
    },
    {
      "type": "edit",
      "id": "7d6f3e4168479696",
      "item": {
        "type": "video",
        "id": "7d6f3e4168479696",
        "text": "https://destroyallsoftware-talks.s3.amazonaws.com/wat.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIKRVCECXBC4ZGHIQ%2F20160729%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20160729T144321Z&X-Amz-Expires=14400&X-Amz-SignedHeaders=host&X-Amz-Signature=18f14023e89cd2b55b56d10c5d3172f63b5a2b3978cb56e894a161f41ff37e6f\nasdf"
      },
      "date": 1469804037452
    },
    {
      "item": {
        "type": "factory",
        "id": "fe5346c31136cfbb"
      },
      "id": "fe5346c31136cfbb",
      "type": "add",
      "after": "7d6f3e4168479696",
      "date": 1469804040209
    },
    {
      "type": "edit",
      "id": "fe5346c31136cfbb",
      "item": {
        "type": "html",
        "id": "fe5346c31136cfbb",
        "text": "<video scr=\"https://destroyallsoftware-talks.s3.amazonaws.com/wat.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIKRVCECXBC4ZGHIQ%2F20160729%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20160729T144321Z&X-Amz-Expires=14400&X-Amz-SignedHeaders=host&X-Amz-Signature=18f14023e89cd2b55b56d10c5d3172f63b5a2b3978cb56e894a161f41ff37e6f\">"
      },
      "date": 1469804058949
    },
    {
      "type": "remove",
      "id": "7d6f3e4168479696",
      "date": 1469804069833
    },
    {
      "type": "edit",
      "id": "fe5346c31136cfbb",
      "item": {
        "type": "html",
        "id": "fe5346c31136cfbb",
        "text": "<video src=\"https://destroyallsoftware-talks.s3.amazonaws.com/wat.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIKRVCECXBC4ZGHIQ%2F20160729%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20160729T144321Z&X-Amz-Expires=14400&X-Amz-SignedHeaders=host&X-Amz-Signature=18f14023e89cd2b55b56d10c5d3172f63b5a2b3978cb56e894a161f41ff37e6f\" width=420 controls>"
      },
      "date": 1469804138550
    },
    {
      "type": "edit",
      "id": "fe5346c31136cfbb",
      "item": {
        "type": "html",
        "id": "fe5346c31136cfbb",
        "text": "<video src=\"https://destroyallsoftware-talks.s3.amazonaws.com/wat.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIKRVCECXBC4ZGHIQ%2F20160729%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20160729T144321Z&X-Amz-Expires=14400&X-Amz-SignedHeaders=host&X-Amz-Signature=18f14023e89cd2b55b56d10c5d3172f63b5a2b3978cb56e894a161f41ff37e6f\" width=420 controls>\n\n<p>\n[https://www.destroyallsoftware.com/talks/wat destroyallsoftware.com]"
      },
      "date": 1469804180168
    },
    {
      "type": "edit",
      "id": "571fefa014c9f54c",
      "item": {
        "type": "video",
        "id": "571fefa014c9f54c",
        "text": "VIMEO 36579366\nBio: Bret Victor invents tools that enable people to understand and create. He has designed experimental UI concepts at Apple, interactive data graphics for Al Gore, and musical instruments at Alesis. For more on Bret, see [http://[worrydream.com worrydream.com]"
      },
      "date": 1469804233417
    },
    {
      "type": "edit",
      "id": "97c670bafebd060e",
      "item": {
        "type": "video",
        "id": "97c670bafebd060e",
        "text": "VIMEO 71278954\nPresented at Dropbox's DBX conference on July 9, 2013. For references and more information, see [http://worrydream.com/dbx worrydream.com]"
      },
      "date": 1469804290524
    },
    {
      "type": "move",
      "order": [
        "98cf4935-6097-4db4-bc92-076e594e38ad",
        "6c5a13d3-c213-447c-abda-0ae7f1db015f",
        "47a343ed-a71a-44c5-8d94-ad2dfde98962",
        "58d1d74a-52ef-473d-9e03-8e59ea14895c",
        "def99387690a36aa",
        "14b69fcbf7117c57",
        "15c53f3c-8420-484d-8d00-3925e41cd4c6",
        "5b38214e-d09a-47b0-a8aa-e6b70b5704be",
        "11b7768c-2ee0-4fbf-a483-0a21b197bb97",
        "d1aaa7e7-b793-44fb-bebc-590d5e1fe5b2",
        "571fefa014c9f54c",
        "3030a7dd-f275-4bbe-9082-9f45a2f317d5",
        "b389723b-8953-478d-8f8a-dee33926c25a",
        "5aa7fd31-9d5d-4805-909f-2fa3a1885043",
        "4acd0c5a-f1fa-4e5f-a7fa-3e2f2e7b1d69",
        "ce4fe070-8c08-45ec-a381-4cbe56bc7e7b",
        "7256977f-dabe-4887-a482-3bd3e81436ba",
        "bb94fa59-e55e-47ec-9da5-6deff1f19bb8",
        "da789806-f8f7-473a-97f5-cd21723c0e08",
        "97c670bafebd060e",
        "fe5346c31136cfbb"
      ],
      "id": "571fefa014c9f54c",
      "date": 1469812655212
    },
    {
      "type": "edit",
      "id": "571fefa014c9f54c",
      "item": {
        "type": "video",
        "id": "571fefa014c9f54c",
        "text": "VIMEO 36579366\nBio: [[Bret Victor]] invents tools that enable people to understand and create. He has designed experimental UI concepts at Apple, interactive data graphics for Al Gore, and musical instruments at Alesis. For more on Bret, see [http://[worrydream.com worrydream.com]"
      },
      "date": 1469812668259
    },
    {
      "type": "edit",
      "id": "da789806-f8f7-473a-97f5-cd21723c0e08",
      "item": {
        "type": "markdown",
        "id": "da789806-f8f7-473a-97f5-cd21723c0e08",
        "text": "# See also\n* [[Limitations]]\n* [[Tools]]\n* [[Example Code]]\n* [[References]]\n* [[External links]]\n* [[Software Jokes]]"
      },
      "date": 1469820818819
    },
    {
      "type": "remove",
      "id": "fe5346c31136cfbb",
      "date": 1469820846844
    },
    {
      "type": "edit",
      "id": "da789806-f8f7-473a-97f5-cd21723c0e08",
      "item": {
        "type": "markdown",
        "id": "da789806-f8f7-473a-97f5-cd21723c0e08",
        "text": "# See also\n* [[Limitations]]\n* [[Tools]]\n* [[Example Code]]\n* [[References]]\n* [[External links]]\n* [[Software Jokes]]\n* [[Future of Programming]]"
      },
      "date": 1469820871843
    },
    {
      "type": "remove",
      "id": "97c670bafebd060e",
      "date": 1469820905593
    },
    {
      "type": "remove",
      "id": "571fefa014c9f54c",
      "date": 1469820928247
    },
    {
      "type": "add",
      "id": "f4d3a03d6bb7cd53",
      "item": {
        "type": "paragraph",
        "id": "f4d3a03d6bb7cd53",
        "text": "* [https://www.gitbook.com/book/evancz/an-introduction-to-elm/details gitbook]"
      },
      "after": "98cf4935-6097-4db4-bc92-076e594e38ad",
      "date": 1469820975367
    },
    {
      "type": "edit",
      "id": "f4d3a03d6bb7cd53",
      "item": {
        "type": "markdown",
        "id": "f4d3a03d6bb7cd53",
        "text": "* [https://www.gitbook.com/book/evancz/an-introduction-to-elm/details gitbook]"
      },
      "date": 1469820982254
    },
    {
      "type": "edit",
      "id": "f4d3a03d6bb7cd53",
      "item": {
        "type": "markdown",
        "id": "f4d3a03d6bb7cd53",
        "text": "* [https://www.gitbook.com/book/evancz/an-introduction-to-elm/details gitbook]\n* [[Reactive Programming]]"
      },
      "date": 1469871246973
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "98cf4935-6097-4db4-bc92-076e594e38ad",
      "text": "Elm is a functional programming language for declaratively creating web browser-based graphical user interfaces. Elm uses the functional reactive programming style and purely functional graphical layout to build user interface without any destructive updates - [https://en.wikipedia.org/wiki/Elm_(programming_language) wikipedia]"
    },
    {
      "type": "markdown",
      "id": "f4d3a03d6bb7cd53",
      "text": "* [https://www.gitbook.com/book/evancz/an-introduction-to-elm/details gitbook]\n* [[Reactive Programming]]"
    },
    {
      "type": "paragraph",
      "id": "6c5a13d3-c213-447c-abda-0ae7f1db015f",
      "text": "Elm was designed by Evan Czaplicki as his thesis in 2012. The first release of Elm came with many examples and an online editor that made it easy to try out in a web browser. Evan Czaplicki joined [[Prezi]] in 2013 to work on Elm, and in 2016 moved to [[NoRedInk]] as an Open Source Engineer, also starting the Elm Software Foundation. - [https://en.wikipedia.org/wiki/Elm_(programming_language)#History wikipedia]"
    },
    {
      "type": "markdown",
      "id": "47a343ed-a71a-44c5-8d94-ad2dfde98962",
      "text": "# History"
    },
    {
      "type": "paragraph",
      "id": "58d1d74a-52ef-473d-9e03-8e59ea14895c",
      "text": "The initial implementation of the Elm compiler targets HTML, CSS, and JavaScript. The set of core tools has continued to expand, now including a REPL ([[Read-eval-print loop]]), package manager ([[Package management system]]), time-traveling debugger, and installers for Mac and Windows. Elm also has an ecosystem of community created libraries."
    },
    {
      "type": "markdown",
      "id": "def99387690a36aa",
      "text": "# Features"
    },
    {
      "type": "paragraph",
      "id": "14b69fcbf7117c57",
      "text": "Elm has a small but expressive set of language constructs, including if-expressions, let-expressions, case-expressions, anonymous functions, and list interpolation. From there the key features include signals, immutability, static types, and interoperability with HTML, CSS, and JavaScript - [https://en.wikipedia.org/wiki/Elm_(programming_language)#Features wikipedia]"
    },
    {
      "type": "markdown",
      "id": "15c53f3c-8420-484d-8d00-3925e41cd4c6",
      "text": "# Immutability"
    },
    {
      "type": "markdown",
      "id": "5b38214e-d09a-47b0-a8aa-e6b70b5704be",
      "text": "All values in Elm are immutable ([[Immutable object]]), meaning that a value cannot be modified after it is created. Elm uses [[persistent data structure]]s to implement its <code>Array</code>, <code>Dict</code>, and <code>Set</code> libraries."
    },
    {
      "type": "markdown",
      "id": "11b7768c-2ee0-4fbf-a483-0a21b197bb97",
      "text": "# Static Types"
    },
    {
      "type": "paragraph",
      "id": "d1aaa7e7-b793-44fb-bebc-590d5e1fe5b2",
      "text": "Elm is statically typed. Every definition in Elm can be given a type annotation that describes the exact shape of the value. Types include:"
    },
    {
      "type": "markdown",
      "id": "3030a7dd-f275-4bbe-9082-9f45a2f317d5",
      "text": "* primitive types such as integers and strings\n* basic data structures such as lists, tuples, and extensible records\n* custom types called [[Tagged union|tagged unions]] that let you build entirely new types[http://elm-lang.org/guide/model-the-problem Model The Problem]"
    },
    {
      "type": "paragraph",
      "id": "b389723b-8953-478d-8f8a-dee33926c25a",
      "text": "Elm also supports full type inference, so the compiler can verify that a program is type-safe without any type annotations."
    },
    {
      "type": "markdown",
      "id": "5aa7fd31-9d5d-4805-909f-2fa3a1885043",
      "text": "# Module System"
    },
    {
      "type": "paragraph",
      "id": "4acd0c5a-f1fa-4e5f-a7fa-3e2f2e7b1d69",
      "text": "Elm has a module system ([[Modular programming]]) that allows users to break their code into smaller parts called modules. Users can import and export values, making it possible to hide implementation details that other programmers do not need to think about. Modules form the basis of Elm's community library website, the [http://package.elm-lang.org/packages/ Elm Public Library]."
    },
    {
      "type": "markdown",
      "id": "ce4fe070-8c08-45ec-a381-4cbe56bc7e7b",
      "text": "# Interoperability with HTML, CSS, and JavaScript"
    },
    {
      "type": "paragraph",
      "id": "7256977f-dabe-4887-a482-3bd3e81436ba",
      "text": "Elm uses an abstraction called ports to communicate with [[JavaScript]]. It allows values to flow in and out of Elm programs, making it possible to communicate between Elm and JavaScript."
    },
    {
      "type": "paragraph",
      "id": "bb94fa59-e55e-47ec-9da5-6deff1f19bb8",
      "text": "Elm also has a library called elm-html which lets users use HTML within Elm and style it with CSS. It uses a virtual DOM approach to make updates efficient."
    },
    {
      "type": "markdown",
      "id": "da789806-f8f7-473a-97f5-cd21723c0e08",
      "text": "# See also\n* [[Limitations]]\n* [[Tools]]\n* [[Example Code]]\n* [[References]]\n* [[External links]]\n* [[Software Jokes]]\n* [[Future of Programming]]"
    }
  ]
}