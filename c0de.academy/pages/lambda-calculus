{
  "title": "Lambda calculus",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Lambda calculus"
      },
      "date": 1467739250637,
      "source": {
        "pageTitle": "Lambda calculus",
        "pageSlug": "Lambda calculus",
        "url": "https://en.wikipedia.org/wiki/Lambda_calculus",
        "date": 1467739250637,
        "link_dictionary": {
          "wiki_links": {
            "Normal forms and confluence": {
              "section_number": 21,
              "section_level": 2,
              "dot_number": 6
            },
            "Semantics": {
              "section_number": 36,
              "section_level": 2,
              "dot_number": 12
            },
            "Explanation and applications": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Typed lambda calculus": {
              "section_number": 28,
              "section_level": 2,
              "dot_number": 8
            },
            "Undecidability of equivalence": {
              "section_number": 30,
              "section_level": 2,
              "dot_number": 10
            },
            "See also": {
              "section_number": 37,
              "section_level": 2,
              "dot_number": 13
            },
            "Informal description": {
              "section_number": 3,
              "section_level": 2,
              "dot_number": 3
            },
            "Computable functions and lambda calculus": {
              "section_number": 29,
              "section_level": 2,
              "dot_number": 9
            },
            "Formal definition": {
              "section_number": 12,
              "section_level": 2,
              "dot_number": 4
            },
            "References": {
              "section_number": 40,
              "section_level": 2,
              "dot_number": 16
            },
            "Reduction": {
              "section_number": 16,
              "section_level": 2,
              "dot_number": 5
            },
            "Encoding datatypes": {
              "section_number": 22,
              "section_level": 2,
              "dot_number": 7
            },
            "External links": {
              "section_number": 39,
              "section_level": 2,
              "dot_number": 15
            },
            "Lambda calculus in history of mathematics": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "Lambda calculus and programming languages": {
              "section_number": 31,
              "section_level": 2,
              "dot_number": 11
            },
            "Further reading": {
              "section_number": 38,
              "section_level": 2,
              "dot_number": 14
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 725160193,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1467739253268
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "201764a1-0666-419b-bb73-3c823737773e",
      "text": "Lambda calculus (also written as λ-calculus) is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution. It is a universal model of computation that can be used to simulate any single-taped Turing machine and was first introduced by mathematician Alonzo Church in the 1930s as part of an investigation into the foundations of mathematics - [https://en.wikipedia.org/wiki/Lambda_calculus wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "3ab307ae-99c3-4289-b2b7-47f253d0d32a",
      "text": "Lambda calculus (also written as λ-calculus) is a formal system in mathematical logic for expressing computation based on function abstraction and application using variable binding and substitution. It is a universal model of computation that can be used to simulate any single-taped Turing machine and was first introduced by mathematician Alonzo Church in the 1930s as part of an investigation into the foundations of mathematics."
    },
    {
      "type": "markdown",
      "id": "4930add1-6823-4cff-adc3-38b8598c9baa",
      "text": "# See also\n* [[Explanation and applications]]\n* [[Lambda calculus in history of mathematics]]\n* [[Informal description]]\n* [[Formal definition]]\n* [[Reduction]]\n* [[Normal forms and confluence]]\n* [[Encoding datatypes]]\n* [[Typed lambda calculus]]\n* [[Computable functions and lambda calculus]]\n* [[Undecidability of equivalence]]\n* [[Lambda calculus and programming languages]]\n* [[Semantics]]\n* [[See also]]\n* [[Further reading]]\n* [[External links]]\n* [[References]]"
    }
  ]
}