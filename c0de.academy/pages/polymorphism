{
  "title": "Polymorphism",
  "story": [
    {
      "type": "paragraph",
      "id": "85bf2c4c-3182-4eef-b184-cea32a12267a",
      "text": "[[Subtyping]], a form of polymorphism ([[polymorphism (computer science)]]), is when calling code can be agnostic as to whether an object belongs to a parent class or one of its descendants.  For example, a function might call \"make_full_name()\" on an object, which will work whether the object is of class Person or class Employee.  This is another type of abstraction which simplifies code external to the class hierarchy and enables strong [[separation of concerns]] - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Polymorphism wikipedia]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Polymorphism"
      },
      "date": 1466431004629,
      "source": {
        "pageTitle": "Object-oriented programming",
        "pageSlug": "Object-oriented programming",
        "url": "https://en.wikipedia.org/wiki/Object_Oriented_Programming#Polymorphism",
        "date": 1466431004629,
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 726062889,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466431006414
    }
  ]
}