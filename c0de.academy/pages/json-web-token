{
  "title": "JSON Web Token",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "JSON Web Token"
      },
      "date": 1502462092053,
      "source": {
        "pageTitle": "JSON Web Token",
        "pageSlug": "JSON_Web_Token",
        "url": "https://en.wikipedia.org/wiki/JSON_Web_Token",
        "date": 1502462092053,
        "link_dictionary": {
          "wiki_links": {
            "Standard fields": {
              "section_number": 3,
              "section_level": 2,
              "dot_number": 3
            },
            "External links": {
              "section_number": 6,
              "section_level": 2,
              "dot_number": 6
            },
            "References": {
              "section_number": 5,
              "section_level": 2,
              "dot_number": 5
            },
            "Structure": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Use": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "Implementations": {
              "section_number": 4,
              "section_level": 2,
              "dot_number": 4
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 793585313,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1502462087643
    },
    {
      "type": "edit",
      "id": "3348a650-6ad1-460c-8d9d-66f2fb8c2ac1",
      "item": {
        "type": "paragraph",
        "id": "3348a650-6ad1-460c-8d9d-66f2fb8c2ac1",
        "text": "JSON Web Token (JWT, pronounced ) is a JSON-based open standard (RFC 7519) for creating access tokens that assert some number of claims. "
      },
      "date": 1502462102365
    },
    {
      "type": "add",
      "id": "e036ee875b8dd080",
      "item": {
        "type": "paragraph",
        "id": "e036ee875b8dd080",
        "text": "For example, a server could generate a token that has the claim \"logged in as admin\" and provide that to a client. The client could then use that token to prove that it is logged in as admin. "
      },
      "after": "3348a650-6ad1-460c-8d9d-66f2fb8c2ac1",
      "date": 1502462105748
    },
    {
      "type": "add",
      "id": "b64fdb701df1f2e5",
      "item": {
        "type": "paragraph",
        "id": "b64fdb701df1f2e5",
        "text": "The tokens are signed by the server's key, so the client and server are both able to verify that the token is legitimate. The tokens are designed to be compact , URL-safe and usable especially in web browser single sign-on (SSO) context. "
      },
      "after": "e036ee875b8dd080",
      "date": 1502462110269
    },
    {
      "type": "add",
      "id": "58c2458043917c16",
      "item": {
        "type": "paragraph",
        "id": "58c2458043917c16",
        "text": "JWT claims can be typically used to pass identity of authenticated users between an identity provider and a service provider, or any other type of claims as required by business processes. The tokens can also be authenticated and encrypted - [https://en.wikipedia.org/wiki/JSON_Web_Token wikipedia]"
      },
      "after": "b64fdb701df1f2e5",
      "date": 1502462114331
    },
    {
      "type": "add",
      "id": "d2ad199124bbd88e",
      "item": {
        "type": "paragraph",
        "id": "d2ad199124bbd88e",
        "text": "JSON Web Token (JWT, pronounced jot) is a relatively new token format used in space-constrained environments such as HTTP Authorization headers. JWT is architected as a method for transferring security claims based between parties."
      },
      "after": "3348a650-6ad1-460c-8d9d-66f2fb8c2ac1",
      "date": 1502462184115
    },
    {
      "type": "remove",
      "id": "3348a650-6ad1-460c-8d9d-66f2fb8c2ac1",
      "date": 1502462189924
    },
    {
      "type": "edit",
      "id": "d2ad199124bbd88e",
      "item": {
        "type": "paragraph",
        "id": "d2ad199124bbd88e",
        "text": "JSON Web Token (JWT, pronounced jot) is a relatively new token format used in space-constrained environments such as HTTP Authorization headers. JWT is architected as a method for transferring security claims based between parties. It is and open standard (RFC 7519)."
      },
      "date": 1502462235686
    },
    {
      "type": "edit",
      "id": "58c2458043917c16",
      "item": {
        "type": "paragraph",
        "id": "58c2458043917c16",
        "text": " - [https://en.wikipedia.org/wiki/JSON_Web_Token wikipedia]"
      },
      "date": 1502462305516
    },
    {
      "type": "remove",
      "id": "e036ee875b8dd080",
      "date": 1502462306741
    },
    {
      "type": "remove",
      "id": "1d5d8456-26f5-4c52-97e4-23f6de93428c",
      "date": 1502462313118
    },
    {
      "item": {
        "type": "factory",
        "id": "5649aab56ce24252"
      },
      "id": "5649aab56ce24252",
      "type": "add",
      "after": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "date": 1502462314624
    },
    {
      "type": "move",
      "order": [
        "d2ad199124bbd88e",
        "b64fdb701df1f2e5",
        "58c2458043917c16",
        "5649aab56ce24252",
        "73e6e80c-ee56-4257-87f3-168efb41194f"
      ],
      "id": "5649aab56ce24252",
      "date": 1502462316010
    },
    {
      "type": "edit",
      "id": "5649aab56ce24252",
      "item": {
        "type": "paragraph",
        "id": "5649aab56ce24252",
        "text": "# Benefits\n\n- **Cross-domain** / CORS: cookies + CORS don't play well across different domains. A token-based approach allows you to make AJAX calls to any server, on any domain because you use an HTTP header to transmit the user information.\n- **Stateless** (a.k.a. Server side scalability): there is no need to keep a session store, the token is a self-contanined entity that conveys all the user information. The rest of the state lives in cookies or local storage on the client side.\nCDN: you can serve all the assets of your app from a CDN (e.g. javascript, HTML, images, etc.), and your server side is just the API.\nDecoupling: you are not tied to a particular authentication scheme. The token might be generated anywhere, hence your API can be called from anywhere with a single way of authenticating those calls.\nMobile ready: when you start working on a native platform (iOS, Android, Windows 8, etc.) cookies are not ideal when consuming a secure API (you have to deal with cookie containers). Adopting a token-based approach simplifies this a lot.\nCSRF: since you are not relying on cookies, you don't need to protect against cross site requests (e.g. it would not be possible to <iframe> your site, generate a POST request and re-use the existing authentication cookie because there will be none).\nPerformance: we are not presenting any hard perf benchmarks here, but a network roundtrip (e.g. finding a session on database) is likely to take more time than calculating an HMACSHA256 to validate a token and parsing its contents.\nLogin page is not an special case: If you are using Protractor to write your functional tests, you don't need to handle any special case for login.\nStandard-based: your API could accepts a standard JSON Web Token (JWT). This is a standard and there are multiple backend libraries (.NET, Ruby, Java, Python, PHP) and companies backing their infrastructure (e.g. Firebase, Google, Microsoft). As an example, Firebase allows their customers to use any authentication mechanism, as long as you generate a JWT with certain pre-defined properties, and signed with the shared secret to call their API."
      },
      "date": 1502462359009
    },
    {
      "type": "edit",
      "id": "5649aab56ce24252",
      "item": {
        "type": "markdown",
        "id": "5649aab56ce24252",
        "text": "# Benefits\n\n- **Cross-domain** / CORS: cookies + CORS don't play well across different domains. A token-based approach allows you to make AJAX calls to any server, on any domain because you use an HTTP header to transmit the user information.\n- **Stateless** (a.k.a. Server side scalability): there is no need to keep a session store, the token is a self-contanined entity that conveys all the user information. The rest of the state lives in cookies or local storage on the client side.\nCDN: you can serve all the assets of your app from a CDN (e.g. javascript, HTML, images, etc.), and your server side is just the API.\nDecoupling: you are not tied to a particular authentication scheme. The token might be generated anywhere, hence your API can be called from anywhere with a single way of authenticating those calls.\nMobile ready: when you start working on a native platform (iOS, Android, Windows 8, etc.) cookies are not ideal when consuming a secure API (you have to deal with cookie containers). Adopting a token-based approach simplifies this a lot.\nCSRF: since you are not relying on cookies, you don't need to protect against cross site requests (e.g. it would not be possible to <iframe> your site, generate a POST request and re-use the existing authentication cookie because there will be none).\nPerformance: we are not presenting any hard perf benchmarks here, but a network roundtrip (e.g. finding a session on database) is likely to take more time than calculating an HMACSHA256 to validate a token and parsing its contents.\nLogin page is not an special case: If you are using Protractor to write your functional tests, you don't need to handle any special case for login.\nStandard-based: your API could accepts a standard JSON Web Token (JWT). This is a standard and there are multiple backend libraries (.NET, Ruby, Java, Python, PHP) and companies backing their infrastructure (e.g. Firebase, Google, Microsoft). As an example, Firebase allows their customers to use any authentication mechanism, as long as you generate a JWT with certain pre-defined properties, and signed with the shared secret to call their API."
      },
      "date": 1502462360237
    },
    {
      "type": "edit",
      "id": "5649aab56ce24252",
      "item": {
        "type": "markdown",
        "id": "5649aab56ce24252",
        "text": "# Benefits\n\n- **Cross-domain** / CORS: cookies + CORS don't play well across different domains. A token-based approach allows you to make AJAX calls to any server, on any domain because you use an HTTP header to transmit the user information.\n\n- **Stateless** (a.k.a. Server side scalability): there is no need to keep a session store, the token is a self-contanined entity that conveys all the user information. The rest of the state lives in cookies or local storage on the client side.\n\n- **CDN**: you can serve all the assets of your app from a CDN (e.g. javascript, HTML, images, etc.), and your server side is just the API.\n\n- **Decoupling**: you are not tied to a particular authentication scheme. The token might be generated anywhere, hence your API can be called from anywhere with a single way of authenticating those calls.\nMobile ready: when you start working on a native platform (iOS, Android, Windows 8, etc.) cookies are not ideal when consuming a secure API (you have to deal with cookie containers). Adopting a token-based approach simplifies this a lot.\n\n- **CSRF**: since you are not relying on cookies, you don't need to protect against cross site requests (e.g. it would not be possible to <iframe> your site, generate a POST request and re-use the existing authentication cookie because there will be none).\n\n- **Performance**: we are not presenting any hard perf benchmarks here, but a network roundtrip (e.g. finding a session on database) is likely to take more time than calculating an HMACSHA256 to validate a token and parsing its contents.\n\n- **Login page is not an special case**: If you are using Protractor to write your functional tests, you don't need to handle any special case for login.\n\n- **Standard-based**: your API could accepts a standard JSON Web Token (JWT). This is a standard and there are multiple backend libraries (.NET, Ruby, Java, Python, PHP) and companies backing their infrastructure (e.g. Firebase, Google, Microsoft). As an example, Firebase allows their customers to use any authentication mechanism, as long as you generate a JWT with certain pre-defined properties, and signed with the shared secret to call their API."
      },
      "date": 1502462504620
    },
    {
      "type": "add",
      "id": "2a1ba7b994d3a938",
      "item": {
        "type": "paragraph",
        "id": "2a1ba7b994d3a938",
        "text": "- Tokens need to be stored somewhere (local/session storage or cookies)\n- Tokens can expire like cookies, but you have more control\n- Local/session storage won't work across domains, use a marker cookie\n- Preflight requests will be sent on each CORS request\n- When you need to stream something, use the token to get a signed request\n- It's easier to deal with XSS than XSRF\n- The token gets sent on every request, watch out its size\n- If you store confidential info, encrypt the token\n- JSON Web Tokens can be used in OAuth\n- Tokens are not silver bullets, think about your authorization use cases carefully"
      },
      "after": "58c2458043917c16",
      "date": 1502462656205
    },
    {
      "type": "edit",
      "id": "2a1ba7b994d3a938",
      "item": {
        "type": "markdown",
        "id": "2a1ba7b994d3a938",
        "text": "- Tokens need to be stored somewhere (local/session storage or cookies)\n- Tokens can expire like cookies, but you have more control\n- Local/session storage won't work across domains, use a marker cookie\n- Preflight requests will be sent on each CORS request\n- When you need to stream something, use the token to get a signed request\n- It's easier to deal with XSS than XSRF\n- The token gets sent on every request, watch out its size\n- If you store confidential info, encrypt the token\n- JSON Web Tokens can be used in OAuth\n- Tokens are not silver bullets, think about your authorization use cases carefully"
      },
      "date": 1502462657299
    },
    {
      "type": "remove",
      "id": "58c2458043917c16",
      "date": 1502462663812
    },
    {
      "type": "edit",
      "id": "d2ad199124bbd88e",
      "item": {
        "type": "paragraph",
        "id": "d2ad199124bbd88e",
        "text": "JSON Web Token (JWT, pronounced jot) is a relatively new token format used in space-constrained environments such as HTTP Authorization headers. JWT is architected as a method for transferring security claims based between parties - [https://en.wikipedia.org/wiki/JSON_Web_Token wikipedia]"
      },
      "date": 1502462667919
    },
    {
      "type": "add",
      "id": "186515acbabba15a",
      "item": {
        "type": "paragraph",
        "id": "186515acbabba15a",
        "text": "JSON Web Tokens are an open standard (RFC 7519)."
      },
      "after": "d2ad199124bbd88e",
      "date": 1502462683156
    },
    {
      "type": "edit",
      "id": "2a1ba7b994d3a938",
      "item": {
        "type": "markdown",
        "id": "2a1ba7b994d3a938",
        "text": "- Need to be stored (local/session storage or cookies)\n- Tokens can expire like cookies\n- Local/session storage won't work across domains, use a marker cookie\n- Preflight requests will be sent on each CORS request\n- When you need to stream something, use the token to get a signed request\n- It's easier to deal with XSS than XSRF\n- The token gets sent on every request, watch out its size\n- If you store confidential info, encrypt the token\n- JSON Web Tokens can be used in OAuth"
      },
      "date": 1502462744990
    },
    {
      "type": "add",
      "id": "79d71d8b7e8c0818",
      "item": {
        "type": "paragraph",
        "id": "79d71d8b7e8c0818",
        "text": "Tokens are not silver bullets, think about your authorization use cases carefully"
      },
      "after": "b64fdb701df1f2e5",
      "date": 1502462778782
    },
    {
      "type": "move",
      "order": [
        "d2ad199124bbd88e",
        "186515acbabba15a",
        "b64fdb701df1f2e5",
        "2a1ba7b994d3a938",
        "79d71d8b7e8c0818",
        "5649aab56ce24252",
        "73e6e80c-ee56-4257-87f3-168efb41194f"
      ],
      "id": "79d71d8b7e8c0818",
      "date": 1502462780195
    },
    {
      "type": "edit",
      "id": "2a1ba7b994d3a938",
      "item": {
        "type": "markdown",
        "id": "2a1ba7b994d3a938",
        "text": "- Need to be stored (local/session storage or cookies)\n- Tokens can expire like cookies\n- Local/session storage won't work across domains\n- Preflight requests will be sent on each CORS request\n- It's easier to deal with XSS than XSRF\n- Watch out for token size\n- If you store confidential info, encrypt the token\n- JSON Web Tokens can be used in OAuth"
      },
      "date": 1502462862441
    },
    {
      "type": "edit",
      "id": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "item": {
        "type": "markdown",
        "id": "73e6e80c-ee56-4257-87f3-168efb41194f",
        "text": "# See also\n\n* [[Use]]\n* [[Standard fields]]\n* [[Implementations]]\n* [[References]]\n* [[External links]]"
      },
      "date": 1502463544029
    },
    {
      "type": "edit",
      "id": "79d71d8b7e8c0818",
      "item": {
        "type": "paragraph",
        "id": "79d71d8b7e8c0818",
        "text": "Tokens are not silver bullets, think about your authorization use cases carefully."
      },
      "date": 1502463548804
    },
    {
      "type": "add",
      "id": "d160171db0eef70a",
      "item": {
        "type": "paragraph",
        "id": "d160171db0eef70a",
        "text": "# Structure\n"
      },
      "after": "79d71d8b7e8c0818",
      "date": 1502463555540
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "029f60ad-ae90-458a-8b75-0028036f7c2f",
        "text": "JWTs generally have three parts: a header, a payload, and a signature.  The header identifies which algorithm is used to generate the signature, and looks something like this:"
      },
      "after": "d160171db0eef70a",
      "id": "029f60ad-ae90-458a-8b75-0028036f7c2f",
      "date": 1502463558719
    },
    {
      "type": "edit",
      "id": "d160171db0eef70a",
      "item": {
        "type": "markdown",
        "id": "d160171db0eef70a",
        "text": "# Structure\n"
      },
      "date": 1502463559998
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6443a516-c2fa-4af7-980b-d757568f2184",
        "text": "header = '{\"alg\":\"HS256\",\"typ\":\"JWT\"}'"
      },
      "after": "029f60ad-ae90-458a-8b75-0028036f7c2f",
      "id": "6443a516-c2fa-4af7-980b-d757568f2184",
      "date": 1502463565880
    },
    {
      "item": {
        "type": "factory",
        "id": "53c82b376e3e857d"
      },
      "id": "53c82b376e3e857d",
      "type": "add",
      "after": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "date": 1502463567937
    },
    {
      "type": "move",
      "order": [
        "d2ad199124bbd88e",
        "186515acbabba15a",
        "b64fdb701df1f2e5",
        "2a1ba7b994d3a938",
        "79d71d8b7e8c0818",
        "d160171db0eef70a",
        "029f60ad-ae90-458a-8b75-0028036f7c2f",
        "6443a516-c2fa-4af7-980b-d757568f2184",
        "53c82b376e3e857d",
        "5649aab56ce24252",
        "73e6e80c-ee56-4257-87f3-168efb41194f"
      ],
      "id": "53c82b376e3e857d",
      "date": 1502463571357
    },
    {
      "type": "edit",
      "id": "5649aab56ce24252",
      "item": {
        "type": "markdown",
        "id": "5649aab56ce24252",
        "text": "# [[Benefits of JWT's]]\n\n- **Cross-domain** / CORS: cookies + CORS don't play well across different domains. A token-based approach allows you to make AJAX calls to any server, on any domain because you use an HTTP header to transmit the user information.\n\n- **Stateless** (a.k.a. Server side scalability): there is no need to keep a session store, the token is a self-contanined entity that conveys all the user information. The rest of the state lives in cookies or local storage on the client side.\n\n- **CDN**: you can serve all the assets of your app from a CDN (e.g. javascript, HTML, images, etc.), and your server side is just the API.\n\n- **Decoupling**: you are not tied to a particular authentication scheme. The token might be generated anywhere, hence your API can be called from anywhere with a single way of authenticating those calls.\nMobile ready: when you start working on a native platform (iOS, Android, Windows 8, etc.) cookies are not ideal when consuming a secure API (you have to deal with cookie containers). Adopting a token-based approach simplifies this a lot.\n\n- **CSRF**: since you are not relying on cookies, you don't need to protect against cross site requests (e.g. it would not be possible to <iframe> your site, generate a POST request and re-use the existing authentication cookie because there will be none).\n\n- **Performance**: we are not presenting any hard perf benchmarks here, but a network roundtrip (e.g. finding a session on database) is likely to take more time than calculating an HMACSHA256 to validate a token and parsing its contents.\n\n- **Login page is not an special case**: If you are using Protractor to write your functional tests, you don't need to handle any special case for login.\n\n- **Standard-based**: your API could accepts a standard JSON Web Token (JWT). This is a standard and there are multiple backend libraries (.NET, Ruby, Java, Python, PHP) and companies backing their infrastructure (e.g. Firebase, Google, Microsoft). As an example, Firebase allows their customers to use any authentication mechanism, as long as you generate a JWT with certain pre-defined properties, and signed with the shared secret to call their API."
      },
      "date": 1502463610061
    },
    {
      "type": "remove",
      "id": "5649aab56ce24252",
      "date": 1502463617477
    },
    {
      "type": "remove",
      "id": "6443a516-c2fa-4af7-980b-d757568f2184",
      "date": 1502463661852
    },
    {
      "type": "edit",
      "id": "53c82b376e3e857d",
      "item": {
        "type": "code",
        "id": "53c82b376e3e857d",
        "text": "header = '{\"alg\":\"HS256\",\"typ\":\"JWT\"}'"
      },
      "date": 1502463663118
    },
    {
      "item": {
        "type": "factory",
        "id": "a9ffd1a112fd3c53"
      },
      "id": "a9ffd1a112fd3c53",
      "type": "add",
      "after": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "date": 1502463668418
    },
    {
      "type": "move",
      "order": [
        "d2ad199124bbd88e",
        "186515acbabba15a",
        "b64fdb701df1f2e5",
        "2a1ba7b994d3a938",
        "79d71d8b7e8c0818",
        "d160171db0eef70a",
        "029f60ad-ae90-458a-8b75-0028036f7c2f",
        "53c82b376e3e857d",
        "a9ffd1a112fd3c53",
        "73e6e80c-ee56-4257-87f3-168efb41194f"
      ],
      "id": "a9ffd1a112fd3c53",
      "date": 1502463670976
    },
    {
      "item": {
        "type": "factory",
        "id": "8291e12a5146231c"
      },
      "id": "8291e12a5146231c",
      "type": "add",
      "after": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "date": 1502463672484
    },
    {
      "type": "move",
      "order": [
        "d2ad199124bbd88e",
        "186515acbabba15a",
        "b64fdb701df1f2e5",
        "2a1ba7b994d3a938",
        "79d71d8b7e8c0818",
        "d160171db0eef70a",
        "029f60ad-ae90-458a-8b75-0028036f7c2f",
        "53c82b376e3e857d",
        "a9ffd1a112fd3c53",
        "8291e12a5146231c",
        "73e6e80c-ee56-4257-87f3-168efb41194f"
      ],
      "id": "8291e12a5146231c",
      "date": 1502463674104
    },
    {
      "item": {
        "type": "factory",
        "id": "7698232b75280635"
      },
      "id": "7698232b75280635",
      "type": "add",
      "after": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "date": 1502463675263
    },
    {
      "type": "move",
      "order": [
        "d2ad199124bbd88e",
        "186515acbabba15a",
        "b64fdb701df1f2e5",
        "2a1ba7b994d3a938",
        "79d71d8b7e8c0818",
        "d160171db0eef70a",
        "029f60ad-ae90-458a-8b75-0028036f7c2f",
        "53c82b376e3e857d",
        "a9ffd1a112fd3c53",
        "8291e12a5146231c",
        "7698232b75280635",
        "73e6e80c-ee56-4257-87f3-168efb41194f"
      ],
      "id": "7698232b75280635",
      "date": 1502463676836
    },
    {
      "type": "add",
      "item": {
        "type": "html",
        "id": "4da8974a-2bed-405b-ae4e-c75f96e14647",
        "text": "<code>HS256</code> indicates that this token is signed using HMAC-SHA256."
      },
      "after": "53c82b376e3e857d",
      "id": "4da8974a-2bed-405b-ae4e-c75f96e14647",
      "date": 1502463681008
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "37516d01-6976-433f-846d-a9aff0c01822",
        "text": "The payload contains the claims to make:"
      },
      "after": "4da8974a-2bed-405b-ae4e-c75f96e14647",
      "id": "37516d01-6976-433f-846d-a9aff0c01822",
      "date": 1502463685675
    },
    {
      "type": "edit",
      "id": "a9ffd1a112fd3c53",
      "item": {
        "type": "code",
        "id": "a9ffd1a112fd3c53",
        "text": "payload ='{\"loggedInAs\":\"admin\",\"iat\":1422779638}'"
      },
      "date": 1502463711585
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "69a1803c-36ee-4b1a-9bb1-3a3d702ddc9b",
        "text": "As suggested in the JWT spec, a timestamp called <code>iat</code> (issued at ([[#Standard_fields]])) is installed."
      },
      "after": "a9ffd1a112fd3c53",
      "id": "69a1803c-36ee-4b1a-9bb1-3a3d702ddc9b",
      "date": 1502463723463
    },
    {
      "type": "edit",
      "id": "69a1803c-36ee-4b1a-9bb1-3a3d702ddc9b",
      "item": {
        "type": "markdown",
        "id": "69a1803c-36ee-4b1a-9bb1-3a3d702ddc9b",
        "text": "As suggested in the JWT spec, a timestamp called <code>iat</code> (issued at ([[#Standard_fields]])) is installed."
      },
      "date": 1502463725633
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ea176322-d756-412f-8737-7697f747a6fb",
        "text": "The signature is calculated by base64url encoding the header and payload and concatenating them with a period as a separator:"
      },
      "after": "69a1803c-36ee-4b1a-9bb1-3a3d702ddc9b",
      "id": "ea176322-d756-412f-8737-7697f747a6fb",
      "date": 1502463733930
    },
    {
      "type": "edit",
      "id": "8291e12a5146231c",
      "item": {
        "type": "code",
        "id": "8291e12a5146231c",
        "text": "key           = 'secretkey'"
      },
      "date": 1502463742047
    },
    {
      "type": "edit",
      "id": "8291e12a5146231c",
      "item": {
        "type": "code",
        "id": "8291e12a5146231c",
        "text": "key = 'secretkey'"
      },
      "date": 1502463747152
    },
    {
      "type": "edit",
      "id": "7698232b75280635",
      "item": {
        "type": "code",
        "id": "7698232b75280635",
        "text": "unsignedToken = encodeBase64Url(header) + '.' + encodeBase64Url(payload)"
      },
      "date": 1502463755881
    },
    {
      "item": {
        "type": "factory",
        "id": "3f6a1300d99e1911"
      },
      "id": "3f6a1300d99e1911",
      "type": "add",
      "after": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "date": 1502463758609
    },
    {
      "type": "move",
      "order": [
        "d2ad199124bbd88e",
        "186515acbabba15a",
        "b64fdb701df1f2e5",
        "2a1ba7b994d3a938",
        "79d71d8b7e8c0818",
        "d160171db0eef70a",
        "029f60ad-ae90-458a-8b75-0028036f7c2f",
        "53c82b376e3e857d",
        "4da8974a-2bed-405b-ae4e-c75f96e14647",
        "37516d01-6976-433f-846d-a9aff0c01822",
        "a9ffd1a112fd3c53",
        "69a1803c-36ee-4b1a-9bb1-3a3d702ddc9b",
        "ea176322-d756-412f-8737-7697f747a6fb",
        "8291e12a5146231c",
        "7698232b75280635",
        "3f6a1300d99e1911",
        "73e6e80c-ee56-4257-87f3-168efb41194f"
      ],
      "id": "3f6a1300d99e1911",
      "date": 1502463760003
    },
    {
      "type": "edit",
      "id": "3f6a1300d99e1911",
      "item": {
        "type": "code",
        "id": "3f6a1300d99e1911",
        "text": "signature     = HMAC-SHA256(key, unsignedToken)"
      },
      "date": 1502463766393
    },
    {
      "type": "edit",
      "id": "3f6a1300d99e1911",
      "item": {
        "type": "code",
        "id": "3f6a1300d99e1911",
        "text": "signature = HMAC-SHA256(key, unsignedToken)"
      },
      "date": 1502463772184
    },
    {
      "item": {
        "type": "factory",
        "id": "1981edd0ba7b86a8"
      },
      "id": "1981edd0ba7b86a8",
      "type": "add",
      "after": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "date": 1502463791117
    },
    {
      "type": "move",
      "order": [
        "d2ad199124bbd88e",
        "186515acbabba15a",
        "b64fdb701df1f2e5",
        "2a1ba7b994d3a938",
        "79d71d8b7e8c0818",
        "d160171db0eef70a",
        "029f60ad-ae90-458a-8b75-0028036f7c2f",
        "53c82b376e3e857d",
        "4da8974a-2bed-405b-ae4e-c75f96e14647",
        "37516d01-6976-433f-846d-a9aff0c01822",
        "a9ffd1a112fd3c53",
        "69a1803c-36ee-4b1a-9bb1-3a3d702ddc9b",
        "ea176322-d756-412f-8737-7697f747a6fb",
        "8291e12a5146231c",
        "7698232b75280635",
        "3f6a1300d99e1911",
        "1981edd0ba7b86a8",
        "73e6e80c-ee56-4257-87f3-168efb41194f"
      ],
      "id": "1981edd0ba7b86a8",
      "date": 1502463792683
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ef7c6b2a-dfb1-4c48-b3f4-b669af43e7f5",
        "text": "To put it all together, the signature is base64url encoded.  The three separate parts are concatenated using periods:"
      },
      "after": "3f6a1300d99e1911",
      "id": "ef7c6b2a-dfb1-4c48-b3f4-b669af43e7f5",
      "date": 1502463822735
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "81778075-f23f-49a7-bb4f-9e6eeee3649f",
        "text": "token = encodeBase64Url(header) + '.' + encodeBase64Url(payload) + '.' + encodeBase64Url(signature) # token is now: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI"
      },
      "after": "ef7c6b2a-dfb1-4c48-b3f4-b669af43e7f5",
      "id": "81778075-f23f-49a7-bb4f-9e6eeee3649f",
      "date": 1502463828325
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "af20af6b-a11d-4e2d-a8bd-390e83b9b958",
        "text": "The output is three Base64url strings separated by dots that can be easily passed in [[HTML]] and [[HTTP]] environments, while being more compact compared to [[XML]]-based standards such as [[SAML]]. Typical cryptographic algorithms used are [[HMAC]] with [[SHA-256]] (HS256) and RSA signature ([[Digital signature]]) with SHA-256 (RS256). JWA (JSON Web Algorithms) RFC 7518 introduces many more for both authentication and encryption.[ ]"
      },
      "after": "81778075-f23f-49a7-bb4f-9e6eeee3649f",
      "id": "af20af6b-a11d-4e2d-a8bd-390e83b9b958",
      "date": 1502463839716
    },
    {
      "type": "move",
      "order": [
        "d2ad199124bbd88e",
        "186515acbabba15a",
        "b64fdb701df1f2e5",
        "2a1ba7b994d3a938",
        "79d71d8b7e8c0818",
        "d160171db0eef70a",
        "029f60ad-ae90-458a-8b75-0028036f7c2f",
        "53c82b376e3e857d",
        "4da8974a-2bed-405b-ae4e-c75f96e14647",
        "37516d01-6976-433f-846d-a9aff0c01822",
        "a9ffd1a112fd3c53",
        "69a1803c-36ee-4b1a-9bb1-3a3d702ddc9b",
        "ea176322-d756-412f-8737-7697f747a6fb",
        "8291e12a5146231c",
        "7698232b75280635",
        "3f6a1300d99e1911",
        "ef7c6b2a-dfb1-4c48-b3f4-b669af43e7f5",
        "81778075-f23f-49a7-bb4f-9e6eeee3649f",
        "1981edd0ba7b86a8",
        "af20af6b-a11d-4e2d-a8bd-390e83b9b958",
        "73e6e80c-ee56-4257-87f3-168efb41194f"
      ],
      "id": "1981edd0ba7b86a8",
      "date": 1502463844713
    },
    {
      "type": "remove",
      "id": "81778075-f23f-49a7-bb4f-9e6eeee3649f",
      "date": 1502463847680
    },
    {
      "type": "edit",
      "id": "1981edd0ba7b86a8",
      "item": {
        "type": "code",
        "id": "1981edd0ba7b86a8",
        "text": "token = encodeBase64Url(header) + '.' + encodeBase64Url(payload) + '.' + encodeBase64Url(signature) # token is now: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI"
      },
      "date": 1502463852065
    },
    {
      "type": "edit",
      "id": "af20af6b-a11d-4e2d-a8bd-390e83b9b958",
      "item": {
        "type": "paragraph",
        "id": "af20af6b-a11d-4e2d-a8bd-390e83b9b958",
        "text": "The output is three Base64url strings separated by dots that can be easily passed in [[HTML]] and [[HTTP]] environments, while being more compact compared to [[XML]]-based standards such as [[SAML]]. "
      },
      "date": 1502463868459
    },
    {
      "type": "add",
      "id": "4ffd067ff46da6da",
      "item": {
        "type": "paragraph",
        "id": "4ffd067ff46da6da",
        "text": "Typical cryptographic algorithms used are [[HMAC]] with [[SHA-256]] (HS256) and RSA signature ([[Digital signature]]) with SHA-256 (RS256). JWA (JSON Web Algorithms) RFC 7518 introduces many more for both authentication and encryption.[ ]"
      },
      "after": "af20af6b-a11d-4e2d-a8bd-390e83b9b958",
      "date": 1502463868802
    },
    {
      "type": "edit",
      "id": "4ffd067ff46da6da",
      "item": {
        "type": "paragraph",
        "id": "4ffd067ff46da6da",
        "text": "Typical cryptographic algorithms used are [[HMAC]] with [[SHA-256]] (HS256) and RSA signature ([[Digital signature]]) with SHA-256 (RS256). JWA (JSON Web Algorithms) RFC 7518 introduces many more for both authentication and encryption."
      },
      "date": 1502463873986
    },
    {
      "type": "edit",
      "id": "186515acbabba15a",
      "item": {
        "type": "paragraph",
        "id": "186515acbabba15a",
        "text": "JSON Web Tokens are an open standard (RFC 7519). There are a number of [[Benefits of JWT's]] which make them more compliant with modern REST principles - notably not storing state on the server (as the tokens contain the information required withim them)."
      },
      "date": 1502463990572
    },
    {
      "type": "fork",
      "site": "hosting.permanent.wiki"
    },
    {
      "type": "add",
      "id": "e83ecaa0b881c7cf",
      "item": {
        "type": "paragraph",
        "id": "e83ecaa0b881c7cf",
        "text": "- [[Benefits of JWT's]]"
      },
      "after": "d2ad199124bbd88e",
      "date": 1510693133593
    },
    {
      "type": "edit",
      "id": "e83ecaa0b881c7cf",
      "item": {
        "type": "markdown",
        "id": "e83ecaa0b881c7cf",
        "text": "- [[Benefits of JWT's]]"
      },
      "date": 1510693135714
    },
    {
      "type": "edit",
      "id": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "item": {
        "type": "markdown",
        "id": "73e6e80c-ee56-4257-87f3-168efb41194f",
        "text": "# See also\n\n* [[Use]]\n* [[Standard fields]]\n* [[Implementations]]\n \n- [[Benefits of JWT's]]"
      },
      "date": 1510693147666
    },
    {
      "type": "fork",
      "site": "future.fedwiki.org",
      "date": 1510693204779
    },
    {
      "type": "edit",
      "id": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "item": {
        "type": "markdown",
        "id": "73e6e80c-ee56-4257-87f3-168efb41194f",
        "text": "# See also\n\n* [[Use]]\n* [[Standard fields]]\n* [[Implementations]]\n- [[Benefits of JWT's]]"
      },
      "date": 1518885102290
    },
    {
      "type": "edit",
      "id": "186515acbabba15a",
      "item": {
        "type": "paragraph",
        "id": "186515acbabba15a",
        "text": "JSON Web Tokens are an open standard (RFC 7519). There are a number of [[Benefits of JWT's]] which make them more compliant with modern [[REST]] principles - notably not storing state on the server (as the tokens contain the information required withim them)."
      },
      "date": 1518887837633
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "d2ad199124bbd88e",
      "text": "JSON Web Token (JWT, pronounced jot) is a relatively new token format used in space-constrained environments such as HTTP Authorization headers. JWT is architected as a method for transferring security claims based between parties - [https://en.wikipedia.org/wiki/JSON_Web_Token wikipedia]"
    },
    {
      "type": "markdown",
      "id": "e83ecaa0b881c7cf",
      "text": "- [[Benefits of JWT's]]"
    },
    {
      "type": "paragraph",
      "id": "186515acbabba15a",
      "text": "JSON Web Tokens are an open standard (RFC 7519). There are a number of [[Benefits of JWT's]] which make them more compliant with modern [[REST]] principles - notably not storing state on the server (as the tokens contain the information required withim them)."
    },
    {
      "type": "paragraph",
      "id": "b64fdb701df1f2e5",
      "text": "The tokens are signed by the server's key, so the client and server are both able to verify that the token is legitimate. The tokens are designed to be compact , URL-safe and usable especially in web browser single sign-on (SSO) context. "
    },
    {
      "type": "markdown",
      "id": "2a1ba7b994d3a938",
      "text": "- Need to be stored (local/session storage or cookies)\n- Tokens can expire like cookies\n- Local/session storage won't work across domains\n- Preflight requests will be sent on each CORS request\n- It's easier to deal with XSS than XSRF\n- Watch out for token size\n- If you store confidential info, encrypt the token\n- JSON Web Tokens can be used in OAuth"
    },
    {
      "type": "paragraph",
      "id": "79d71d8b7e8c0818",
      "text": "Tokens are not silver bullets, think about your authorization use cases carefully."
    },
    {
      "type": "markdown",
      "id": "d160171db0eef70a",
      "text": "# Structure\n"
    },
    {
      "type": "paragraph",
      "id": "029f60ad-ae90-458a-8b75-0028036f7c2f",
      "text": "JWTs generally have three parts: a header, a payload, and a signature.  The header identifies which algorithm is used to generate the signature, and looks something like this:"
    },
    {
      "type": "code",
      "id": "53c82b376e3e857d",
      "text": "header = '{\"alg\":\"HS256\",\"typ\":\"JWT\"}'"
    },
    {
      "type": "html",
      "id": "4da8974a-2bed-405b-ae4e-c75f96e14647",
      "text": "<code>HS256</code> indicates that this token is signed using HMAC-SHA256."
    },
    {
      "type": "paragraph",
      "id": "37516d01-6976-433f-846d-a9aff0c01822",
      "text": "The payload contains the claims to make:"
    },
    {
      "type": "code",
      "id": "a9ffd1a112fd3c53",
      "text": "payload ='{\"loggedInAs\":\"admin\",\"iat\":1422779638}'"
    },
    {
      "type": "markdown",
      "id": "69a1803c-36ee-4b1a-9bb1-3a3d702ddc9b",
      "text": "As suggested in the JWT spec, a timestamp called <code>iat</code> (issued at ([[#Standard_fields]])) is installed."
    },
    {
      "type": "paragraph",
      "id": "ea176322-d756-412f-8737-7697f747a6fb",
      "text": "The signature is calculated by base64url encoding the header and payload and concatenating them with a period as a separator:"
    },
    {
      "type": "code",
      "id": "8291e12a5146231c",
      "text": "key = 'secretkey'"
    },
    {
      "type": "code",
      "id": "7698232b75280635",
      "text": "unsignedToken = encodeBase64Url(header) + '.' + encodeBase64Url(payload)"
    },
    {
      "type": "code",
      "id": "3f6a1300d99e1911",
      "text": "signature = HMAC-SHA256(key, unsignedToken)"
    },
    {
      "type": "paragraph",
      "id": "ef7c6b2a-dfb1-4c48-b3f4-b669af43e7f5",
      "text": "To put it all together, the signature is base64url encoded.  The three separate parts are concatenated using periods:"
    },
    {
      "type": "code",
      "id": "1981edd0ba7b86a8",
      "text": "token = encodeBase64Url(header) + '.' + encodeBase64Url(payload) + '.' + encodeBase64Url(signature) # token is now: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI"
    },
    {
      "type": "paragraph",
      "id": "af20af6b-a11d-4e2d-a8bd-390e83b9b958",
      "text": "The output is three Base64url strings separated by dots that can be easily passed in [[HTML]] and [[HTTP]] environments, while being more compact compared to [[XML]]-based standards such as [[SAML]]. "
    },
    {
      "type": "paragraph",
      "id": "4ffd067ff46da6da",
      "text": "Typical cryptographic algorithms used are [[HMAC]] with [[SHA-256]] (HS256) and RSA signature ([[Digital signature]]) with SHA-256 (RS256). JWA (JSON Web Algorithms) RFC 7518 introduces many more for both authentication and encryption."
    },
    {
      "type": "markdown",
      "id": "73e6e80c-ee56-4257-87f3-168efb41194f",
      "text": "# See also\n\n* [[Use]]\n* [[Standard fields]]\n* [[Implementations]]\n- [[Benefits of JWT's]]"
    }
  ]
}