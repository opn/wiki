{
  "journal": [
    {
      "date": 1427924858035,
      "item": {
        "story": "",
        "title": "Data and Javascript"
      },
      "type": "create"
    },
    {
      "date": 1427924859729,
      "id": "5e5a18b0b788265d",
      "item": {
        "id": "5e5a18b0b788265d",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1427924903288,
      "id": "5e5a18b0b788265d",
      "item": {
        "id": "5e5a18b0b788265d",
        "text": "COWL (Confinement with Origin Web Labels) is a robust JavaScript confinement system for modern web browsers. COWL introduces label-based mandatory access control to browsing contexts (pages, iframes, etc.) in a way that is fully backward-compatible with legacy web content. With COWL, developers not only can restrict with whom they share data, but also can impose restrictions on how their data is disseminated once it is shared. COWL achieves both flexibility for developers and privacy for users: it allows code to fetch and share data as necessary, but once code has read sensitive data, COWL confines the code by revoking its right to communicate with unauthorized parties. ",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1427924930971,
      "id": "5e5a18b0b788265d",
      "item": {
        "id": "5e5a18b0b788265d",
        "text": "COWL (Confinement with Origin Web Labels) is a robust JavaScript confinement system for modern web browsers. COWL introduces label-based mandatory access control to browsing contexts (pages, iframes, etc.) in a way that is fully backward-compatible with legacy web content. With COWL, developers not only can restrict with whom they share data, but also can impose restrictions on how their data is disseminated once it is shared. COWL achieves both flexibility for developers and privacy for users: it allows code to fetch and share data as necessary, but once code has read sensitive data, COWL confines the code by revoking its right to communicate with unauthorized parties - [http://cowl.ws/ cowl.ws]",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1427924956159,
      "id": "5e5a18b0b788265d",
      "item": {
        "id": "5e5a18b0b788265d",
        "text": "COWL (Confinement with Origin Web Labels) is a robust JavaScript confinement system for modern web browsers. COWL introduces label-based mandatory access control to browsing contexts (pages, iframes, etc.) in a way that is fully backward-compatible with legacy web content - [http://cowl.ws/ cowl.ws]",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "after": "5e5a18b0b788265d",
      "date": 1427924978015,
      "id": "cdb2caf500585677",
      "item": {
        "id": "cdb2caf500585677",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1427924983903,
      "id": "cdb2caf500585677",
      "item": {
        "id": "cdb2caf500585677",
        "text": "Dat is an open source project that provides a streaming interface between every file format and data storage backend.",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1427925060140,
      "id": "cdb2caf500585677",
      "item": {
        "id": "cdb2caf500585677",
        "text": "Dat is an open source project that provides a streaming interface between every file format and data storage backend.API's include [[Command Line]], [[REST]], and [[JavaScript]]",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "after": "cdb2caf500585677",
      "date": 1427925101155,
      "id": "6abb9e78de0fdb76",
      "item": {
        "id": "6abb9e78de0fdb76",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1427925104682,
      "id": "6abb9e78de0fdb76",
      "item": {
        "id": "6abb9e78de0fdb76",
        "text": "The WebID specification is being developed and debated on the W3C WebID Community Group. Please don't hesitate to join and ask us about any implementation issues you come accross, problems with the spec, new implementations you have written that use WebID in one form or another. ",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1427925127952,
      "id": "6abb9e78de0fdb76",
      "item": {
        "id": "6abb9e78de0fdb76",
        "text": "The WebID specification is being developed and debated on the W3C WebID Community Group. Please don't hesitate to join and ask us about any implementation issues you come accross, problems with the spec, new implementations you have written that use WebID in one form or another - [http://webid.info/ webid.info]",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "type": "fork",
      "site": "wiki.viral.academy"
    },
    {
      "type": "add",
      "item": {
        "id": "6d0a178aff4bb210",
        "type": "reference",
        "site": "nrn.io",
        "slug": "reduce",
        "title": "Reduce",
        "text": "Reducing is the most general of the functional array methods. You take an array, and get back any one thing. I can be an array, an object, a number, a string, any damn thing. It can even replicate a filter, returning an array with elements removed, or a map that can even add elements. It's pretty cool. However, there are some eccentricities with the built in `[].reduce` function, making using it improperly one of the [[JavaScript Common Pitfalls]]"
      },
      "after": "6abb9e78de0fdb76",
      "id": "6d0a178aff4bb210",
      "date": 1448843410332
    },
    {
      "type": "add",
      "item": {
        "id": "8175bd0d7609832d",
        "type": "reference",
        "site": "nrn.io",
        "slug": "timer-precedence",
        "title": "timer-precedence",
        "text": "I do hope you're just reading this article for the entertainment value, because if you really need this information it's time to reevaluate your life choices. Leave your job as a node contributor, instrumentation engineer, or whatever other tedious mess you've gotten yourself into, and pursue your dreams. Computers are awful. Work the land, start a woodcraft shoppe, maybe tend bar. Here be dragons. When you have a lot of timers going at once, the when exactly they are going to fire is one of the [[JavaScript Common Pitfalls]]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "8175bd0d7609832d",
      "date": 1448843414218
    },
    {
      "type": "add",
      "item": {
        "id": "5616a7e1cf5d1c29",
        "type": "reference",
        "site": "nrn.io",
        "slug": "accuracy-of-the-date-object",
        "title": "Accuracy of the Date object",
        "text": "We often find ourselves using 'Date.now()' twice and comparing the numbers to get the duration of time that has passed. Or in ye' olden times the IE 7 compatible \"new Date().getTime()\". It's easy to assume that something sensible happens when we make these calls, but alas, that is not our lot in life. Making comparing two times one of the [[JavaScript Common Pitfalls]]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "5616a7e1cf5d1c29",
      "date": 1448843417528
    },
    {
      "type": "add",
      "item": {
        "id": "db88a6a5f07581c1",
        "type": "reference",
        "site": "nrn.io",
        "slug": "asynchronous-loops",
        "title": "Asynchronous Loops",
        "text": "JavaScript's built in looping mechanisms, 'while', 'for', 'array.forEach', etc, are all synchronous. They work well for processing a set of things in an object or array that are in memory already. There are many other tasks that can be modeled well as an asynchronous loop. For example render loops, polling, and cron like tasks. Letting these loops terminate too early or be unexpectedly infinite are some of the [[JavaScript common pitfalls]]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "db88a6a5f07581c1",
      "date": 1448843421981
    },
    {
      "type": "add",
      "item": {
        "id": "69a1072e75f791bf",
        "type": "reference",
        "site": "nrn.io",
        "slug": "timer-durations",
        "title": "Timer durations",
        "text": "Timer durations are minimums, not absolutes. And 0ms never actually means 0ms. This applies to setTimeout and setInterval. Like anything else that is nondeterministic and out of the control of your code, timer durations are one of the [[JavaScript Common Pitfalls]]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "69a1072e75f791bf",
      "date": 1448843426986
    },
    {
      "type": "add",
      "item": {
        "id": "912bdd24c7f9731a",
        "type": "reference",
        "site": "nrn.io",
        "slug": "node-style-callback",
        "title": "Node style callback",
        "text": "Community convention eases the cognitive burden on all of us. The less that is unique about an api, the less we have to learn to use it effectively. One of the most effective conventions introduced by the Node community, and adopted across JavaScript thanks largely to NPM, is the \"Node style callback\". When exposing a Node style callback api to our users we are making a promise that we are doing things the way they expect, and getting the details wrong is one of the [[JavaScript common pitfalls]]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "912bdd24c7f9731a",
      "date": 1448843429674
    },
    {
      "type": "add",
      "item": {
        "id": "05e432ce81101d7c",
        "type": "reference",
        "site": "nrn.io",
        "slug": "finding-the-global-object",
        "title": "Finding the global object",
        "text": "One of the [[JavaScript common pitfalls]] is a problem finding the global object in a truly universal way. This is especially common for code not relying on a specific build system. When you're writing code that could be dropped in anyway, included with any module loader or build system, and loaded into any JS environment there isn't a whole lot you can count on. Not even how to access the global object."
      },
      "after": "6abb9e78de0fdb76",
      "id": "05e432ce81101d7c",
      "date": 1448843432811
    },
    {
      "type": "add",
      "item": {
        "id": "561bbeb547a87874",
        "type": "reference",
        "site": "nrn.io",
        "slug": "object-iteration",
        "title": "Object iteration",
        "text": "One extremely common thing you want to be able to do in JavaScript is iterate over objects. There are a lot of different ways you can do this, and they have subtly different results. As with most things where the are a proliferation of different ways to do the same thing that all end up slightly differently, object iteration is one of the [[JavaScript common pitfalls]]. This page only looks at how object iteration works in the common es5 environments. If you support ie8 and before, this isn't helpful."
      },
      "after": "6abb9e78de0fdb76",
      "id": "561bbeb547a87874",
      "date": 1448843436114
    },
    {
      "type": "add",
      "item": {
        "id": "a2ca109b9ee97809",
        "type": "reference",
        "site": "nrn.io",
        "slug": "type-casting",
        "title": "Type casting",
        "text": "There are only a hand full of types in JavaScript. Many operations implicitly convert one of the few types into another, in ways that can be unpredictable. One way to handle that uncertainty is to learn every single possible rule and combination, another is to convert the types explicitly on our own, so we don't get surprised. We call that conversion type casting, and it helps us avoid type confusion, which is one of the [[JavaScript Common Pitfalls]]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "a2ca109b9ee97809",
      "date": 1448843439079
    },
    {
      "type": "add",
      "item": {
        "id": "99f1efd612d2e862",
        "type": "reference",
        "site": "nrn.io",
        "slug": "get-the-full-result-of-a-stream",
        "title": "Get the full result of a stream",
        "text": "Streams are an amazing abstraction for many things. They let us pipe things together, transform them, and control their flow, all without having to buffer the contents into memory. However, sometimes you just want the full contents all at once. Maybe because you can't do what you need to as a stream, maybe because it's just easier for what you're doing. Screwing up collecting the results of a stream is one of the [[JavaScript common pitfalls]]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "99f1efd612d2e862",
      "date": 1448843442823
    },
    {
      "type": "add",
      "item": {
        "id": "5b4fa576ddff4964",
        "type": "reference",
        "site": "nrn.io",
        "slug": "nested-branching",
        "title": "Nested branching",
        "text": "Despite our best efforts to keep things simple, sometimes getting the business logic correct necessitates deep, nested branching. It's painful when you get painted into a corner like that, dozens of different paths, each conditionally dependent on the last, but you gotta do what you gotta do. Trying to keep these things readable and debuggable is one of the [[JavaScript Common Pitfalls]]"
      },
      "after": "6abb9e78de0fdb76",
      "id": "5b4fa576ddff4964",
      "date": 1448843446358
    },
    {
      "type": "add",
      "item": {
        "id": "5941e7da102a2a9a",
        "type": "reference",
        "site": "nrn.io",
        "slug": "parallel-execution",
        "title": "parallel execution",
        "text": "In JavaScript parallel execution of asynchronous operations is the default. However, managing that with callbacks means that execution branches for each new thing. Collecting the results from those asynchronous operations back together, in order, without blocking each other is one of the [[JavaScript common pitfalls]]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "5941e7da102a2a9a",
      "date": 1448843449282
    },
    {
      "type": "add",
      "item": {
        "id": "0eaa6ad8fa337f25",
        "type": "reference",
        "site": "nrn.io",
        "slug": "insignificantish-whitespace",
        "title": "Insignificantish whitespace",
        "text": "Whitespace in JavaScript is insignificant. Well, except where it is significant. As you might imagine this makes white space one of the [[JavaScript common pitfalls]]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "0eaa6ad8fa337f25",
      "date": 1448843452112
    },
    {
      "type": "add",
      "item": {
        "id": "6d5bd070aa7e322a",
        "type": "reference",
        "site": "nrn.io",
        "slug": "binding-this",
        "title": "binding `this`",
        "text": "Loosing your invocation context (`this`) is one of the [[JavaScript common pitfalls]]. Using `this` you can write generic methods that modify the objects they are part of, in an object oriented way. However as you start combining that with more functional programming, passing references to functions into other functions and the like, your function can be invoked in ways you didn't expect, often with no way to access the originally intended `this`."
      },
      "after": "6abb9e78de0fdb76",
      "id": "6d5bd070aa7e322a",
      "date": 1448843454550
    },
    {
      "type": "add",
      "item": {
        "id": "3f2897f1844c29d0",
        "type": "reference",
        "site": "nrn.io",
        "slug": "eval-vrs-new-function",
        "title": "eval vrs. new Function",
        "text": "It's not often a good idea to evaluate text as code, but sometimes it is necessary. There are two ways to do it in JavaScript, eval and new Function. They are subtly different. Neither are safe, but new Function has less possible side effects."
      },
      "after": "6abb9e78de0fdb76",
      "id": "3f2897f1844c29d0",
      "date": 1448843457511
    },
    {
      "type": "add",
      "item": {
        "id": "f422f521f2631d08",
        "type": "reference",
        "site": "nrn.io",
        "slug": "recursion-depth",
        "title": "Recursion Depth",
        "text": "JavaScript is just finally getting tail call optimization on es6. That means that in all current platforms, as of summer 2015, if a function calls itself too many times recursively it eventually causes an exception. This most often comes up in forward recursive algorithms which can be really fast, even with a lot of function calls."
      },
      "after": "6abb9e78de0fdb76",
      "id": "f422f521f2631d08",
      "date": 1448843460680
    },
    {
      "type": "add",
      "item": {
        "id": "92c7d931f79a17d9",
        "type": "reference",
        "site": "nrn.io",
        "slug": "falsey-0",
        "title": "Falsey 0",
        "text": "0 is one of many [[falsey values]] in JavaScript. It seems like an odd choice, for a language with only a single type of number to have 0 be falsey. It harkens back to our C heritage where 0 was the only falsey value, it was the '\\0' at the end of a string it was the NULL value that pointed to nothing, it was the negative response to a comparison. I JavaScript it has some clever uses, but mostly just serves to trip us up."
      },
      "after": "6abb9e78de0fdb76",
      "id": "92c7d931f79a17d9",
      "date": 1448843463865
    },
    {
      "type": "add",
      "item": {
        "id": "82864f17848fb413",
        "type": "reference",
        "site": "nrn.io",
        "slug": "arrow-function-returns",
        "title": "Arrow function returns",
        "text": "There is a new way to define functions in JavaScript, known as the fat arrow. Fat arrows are intended to be used for quick anonymous functions, especially where you want to use the outer 'this' context. To help streamline this use case when you use them without a single expression instead of a block they implicitly return the value of that expression."
      },
      "after": "6abb9e78de0fdb76",
      "id": "82864f17848fb413",
      "date": 1448843467339
    },
    {
      "type": "add",
      "item": {
        "id": "560328a31de32463",
        "type": "reference",
        "site": "nrn.io",
        "slug": "hoisting",
        "title": "Hoisting",
        "text": "In JavaScript all function statements defined in a scope are read and made available before the rest of the code in that scope is executed. Variables declarations are also read in before hand and made available, but assignments to those variables aren't done until execution reaches them."
      },
      "after": "6abb9e78de0fdb76",
      "id": "560328a31de32463",
      "date": 1448843470268
    },
    {
      "type": "add",
      "item": {
        "id": "0ca94f7bcc1197d5",
        "type": "reference",
        "site": "nrn.io",
        "slug": "array-like-objects",
        "title": "Array like objects",
        "text": "For historical reasons there are places in JavaScript where you end up interacting with objects that are a lot like Arrays, but technically aren't. The main difference is that they don't have Array.prototype in their prototype chain, and thus don't inherit the common array methods."
      },
      "after": "6abb9e78de0fdb76",
      "id": "0ca94f7bcc1197d5",
      "date": 1448843473005
    },
    {
      "type": "add",
      "item": {
        "id": "875ddb2ca56b08cb",
        "type": "reference",
        "site": "nrn.io",
        "slug": "mysteriously-mutating-objects",
        "title": "Mysteriously mutating objects",
        "text": "All objects in javaScript are mutable. In our own code base we use this for better or ill with very few train wrecks. But when we start accepting objects from other modules and unexpectedly mutating them, we can get into very hard to debug situations."
      },
      "after": "6abb9e78de0fdb76",
      "id": "875ddb2ca56b08cb",
      "date": 1448843475759
    },
    {
      "type": "add",
      "item": {
        "id": "83765f7d7f7b5d31",
        "type": "reference",
        "site": "nrn.io",
        "slug": "deeply-nested-callbacks-for-serial-execution",
        "title": "Deeply nested callbacks for serial execution",
        "text": "One of the easiest things to do in most languages is executing steps serially in sequence. In most languages, but not JavaScript. In JavaScript the way people first learn to write this is as an ever deepening series of anonymous callbacks, it is one of the leading causes of \"callbackhell\"."
      },
      "after": "6abb9e78de0fdb76",
      "id": "83765f7d7f7b5d31",
      "date": 1448843478568
    },
    {
      "type": "add",
      "item": {
        "id": "f615a95158a27014",
        "type": "reference",
        "site": "nrn.io",
        "slug": "events-arent-always-asynchronous",
        "title": "Events aren't always asynchronous",
        "text": "Most JavaScript event emitters (including Node's) are actually synchronous. This is extremely confusing if you happen to be coming from the browser, where events tend to be asynchronous. It's also confusing if you're used to promises, which guarantee that they will happen asynchronously. So, how can this trip us up?"
      },
      "after": "6abb9e78de0fdb76",
      "id": "f615a95158a27014",
      "date": 1448843481095
    },
    {
      "type": "add",
      "item": {
        "id": "b9dc1cb42a93afd4",
        "type": "reference",
        "site": "nrn.io",
        "slug": "loops-and-asynchronous-operations",
        "title": "Loops and asynchronous operations",
        "text": "Firing off asynchronous operations from inside a loop is one of the most often screwed up things in JavaScript. All of the same properties that so often come to our aid and make our lives easier combine to blind side us in a hard to spot way."
      },
      "after": "6abb9e78de0fdb76",
      "id": "b9dc1cb42a93afd4",
      "date": 1448843483846
    },
    {
      "type": "add",
      "item": {
        "id": "87eae547cc0ce9cf",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-common-pitfalls",
        "title": "JavaScript Common Pitfalls",
        "text": "This is a short list of common pitfalls in JavaScript, and some simple solutions for them. A lot of these problems arise from the deeply asynchronous nature of the language and may be applicable to other similar environments. Others are unique to JavaScript's attempts to be beginner friendly, and attempting to do something sensible given ambiguous input. Example code is also on GitHub [https://github.com/nrn/js-pitfall-examples here]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "87eae547cc0ce9cf",
      "date": 1448843486606
    },
    {
      "type": "add",
      "item": {
        "id": "9db353482e617a55",
        "type": "reference",
        "site": "nrn.io",
        "slug": "why-javascript",
        "title": "Why JavaScript",
        "text": "Learning to program in any language is awesome, but what language first? Really there are four I consider, Racket, Python, Ruby, and JavaScript. But my advice always ends up being: learn JavaScript, unless you are really motivated by another language, then learn that language first :)"
      },
      "after": "6abb9e78de0fdb76",
      "id": "9db353482e617a55",
      "date": 1448843493593
    },
    {
      "type": "add",
      "item": {
        "id": "24b68e2206db2358",
        "type": "reference",
        "site": "nrn.io",
        "slug": "two-sides-of-promises",
        "title": "Two sides of promises",
        "text": "There are at least two ideas known as promises in software. The one most common in JavaScript is the promise for a value that must be fetched asynchronously. The other is a promise for a value that need not be calculated yet. Can these two 'promises' be unified?"
      },
      "after": "6abb9e78de0fdb76",
      "id": "24b68e2206db2358",
      "date": 1448843496616
    },
    {
      "type": "add",
      "item": {
        "id": "cda6b6c33df89814",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-style",
        "title": "JavaScript Style",
        "text": "These resources are all about writing code that is less likely to have bugs through using a consistent style and avoiding practices that lead to confusing or hard to debug code. The problem is that this is all subjective material, and a giant bike shed for anyone who feels like arguing about it."
      },
      "after": "6abb9e78de0fdb76",
      "id": "cda6b6c33df89814",
      "date": 1448843517327
    },
    {
      "type": "add",
      "item": {
        "id": "a01f3bf818fcc581",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-streams",
        "title": "JavaScript Streams",
        "text": "Streams are an awesome asynchronous io abstraction. Streams come from the Unix tradition, and are one of the most important factors in node modules ability to uphold the [http://en.wikipedia.org/wiki/Unix_philosophy Unix philosophy]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "a01f3bf818fcc581",
      "date": 1448843519717
    },
    {
      "type": "add",
      "item": {
        "id": "11a1f90f63f6b2a2",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-scope",
        "title": "JavaScript Scope",
        "text": "JavaScript has lexical, function level scoping. This means that any inner scope has access to the outer scope where it is defined, no matter when/how it is invoked. And that the function is the only unit of scope, something defined within a function is defined inside the whole function. Loop or conditional bodies are irrelevant to scope."
      },
      "after": "6abb9e78de0fdb76",
      "id": "11a1f90f63f6b2a2",
      "date": 1448843522940
    },
    {
      "type": "add",
      "item": {
        "id": "bca43ff6f1b47b1c",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-invocation-context",
        "title": "JavaScript Invocation Context",
        "text": "Invocation context is the key to managing the value of `this` within a function. `this` is one way to facilitate code reuse, by making our functions more general. Instead of operating on one specific object in the scope in which they are declared, they can instead operate on the object that is their invocation context."
      },
      "after": "6abb9e78de0fdb76",
      "id": "bca43ff6f1b47b1c",
      "date": 1448843526120
    },
    {
      "type": "add",
      "item": {
        "id": "0b7b2db2c6677fed",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-inheritance",
        "title": "JavaScript Inheritance",
        "text": "JavaScript has single, prototypical inheritance. This means that each object can inherit from exactly one other object, any other object. And they can form a chain. You can thus inherit from an arbitrary number of previous objects, in order all the way back to Object.prototype, the default object that all prototype chains lead back to."
      },
      "after": "6abb9e78de0fdb76",
      "id": "0b7b2db2c6677fed",
      "date": 1448843529847
    },
    {
      "type": "add",
      "item": {
        "id": "b9521192b80b4aee",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-higher-level-abstractions",
        "title": "JavaScript Higher Level Abstractions",
        "text": "These resources build on the rest of our knowledge to create expressive, reusable, easy to interact with code."
      },
      "after": "6abb9e78de0fdb76",
      "id": "b9521192b80b4aee",
      "date": 1448843533358
    },
    {
      "type": "add",
      "item": {
        "id": "c443b08679962530",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-confused-concepts",
        "title": "JavaScript Confused Concepts",
        "text": "This is the content that originated here and not a set of links. It attempts to answer in detail the question \"What state does my function have access to when it's invoked?\" This turns out to be a complex question, leading to a lot of unexpected behavior. This section will hopefully remove a lot of surprises, allowing us to understand higher level abstractions that rely on these concepts."
      },
      "after": "6abb9e78de0fdb76",
      "id": "c443b08679962530",
      "date": 1448843537578
    },
    {
      "type": "add",
      "item": {
        "id": "015ce6a5d268a835",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-code-smells",
        "title": "JavaScript Code Smells",
        "text": "This is a collection of practices that I think should be avoided in JavaScript. Not absolutely never used, I'll leave that list for another page, or the community at large. But instead a guide to things that should be a flag, maybe I should rethink how I'm doing this and see if I can refactor this code to make it better by avoiding this."
      },
      "after": "6abb9e78de0fdb76",
      "id": "015ce6a5d268a835",
      "date": 1448843541111
    },
    {
      "type": "add",
      "item": {
        "id": "3f9b9388d952ca56",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-callbacks",
        "title": "JavaScript Callbacks",
        "text": "Callbacks are a central idea in JavaScript due to it's asynchronous nature. The idea is that we want something done that may take time (often io, an http request, writing to disk, getting something from the db, etc), and instead of waiting we want to continue on with what we were doing. To handle the results of that action we moved past, we call a callback function when the event loop is free."
      },
      "after": "6abb9e78de0fdb76",
      "id": "3f9b9388d952ca56",
      "date": 1448843558722
    },
    {
      "type": "add",
      "item": {
        "id": "b59955e4837cb366",
        "type": "reference",
        "site": "nrn.io",
        "slug": "javascript-basics",
        "title": "JavaScript Basics",
        "text": "If you are new to JavaScript this is where to start, basic syntax and ideas. The first few links are even good if you are completely new to programming. You may notice some radically different styles and best practices supported by these authors, at this point it's good to keep an open mind and try everything.  We'll worry about how that stuff works for you later."
      },
      "after": "6abb9e78de0fdb76",
      "id": "b59955e4837cb366",
      "date": 1448843561551
    },
    {
      "item": {
        "type": "factory",
        "id": "7cfdc4a12a67f2e0"
      },
      "id": "7cfdc4a12a67f2e0",
      "type": "add",
      "after": "6d0a178aff4bb210",
      "date": 1448843590996
    },
    {
      "type": "edit",
      "id": "7cfdc4a12a67f2e0",
      "item": {
        "type": "reference",
        "id": "7cfdc4a12a67f2e0",
        "site": "nrn.io",
        "slug": "javascript-mutability",
        "title": "JavaScript Mutability",
        "text": " "
      },
      "date": 1448843593020
    },
    {
      "type": "fork",
      "site": "david.bovill.me",
      "date": 1448888678011
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "id": "9bd89ad41a2fd134",
        "site": "c0de.academy",
        "slug": "dreamfactory",
        "title": "DreamFactory",
        "text": "With DreamFactory developers could easily deploy scaleable [[NoSQL]] document stores, and file storage system with a consistent and well documented interface- [https://www.dreamfactory.com/features html]."
      },
      "after": "6abb9e78de0fdb76",
      "id": "9bd89ad41a2fd134",
      "date": 1448888704250
    },
    {
      "type": "add",
      "item": {
        "id": "60c8d770f9d8d3a1",
        "type": "reference",
        "site": "future.fedwiki.org",
        "slug": "ipfs",
        "title": "IPFS",
        "text": "IPFS stands for the \"inter-planetary file system\". IPFS is a bold attempt at evolving the Internet's infrastructure."
      },
      "after": "9bd89ad41a2fd134",
      "id": "60c8d770f9d8d3a1",
      "date": 1448888707143
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "id": "0d41c1e62f5209d9",
        "site": "c0de.academy",
        "slug": "linked-data-wiki",
        "title": "Linked Data Wiki",
        "text": "So what is the relationship betweed [[Federated Wiki]] and [[Linked Data]]? Is not the merger of these two things the [[Web We Want]]?"
      },
      "after": "60c8d770f9d8d3a1",
      "id": "0d41c1e62f5209d9",
      "date": 1448888709901
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "id": "f4ddb5e4f64f065a",
        "site": "data.fedwiki.org",
        "slug": "dat",
        "title": "dat",
        "text": "Dat is a version-controlled, decentralized data sync tool designed to improve collaboration between data people and data systems - [https://github.com/maxogden/dat github]"
      },
      "after": "0d41c1e62f5209d9",
      "id": "f4ddb5e4f64f065a",
      "date": 1448888713430
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "id": "c2fad8358ce87094",
        "site": "future.fedwiki.org",
        "slug": "firebase",
        "title": "Firebase",
        "text": "Firebase provides a realtime database and backend as a service.  It is a realtime database which provides an API that allows developers to store and sync data across multiple clients - [https://en.wikipedia.org/wiki/Firebase wikipedia]"
      },
      "after": "0d41c1e62f5209d9",
      "id": "c2fad8358ce87094",
      "date": 1448888716259
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "id": "29b7d455d1b1c90e",
        "site": "future.fedwiki.org",
        "slug": "simpledb",
        "title": "SimpleDB",
        "text": "mazon SimpleDB is a distributed database written in Erlang by Amazon.com. It is used as a web service in concert with Amazon Elastic Compute Cloud (EC2) and Amazon S3 and is part of Amazon Web Services. It was announced on December 13, 2007 - [https://en.wikipedia.org/wiki/Amazon_SimpleDB wikipedia]"
      },
      "after": "f4ddb5e4f64f065a",
      "id": "29b7d455d1b1c90e",
      "date": 1448888720666
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "id": "a92643e67c96b3f4",
        "site": "future.fedwiki.org",
        "slug": "acid-properties",
        "title": "ACID Properties",
        "text": "ACID is a set of properties that guarantee that database transactions are processed reliably- [http://en.wikipedia.org/wiki/ACID wikipedia]"
      },
      "after": "c2fad8358ce87094",
      "id": "a92643e67c96b3f4",
      "date": 1448888723506
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "id": "99ab3739df459753",
        "site": "c0de.academy",
        "slug": "norvig-on-data",
        "title": "Norvig on Data",
        "text": "Peter Norvig, et al. \"The Unreasonable Effectiveness of Data\" in IEEE Intelligent Systems (2011) [http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/35179.pdf pdf]"
      },
      "after": "a92643e67c96b3f4",
      "id": "99ab3739df459753",
      "date": 1448888726181
    },
    {
      "type": "add",
      "item": {
        "id": "92abbc0d7dc71368",
        "text": "[[Dat]] is an open source project that provides a streaming interface between every file format and data storage backend.API's include [[Command Line]], [[REST]], and [[JavaScript]]",
        "type": "paragraph",
        "alias": "cdb2caf500585677"
      },
      "after": "99ab3739df459753",
      "id": "92abbc0d7dc71368",
      "date": 1448888738814
    },
    {
      "type": "edit",
      "id": "5e5a18b0b788265d",
      "item": {
        "id": "5e5a18b0b788265d",
        "text": "[[COWL]] (Confinement with Origin Web Labels) is a robust JavaScript confinement system for modern web browsers. COWL introduces label-based mandatory access control to browsing contexts (pages, iframes, etc.) in a way that is fully backward-compatible with legacy web content - [http://cowl.ws/ cowl.ws]",
        "type": "paragraph"
      },
      "date": 1448888775115
    },
    {
      "type": "remove",
      "id": "5e5a18b0b788265d",
      "date": 1448888781416
    },
    {
      "type": "move",
      "order": [
        "6abb9e78de0fdb76",
        "9bd89ad41a2fd134",
        "60c8d770f9d8d3a1",
        "0d41c1e62f5209d9",
        "c2fad8358ce87094",
        "a92643e67c96b3f4",
        "99ab3739df459753",
        "cdb2caf500585677",
        "92abbc0d7dc71368",
        "f4ddb5e4f64f065a",
        "29b7d455d1b1c90e",
        "b59955e4837cb366",
        "3f9b9388d952ca56",
        "015ce6a5d268a835",
        "c443b08679962530",
        "b9521192b80b4aee",
        "0b7b2db2c6677fed",
        "bca43ff6f1b47b1c",
        "11a1f90f63f6b2a2",
        "a01f3bf818fcc581",
        "cda6b6c33df89814",
        "24b68e2206db2358",
        "9db353482e617a55",
        "87eae547cc0ce9cf",
        "b9dc1cb42a93afd4",
        "f615a95158a27014",
        "83765f7d7f7b5d31",
        "875ddb2ca56b08cb",
        "0ca94f7bcc1197d5",
        "560328a31de32463",
        "82864f17848fb413",
        "92c7d931f79a17d9",
        "f422f521f2631d08",
        "3f2897f1844c29d0",
        "6d5bd070aa7e322a",
        "0eaa6ad8fa337f25",
        "5941e7da102a2a9a",
        "5b4fa576ddff4964",
        "99f1efd612d2e862",
        "a2ca109b9ee97809",
        "561bbeb547a87874",
        "05e432ce81101d7c",
        "912bdd24c7f9731a",
        "69a1072e75f791bf",
        "db88a6a5f07581c1",
        "5616a7e1cf5d1c29",
        "8175bd0d7609832d",
        "6d0a178aff4bb210",
        "7cfdc4a12a67f2e0"
      ],
      "id": "cdb2caf500585677",
      "date": 1448888787793
    },
    {
      "type": "edit",
      "id": "6abb9e78de0fdb76",
      "item": {
        "id": "6abb9e78de0fdb76",
        "text": "The [[WebID]] specification is being developed and debated on the W3C WebID Community Group. Please don't hesitate to join and ask us about any implementation issues you come accross, problems with the spec, new implementations you have written that use WebID in one form or another - [http://webid.info/ webid.info]",
        "type": "paragraph"
      },
      "date": 1448888829917
    },
    {
      "type": "edit",
      "id": "6abb9e78de0fdb76",
      "item": {
        "id": "6abb9e78de0fdb76",
        "text": "Here we list a set of references to pages and sites relevant to data and [[Javascript]]:",
        "type": "paragraph"
      },
      "date": 1448888981497
    },
    {
      "item": {
        "type": "factory",
        "id": "39d65aa7a997e9a8"
      },
      "id": "39d65aa7a997e9a8",
      "type": "add",
      "after": "7cfdc4a12a67f2e0",
      "date": 1448888989051
    },
    {
      "type": "move",
      "order": [
        "6abb9e78de0fdb76",
        "9bd89ad41a2fd134",
        "39d65aa7a997e9a8",
        "60c8d770f9d8d3a1",
        "0d41c1e62f5209d9",
        "c2fad8358ce87094",
        "a92643e67c96b3f4",
        "99ab3739df459753",
        "cdb2caf500585677",
        "92abbc0d7dc71368",
        "f4ddb5e4f64f065a",
        "29b7d455d1b1c90e",
        "b59955e4837cb366",
        "3f9b9388d952ca56",
        "015ce6a5d268a835",
        "c443b08679962530",
        "b9521192b80b4aee",
        "0b7b2db2c6677fed",
        "bca43ff6f1b47b1c",
        "11a1f90f63f6b2a2",
        "a01f3bf818fcc581",
        "cda6b6c33df89814",
        "24b68e2206db2358",
        "9db353482e617a55",
        "87eae547cc0ce9cf",
        "b9dc1cb42a93afd4",
        "f615a95158a27014",
        "83765f7d7f7b5d31",
        "875ddb2ca56b08cb",
        "0ca94f7bcc1197d5",
        "560328a31de32463",
        "82864f17848fb413",
        "92c7d931f79a17d9",
        "f422f521f2631d08",
        "3f2897f1844c29d0",
        "6d5bd070aa7e322a",
        "0eaa6ad8fa337f25",
        "5941e7da102a2a9a",
        "5b4fa576ddff4964",
        "99f1efd612d2e862",
        "a2ca109b9ee97809",
        "561bbeb547a87874",
        "05e432ce81101d7c",
        "912bdd24c7f9731a",
        "69a1072e75f791bf",
        "db88a6a5f07581c1",
        "5616a7e1cf5d1c29",
        "8175bd0d7609832d",
        "6d0a178aff4bb210",
        "7cfdc4a12a67f2e0"
      ],
      "id": "39d65aa7a997e9a8",
      "date": 1448889010440
    },
    {
      "type": "edit",
      "id": "39d65aa7a997e9a8",
      "item": {
        "type": "reference",
        "id": "39d65aa7a997e9a8",
        "site": "javascript.c0de.academy",
        "slug": "cowl",
        "title": "COWL",
        "text": "[[COWL]] (Confinement with Origin Web Labels) is a robust JavaScript confinement system for modern web browsers. COWL introduces label-based mandatory access control to browsing contexts (pages, iframes, etc.) in a way that is fully backward-compatible with legacy web content - [http://cowl.ws/ cowl.ws]"
      },
      "date": 1448889012234
    },
    {
      "type": "edit",
      "id": "cdb2caf500585677",
      "item": {
        "id": "cdb2caf500585677",
        "text": "[[Dat]] is an open source project that provides a streaming interface between every file format and data storage backend. API's include [[Command Line]], [[REST]], and [[JavaScript]]",
        "type": "paragraph"
      },
      "date": 1448889059034
    },
    {
      "type": "remove",
      "id": "cdb2caf500585677",
      "date": 1448889084607
    },
    {
      "type": "remove",
      "id": "cdb2caf500585677",
      "date": 1448889094849
    },
    {
      "type": "edit",
      "id": "f4ddb5e4f64f065a",
      "item": {
        "type": "reference",
        "id": "f4ddb5e4f64f065a",
        "site": "data.fedwiki.org",
        "slug": "dat",
        "title": "dat",
        "text": "[[Dat]] is an open source project that provides a streaming interface between every file format and data storage backend. API's include [[Command Line]], [[REST]], and [[JavaScript]]"
      },
      "date": 1448889103338
    },
    {
      "type": "edit",
      "id": "7cfdc4a12a67f2e0",
      "item": {
        "type": "reference",
        "id": "7cfdc4a12a67f2e0",
        "site": "nrn.io",
        "slug": "javascript-mutability",
        "title": "JavaScript Mutability",
        "text": "In JavaScript all primitives are immutable, and all objects are mutable. The primitives types are strings, numbers, booleans, null, and undefined. Everything else is an object, including functions, regexs, and arrays. "
      },
      "date": 1448889131635
    },
    {
      "type": "remove",
      "id": "b59955e4837cb366",
      "date": 1448889155858
    },
    {
      "type": "remove",
      "id": "015ce6a5d268a835",
      "date": 1448889331366
    },
    {
      "type": "remove",
      "id": "c443b08679962530",
      "date": 1448889350754
    },
    {
      "type": "remove",
      "id": "cda6b6c33df89814",
      "date": 1448889382591
    },
    {
      "type": "remove",
      "id": "3f9b9388d952ca56",
      "date": 1448889569663
    },
    {
      "type": "remove",
      "id": "11a1f90f63f6b2a2",
      "date": 1448889595877
    },
    {
      "type": "remove",
      "id": "0b7b2db2c6677fed",
      "date": 1448889612246
    },
    {
      "type": "remove",
      "id": "a01f3bf818fcc581",
      "date": 1448889639130
    },
    {
      "type": "remove",
      "id": "9db353482e617a55",
      "date": 1448889648407
    },
    {
      "type": "remove",
      "id": "bca43ff6f1b47b1c",
      "date": 1448889791357
    },
    {
      "type": "remove",
      "id": "b9521192b80b4aee",
      "date": 1448889802093
    },
    {
      "type": "move",
      "order": [
        "6abb9e78de0fdb76",
        "29b7d455d1b1c90e",
        "9bd89ad41a2fd134",
        "39d65aa7a997e9a8",
        "60c8d770f9d8d3a1",
        "0d41c1e62f5209d9",
        "c2fad8358ce87094",
        "a92643e67c96b3f4",
        "99ab3739df459753",
        "f4ddb5e4f64f065a",
        "24b68e2206db2358",
        "87eae547cc0ce9cf",
        "b9dc1cb42a93afd4",
        "f615a95158a27014",
        "83765f7d7f7b5d31",
        "875ddb2ca56b08cb",
        "0ca94f7bcc1197d5",
        "560328a31de32463",
        "82864f17848fb413",
        "92c7d931f79a17d9",
        "f422f521f2631d08",
        "3f2897f1844c29d0",
        "6d5bd070aa7e322a",
        "0eaa6ad8fa337f25",
        "5941e7da102a2a9a",
        "5b4fa576ddff4964",
        "99f1efd612d2e862",
        "a2ca109b9ee97809",
        "561bbeb547a87874",
        "05e432ce81101d7c",
        "912bdd24c7f9731a",
        "69a1072e75f791bf",
        "db88a6a5f07581c1",
        "5616a7e1cf5d1c29",
        "8175bd0d7609832d",
        "6d0a178aff4bb210",
        "7cfdc4a12a67f2e0"
      ],
      "id": "29b7d455d1b1c90e",
      "date": 1448889823772
    },
    {
      "type": "move",
      "order": [
        "6abb9e78de0fdb76",
        "29b7d455d1b1c90e",
        "f4ddb5e4f64f065a",
        "9bd89ad41a2fd134",
        "39d65aa7a997e9a8",
        "60c8d770f9d8d3a1",
        "0d41c1e62f5209d9",
        "c2fad8358ce87094",
        "a92643e67c96b3f4",
        "99ab3739df459753",
        "24b68e2206db2358",
        "87eae547cc0ce9cf",
        "b9dc1cb42a93afd4",
        "f615a95158a27014",
        "83765f7d7f7b5d31",
        "875ddb2ca56b08cb",
        "0ca94f7bcc1197d5",
        "560328a31de32463",
        "82864f17848fb413",
        "92c7d931f79a17d9",
        "f422f521f2631d08",
        "3f2897f1844c29d0",
        "6d5bd070aa7e322a",
        "0eaa6ad8fa337f25",
        "5941e7da102a2a9a",
        "5b4fa576ddff4964",
        "99f1efd612d2e862",
        "a2ca109b9ee97809",
        "561bbeb547a87874",
        "05e432ce81101d7c",
        "912bdd24c7f9731a",
        "69a1072e75f791bf",
        "db88a6a5f07581c1",
        "5616a7e1cf5d1c29",
        "8175bd0d7609832d",
        "6d0a178aff4bb210",
        "7cfdc4a12a67f2e0"
      ],
      "id": "f4ddb5e4f64f065a",
      "date": 1448889828584
    },
    {
      "type": "remove",
      "id": "87eae547cc0ce9cf",
      "date": 1448890108453
    },
    {
      "type": "remove",
      "id": "24b68e2206db2358",
      "date": 1448890352321
    },
    {
      "type": "remove",
      "id": "f615a95158a27014",
      "date": 1448890360336
    },
    {
      "type": "remove",
      "id": "b9dc1cb42a93afd4",
      "date": 1448890366856
    },
    {
      "type": "remove",
      "id": "83765f7d7f7b5d31",
      "date": 1448890372248
    },
    {
      "type": "remove",
      "id": "875ddb2ca56b08cb",
      "date": 1448890377792
    },
    {
      "type": "remove",
      "id": "0ca94f7bcc1197d5",
      "date": 1448890383568
    },
    {
      "type": "remove",
      "id": "560328a31de32463",
      "date": 1448890388896
    },
    {
      "type": "remove",
      "id": "82864f17848fb413",
      "date": 1448890394009
    },
    {
      "type": "remove",
      "id": "92c7d931f79a17d9",
      "date": 1448890397225
    },
    {
      "type": "remove",
      "id": "f422f521f2631d08",
      "date": 1448890402105
    },
    {
      "type": "remove",
      "id": "3f2897f1844c29d0",
      "date": 1448890407362
    },
    {
      "type": "remove",
      "id": "6d5bd070aa7e322a",
      "date": 1448890412745
    },
    {
      "type": "remove",
      "id": "0eaa6ad8fa337f25",
      "date": 1448890417545
    },
    {
      "type": "remove",
      "id": "5941e7da102a2a9a",
      "date": 1448890424489
    },
    {
      "type": "remove",
      "id": "5b4fa576ddff4964",
      "date": 1448890430786
    },
    {
      "type": "remove",
      "id": "99f1efd612d2e862",
      "date": 1448890436394
    },
    {
      "type": "remove",
      "id": "a2ca109b9ee97809",
      "date": 1448890440818
    },
    {
      "type": "remove",
      "id": "561bbeb547a87874",
      "date": 1448890445394
    },
    {
      "type": "remove",
      "id": "05e432ce81101d7c",
      "date": 1448890449994
    },
    {
      "type": "remove",
      "id": "912bdd24c7f9731a",
      "date": 1448890457370
    },
    {
      "type": "remove",
      "id": "69a1072e75f791bf",
      "date": 1448890462547
    },
    {
      "type": "remove",
      "id": "db88a6a5f07581c1",
      "date": 1448890465675
    },
    {
      "type": "remove",
      "id": "5616a7e1cf5d1c29",
      "date": 1448890468459
    },
    {
      "type": "remove",
      "id": "8175bd0d7609832d",
      "date": 1448890472442
    },
    {
      "type": "remove",
      "id": "6d0a178aff4bb210",
      "date": 1448890476539
    },
    {
      "type": "remove",
      "id": "7cfdc4a12a67f2e0",
      "date": 1448890500527
    },
    {
      "type": "edit",
      "id": "29b7d455d1b1c90e",
      "item": {
        "type": "reference",
        "id": "29b7d455d1b1c90e",
        "site": "future.fedwiki.org",
        "slug": "simpledb",
        "title": "SimpleDB",
        "text": "Amazon SimpleDB is a distributed database written in Erlang by Amazon.com. It is used as a web service in concert with Amazon Elastic Compute Cloud (EC2) and Amazon S3 and is part of Amazon Web Services. It was announced on December 13, 2007 - [https://en.wikipedia.org/wiki/Amazon_SimpleDB wikipedia]"
      },
      "date": 1451696088141,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "fork",
      "date": 1451696122896
    },
    {
      "type": "fork",
      "site": "javascript.c0de.academy",
      "date": 1451696145191
    }
  ],
  "story": [
    {
      "id": "6abb9e78de0fdb76",
      "text": "Here we list a set of references to pages and sites relevant to data and [[Javascript]]:",
      "type": "paragraph"
    },
    {
      "type": "reference",
      "id": "29b7d455d1b1c90e",
      "site": "future.fedwiki.org",
      "slug": "simpledb",
      "title": "SimpleDB",
      "text": "Amazon SimpleDB is a distributed database written in Erlang by Amazon.com. It is used as a web service in concert with Amazon Elastic Compute Cloud (EC2) and Amazon S3 and is part of Amazon Web Services. It was announced on December 13, 2007 - [https://en.wikipedia.org/wiki/Amazon_SimpleDB wikipedia]"
    },
    {
      "type": "reference",
      "id": "f4ddb5e4f64f065a",
      "site": "data.fedwiki.org",
      "slug": "dat",
      "title": "dat",
      "text": "[[Dat]] is an open source project that provides a streaming interface between every file format and data storage backend. API's include [[Command Line]], [[REST]], and [[JavaScript]]"
    },
    {
      "type": "reference",
      "id": "9bd89ad41a2fd134",
      "site": "c0de.academy",
      "slug": "dreamfactory",
      "title": "DreamFactory",
      "text": "With DreamFactory developers could easily deploy scaleable [[NoSQL]] document stores, and file storage system with a consistent and well documented interface- [https://www.dreamfactory.com/features html]."
    },
    {
      "type": "reference",
      "id": "39d65aa7a997e9a8",
      "site": "javascript.c0de.academy",
      "slug": "cowl",
      "title": "COWL",
      "text": "[[COWL]] (Confinement with Origin Web Labels) is a robust JavaScript confinement system for modern web browsers. COWL introduces label-based mandatory access control to browsing contexts (pages, iframes, etc.) in a way that is fully backward-compatible with legacy web content - [http://cowl.ws/ cowl.ws]"
    },
    {
      "id": "60c8d770f9d8d3a1",
      "type": "reference",
      "site": "future.fedwiki.org",
      "slug": "ipfs",
      "title": "IPFS",
      "text": "IPFS stands for the \"inter-planetary file system\". IPFS is a bold attempt at evolving the Internet's infrastructure."
    },
    {
      "type": "reference",
      "id": "0d41c1e62f5209d9",
      "site": "c0de.academy",
      "slug": "linked-data-wiki",
      "title": "Linked Data Wiki",
      "text": "So what is the relationship betweed [[Federated Wiki]] and [[Linked Data]]? Is not the merger of these two things the [[Web We Want]]?"
    },
    {
      "type": "reference",
      "id": "c2fad8358ce87094",
      "site": "future.fedwiki.org",
      "slug": "firebase",
      "title": "Firebase",
      "text": "Firebase provides a realtime database and backend as a service.  It is a realtime database which provides an API that allows developers to store and sync data across multiple clients - [https://en.wikipedia.org/wiki/Firebase wikipedia]"
    },
    {
      "type": "reference",
      "id": "a92643e67c96b3f4",
      "site": "future.fedwiki.org",
      "slug": "acid-properties",
      "title": "ACID Properties",
      "text": "ACID is a set of properties that guarantee that database transactions are processed reliably- [http://en.wikipedia.org/wiki/ACID wikipedia]"
    },
    {
      "type": "reference",
      "id": "99ab3739df459753",
      "site": "c0de.academy",
      "slug": "norvig-on-data",
      "title": "Norvig on Data",
      "text": "Peter Norvig, et al. \"The Unreasonable Effectiveness of Data\" in IEEE Intelligent Systems (2011) [http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/35179.pdf pdf]"
    }
  ],
  "title": "Data and Javascript"
}