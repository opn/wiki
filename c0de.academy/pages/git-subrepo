{
  "title": "git-subrepo",
  "story": [
    {
      "type": "paragraph",
      "id": "637fdc695ddec7f5",
      "text": "The git-subrepo command \"clones\" an external git repo into a subdirectory of your repo. Later on, upstream changes can be pulled in, and local changes can be pushed back - [https://github.com/ingydotnet/git-subrepo#readme github]"
    },
    {
      "type": "markdown",
      "id": "919ea04979f35a8a",
      "text": "* Tutorial - [https://github.com/ingydotnet/git-subrepo/wiki/Basics github]"
    },
    {
      "type": "markdown",
      "id": "217294e817dd7709",
      "text": "# Benefits"
    },
    {
      "type": "paragraph",
      "id": "4fc6ed43d8de2817",
      "text": "This command is an improvement from git-submodule and [[git-subtree]]; two other git commands with similar goals, but various problems."
    },
    {
      "type": "markdown",
      "id": "32a687dfb41a7c3b",
      "text": "\nIt assumes there are 3 main roles of people interacting with a repo, and attempts to serve them all well:\n\n* owner - The person who authors/owns/maintains a repo.\n* users - People who are just using/installing the repo.\n* collaborators - People who commit code to the repo and subrepos."
    },
    {
      "type": "markdown",
      "id": "f58e713e98e1550d",
      "text": "The git-subrepo command benefits these roles in the following ways:\n\n* Simple and intuitive commandline usage.\n* Users get your repo and all your subrepos just by cloning your repo.\n* Users do not need to install git-subrepo, ever.\n* Collaborators do not need to install unless they want to push/pull.\n* Collaborators know when a subdir is a subrepo (it has a .gitrepo file).\n* Well named branches and remotes are generated for manual operations.\n* Owners do not deal with the complications of keeping submodules in sync.\n* Subrepo repositories can contain subrepos themselves.\n* Branching with subrepos JustWorks™.\n* Different branches can have different subrepos in different states, etc.\n* Moving/renaming/deleting a subrepo subdir JustWorks™.\n* You can init an existing subdirectory into a subrepo.\n* Your git history is kept squeaky clean.\n* Upstream history (clone/pull) is condensed into a single commit.\n* You can see the subrepo history with git log subrepo/<subdir>/fetch.\n* Commits pushed back upstream are not condensed.\n* Trivial to try any subrepo operations and then reset back.\n* No configuration required.\n* Does not introduce history that messes up other git commands.\n* Fixes known rebase failures with git-subtree."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "git-subrepo",
        "story": []
      },
      "date": 1461352484388
    },
    {
      "item": {
        "type": "factory",
        "id": "637fdc695ddec7f5"
      },
      "id": "637fdc695ddec7f5",
      "type": "add",
      "date": 1461352485935
    },
    {
      "type": "edit",
      "id": "637fdc695ddec7f5",
      "item": {
        "type": "paragraph",
        "id": "637fdc695ddec7f5",
        "text": "- [https://github.com/ingydotnet/git-subrepo#readme github]"
      },
      "date": 1461352495619
    },
    {
      "type": "add",
      "id": "217294e817dd7709",
      "item": {
        "type": "paragraph",
        "id": "217294e817dd7709",
        "text": "# Benefits"
      },
      "after": "637fdc695ddec7f5",
      "date": 1461352536778
    },
    {
      "type": "add",
      "id": "4fc6ed43d8de2817",
      "item": {
        "type": "paragraph",
        "id": "4fc6ed43d8de2817",
        "text": "This command is an improvement from git-submodule and git-subtree; two other git commands with similar goals, but various problems."
      },
      "after": "217294e817dd7709",
      "date": 1461352539134
    },
    {
      "type": "add",
      "id": "32a687dfb41a7c3b",
      "item": {
        "type": "paragraph",
        "id": "32a687dfb41a7c3b",
        "text": "\nIt assumes there are 3 main roles of people interacting with a repo, and attempts to serve them all well:\n\n* owner - The person who authors/owns/maintains a repo.\n* users - People who are just using/installing the repo.\n* collaborators - People who commit code to the repo and subrepos."
      },
      "after": "4fc6ed43d8de2817",
      "date": 1461352558022
    },
    {
      "type": "edit",
      "id": "217294e817dd7709",
      "item": {
        "type": "markdown",
        "id": "217294e817dd7709",
        "text": "# Benefits"
      },
      "date": 1461352561644
    },
    {
      "type": "add",
      "id": "f58e713e98e1550d",
      "item": {
        "type": "paragraph",
        "id": "f58e713e98e1550d",
        "text": "The git-subrepo command benefits these roles in the following ways:\n\nSimple and intuitive commandline usage.\nUsers get your repo and all your subrepos just by cloning your repo.\nUsers do not need to install git-subrepo, ever.\nCollaborators do not need to install unless they want to push/pull.\nCollaborators know when a subdir is a subrepo (it has a .gitrepo file).\nWell named branches and remotes are generated for manual operations.\nOwners do not deal with the complications of keeping submodules in sync.\nSubrepo repositories can contain subrepos themselves.\nBranching with subrepos JustWorks™.\nDifferent branches can have different subrepos in different states, etc.\nMoving/renaming/deleting a subrepo subdir JustWorks™.\nYou can init an existing subdirectory into a subrepo.\nYour git history is kept squeaky clean.\nUpstream history (clone/pull) is condensed into a single commit.\nYou can see the subrepo history with git log subrepo/<subdir>/fetch.\nCommits pushed back upstream are not condensed.\nTrivial to try any subrepo operations and then reset back.\nNo configuration required.\nDoes not introduce history that messes up other git commands.\nFixes known rebase failures with git-subtree."
      },
      "after": "32a687dfb41a7c3b",
      "date": 1461352562811
    },
    {
      "type": "edit",
      "id": "637fdc695ddec7f5",
      "item": {
        "type": "paragraph",
        "id": "637fdc695ddec7f5",
        "text": "The git-subrepo command \"clones\" an external git repo into a subdirectory of your repo. Later on, upstream changes can be pulled in, and local changes can be pushed back - [https://github.com/ingydotnet/git-subrepo#readme github]"
      },
      "date": 1461352586098
    },
    {
      "type": "edit",
      "id": "32a687dfb41a7c3b",
      "item": {
        "type": "markdown",
        "id": "32a687dfb41a7c3b",
        "text": "\nIt assumes there are 3 main roles of people interacting with a repo, and attempts to serve them all well:\n\n* owner - The person who authors/owns/maintains a repo.\n* users - People who are just using/installing the repo.\n* collaborators - People who commit code to the repo and subrepos."
      },
      "date": 1461352588772
    },
    {
      "type": "edit",
      "id": "f58e713e98e1550d",
      "item": {
        "type": "paragraph",
        "id": "f58e713e98e1550d",
        "text": "The git-subrepo command benefits these roles in the following ways:\n\n* Simple and intuitive commandline usage.\n* Users get your repo and all your subrepos just by cloning your repo.\n* Users do not need to install git-subrepo, ever.\n* Collaborators do not need to install unless they want to push/pull.\n* Collaborators know when a subdir is a subrepo (it has a .gitrepo file).\n* Well named branches and remotes are generated for manual operations.\n* Owners do not deal with the complications of keeping submodules in sync.\n* Subrepo repositories can contain subrepos themselves.\n* Branching with subrepos JustWorks™.\n* Different branches can have different subrepos in different states, etc.\n* Moving/renaming/deleting a subrepo subdir JustWorks™.\n* You can init an existing subdirectory into a subrepo.\n* Your git history is kept squeaky clean.\n* Upstream history (clone/pull) is condensed into a single commit.\n* You can see the subrepo history with git log subrepo/<subdir>/fetch.\n* Commits pushed back upstream are not condensed.\n* Trivial to try any subrepo operations and then reset back.\n* No configuration required.\n* Does not introduce history that messes up other git commands.\n* Fixes known rebase failures with git-subtree."
      },
      "date": 1461352638093
    },
    {
      "type": "edit",
      "id": "f58e713e98e1550d",
      "item": {
        "type": "markdown",
        "id": "f58e713e98e1550d",
        "text": "The git-subrepo command benefits these roles in the following ways:\n\n* Simple and intuitive commandline usage.\n* Users get your repo and all your subrepos just by cloning your repo.\n* Users do not need to install git-subrepo, ever.\n* Collaborators do not need to install unless they want to push/pull.\n* Collaborators know when a subdir is a subrepo (it has a .gitrepo file).\n* Well named branches and remotes are generated for manual operations.\n* Owners do not deal with the complications of keeping submodules in sync.\n* Subrepo repositories can contain subrepos themselves.\n* Branching with subrepos JustWorks™.\n* Different branches can have different subrepos in different states, etc.\n* Moving/renaming/deleting a subrepo subdir JustWorks™.\n* You can init an existing subdirectory into a subrepo.\n* Your git history is kept squeaky clean.\n* Upstream history (clone/pull) is condensed into a single commit.\n* You can see the subrepo history with git log subrepo/<subdir>/fetch.\n* Commits pushed back upstream are not condensed.\n* Trivial to try any subrepo operations and then reset back.\n* No configuration required.\n* Does not introduce history that messes up other git commands.\n* Fixes known rebase failures with git-subtree."
      },
      "date": 1461352639041
    },
    {
      "type": "edit",
      "id": "4fc6ed43d8de2817",
      "item": {
        "type": "paragraph",
        "id": "4fc6ed43d8de2817",
        "text": "This command is an improvement from git-submodule and [[git-subtree]]; two other git commands with similar goals, but various problems."
      },
      "date": 1462874165365
    },
    {
      "type": "fork",
      "site": "dev.himalayan.academy",
      "date": 1473188242571
    },
    {
      "type": "add",
      "id": "919ea04979f35a8a",
      "item": {
        "type": "paragraph",
        "id": "919ea04979f35a8a",
        "text": "* Tutorial - [https://github.com/ingydotnet/git-subrepo/wiki/Basics github]"
      },
      "after": "637fdc695ddec7f5",
      "date": 1473192142917
    },
    {
      "type": "edit",
      "id": "919ea04979f35a8a",
      "item": {
        "type": "markdown",
        "id": "919ea04979f35a8a",
        "text": "* Tutorial - [https://github.com/ingydotnet/git-subrepo/wiki/Basics github]"
      },
      "date": 1473192144269
    }
  ]
}