{
  "title": "Immutable object",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Immutable object"
      },
      "date": 1493479689377,
      "source": {
        "pageTitle": "Immutable object",
        "pageSlug": "Immutable_object#See_also",
        "url": "https://en.wikipedia.org/wiki/Immutable_object",
        "date": 1493479689377,
        "link_dictionary": {
          "wiki_links": {
            "See also": {
              "section_number": 20,
              "section_level": 2,
              "dot_number": 3
            },
            "External links": {
              "section_number": 22,
              "section_level": 2,
              "dot_number": 5
            },
            "References": {
              "section_number": 21,
              "section_level": 2,
              "dot_number": 4
            },
            "Concepts": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Language-specific details": {
              "section_number": 10,
              "section_level": 2,
              "dot_number": 2
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 761408683,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1493479692976
    },
    {
      "type": "fork",
      "site": "permanent.wiki",
      "date": 1493480935311
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "656f9896-793a-4c71-a215-34825e29e1ac",
      "text": "In object-oriented and functional programming, an immutable object (unchangeable object) is an object whose state cannot be modified after it is created. This is in contrast to a mutable object (changeable object), which can be modified after it is created. In some cases, an object is considered immutable even if some internally used attributes change but the object's state appears to be unchanging from an external point of view. For example, an object that uses memoization to cache the results of expensive computations could still be considered an immutable object - [https://en.wikipedia.org/wiki/Immutable_object wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "87e240bf-14df-49d1-93d0-75715a8a800d",
      "text": "Strings and other concrete objects are typically expressed as immutable objects to improve readability and runtime efficiency in object-oriented programming. Immutable objects are also useful because they are inherently thread-safe. Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects."
    },
    {
      "type": "markdown",
      "id": "61857414-b7a8-4381-b1f4-09b15dbeb75b",
      "text": "# See also\n* [[Concepts]]\n* [[Language-specific details]]\n* [[See also]]\n* [[References]]\n* [[External links]]"
    }
  ]
}