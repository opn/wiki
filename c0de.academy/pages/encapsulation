{
  "title": "Encapsulation",
  "story": [
    {
      "type": "paragraph",
      "id": "fcadbcb2-7d6b-418c-bc02-fc91bf87a211",
      "text": "If a class disallows calling code from accessing internal object data and forces access through methods only, this is a strong form of abstraction or information hiding known as encapsulation ([[Encapsulation (object-oriented programming)]]).  "
    },
    {
      "type": "html",
      "id": "9bdc311411095835",
      "text": "Some languages (Java, for example) let classes enforce access restrictions explicitly, for example denoting internal data with the <code>private</code> keyword and designating methods intended for use by code outside the class with the <code>public</code> keyword.  "
    },
    {
      "type": "html",
      "id": "8bfb68a26b2317a6",
      "text": "Methods may also be designed public, private, or intermediate levels such as <code>protected</code> (which typically allows access from other objects of the same class, but not objects of a different class).  In other languages (like Python) this is enforced only by convention (for example, <code>private</code> methods may have names that start with an [[underscore]]).  Encapsulation prevents external code from being concerned with the internal workings of an object.  "
    },
    {
      "type": "paragraph",
      "id": "d8f062d6daf2e6c9",
      "text": "This facilitates [[code refactoring]], for example allowing the author of the class to change how objects of that class represent their data internally without changing any external code (as long as \"public\" method calls work the same way).  It also encourages programmers to put all the code that is concerned with a certain set of data in the same class, which organizes it for easy comprehension by other programmers.  Encapsulation is a technique that encourages decoupling ([[Coupling (computer programming)]]) - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Encapsulation wikipedia]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Encapsulation"
      },
      "date": 1466430977614,
      "source": {
        "pageTitle": "Object-oriented programming",
        "pageSlug": "Object-oriented programming",
        "url": "https://en.wikipedia.org/wiki/Object_Oriented_Programming#Encapsulation",
        "date": 1466430977614,
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 726062889,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466430980236
    },
    {
      "type": "edit",
      "id": "fcadbcb2-7d6b-418c-bc02-fc91bf87a211",
      "item": {
        "type": "paragraph",
        "id": "fcadbcb2-7d6b-418c-bc02-fc91bf87a211",
        "text": "If a class disallows calling code from accessing internal object data and forces access through methods only, this is a strong form of abstraction or information hiding known as encapsulation ([[Encapsulation (object-oriented programming)]]).  "
      },
      "date": 1491953040881
    },
    {
      "type": "add",
      "id": "798c36af8e420a64",
      "item": {
        "type": "paragraph",
        "id": "798c36af8e420a64",
        "text": "Some languages (Java, for example) let classes enforce access restrictions explicitly, for example denoting internal data with the <code>private</code> keyword and designating methods intended for use by code outside the class with the <code>public</code> keyword.  "
      },
      "after": "fcadbcb2-7d6b-418c-bc02-fc91bf87a211",
      "date": 1491953051776
    },
    {
      "type": "edit",
      "id": "798c36af8e420a64",
      "item": {
        "type": "markdown",
        "id": "798c36af8e420a64",
        "text": "Some languages (Java, for example) let classes enforce access restrictions explicitly, for example denoting internal data with the <code>private</code> keyword and designating methods intended for use by code outside the class with the <code>public</code> keyword.  "
      },
      "date": 1491953053563
    },
    {
      "type": "add",
      "id": "8bfb68a26b2317a6",
      "item": {
        "type": "paragraph",
        "id": "8bfb68a26b2317a6",
        "text": "Methods may also be designed public, private, or intermediate levels such as <code>protected</code> (which typically allows access from other objects of the same class, but not objects of a different class).  In other languages (like Python) this is enforced only by convention (for example, <code>private</code> methods may have names that start with an [[underscore]]).  Encapsulation prevents external code from being concerned with the internal workings of an object.  This facilitates [[code refactoring]], for example allowing the author of the class to change how objects of that class represent their data internally without changing any external code (as long as \"public\" method calls work the same way).  It also encourages programmers to put all the code that is concerned with a certain set of data in the same class, which organizes it for easy comprehension by other programmers.  Encapsulation is a technique that encourages decoupling ([[Coupling (computer programming)]]) - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Encapsulation wikipedia]"
      },
      "after": "798c36af8e420a64",
      "date": 1491953056076
    },
    {
      "type": "edit",
      "id": "798c36af8e420a64",
      "item": {
        "type": "markdown",
        "id": "798c36af8e420a64",
        "text": "<b>Some languages (Java, for example) let classes enforce access restrictions explicitly, for example denoting internal data with the <code>private</code> keyword and designating methods intended for use by code outside the class with the <code>public</code> keyword.  "
      },
      "date": 1491953063378
    },
    {
      "item": {
        "type": "factory",
        "id": "9bdc311411095835"
      },
      "id": "9bdc311411095835",
      "type": "add",
      "after": "8bfb68a26b2317a6",
      "date": 1491953075194
    },
    {
      "type": "move",
      "order": [
        "fcadbcb2-7d6b-418c-bc02-fc91bf87a211",
        "798c36af8e420a64",
        "9bdc311411095835",
        "8bfb68a26b2317a6"
      ],
      "id": "9bdc311411095835",
      "date": 1491953076720
    },
    {
      "type": "remove",
      "id": "798c36af8e420a64",
      "date": 1491953082850
    },
    {
      "type": "edit",
      "id": "9bdc311411095835",
      "item": {
        "type": "html",
        "id": "9bdc311411095835",
        "text": "Some languages (Java, for example) let classes enforce access restrictions explicitly, for example denoting internal data with the <code>private</code> keyword and designating methods intended for use by code outside the class with the <code>public</code> keyword.  "
      },
      "date": 1491953085381
    },
    {
      "type": "edit",
      "id": "8bfb68a26b2317a6",
      "item": {
        "type": "paragraph",
        "id": "8bfb68a26b2317a6",
        "text": "Methods may also be designed public, private, or intermediate levels such as <code>protected</code> (which typically allows access from other objects of the same class, but not objects of a different class).  In other languages (like Python) this is enforced only by convention (for example, <code>private</code> methods may have names that start with an [[underscore]]).  Encapsulation prevents external code from being concerned with the internal workings of an object.  "
      },
      "date": 1491953102347
    },
    {
      "type": "add",
      "id": "d8f062d6daf2e6c9",
      "item": {
        "type": "paragraph",
        "id": "d8f062d6daf2e6c9",
        "text": "This facilitates [[code refactoring]], for example allowing the author of the class to change how objects of that class represent their data internally without changing any external code (as long as \"public\" method calls work the same way).  It also encourages programmers to put all the code that is concerned with a certain set of data in the same class, which organizes it for easy comprehension by other programmers.  Encapsulation is a technique that encourages decoupling ([[Coupling (computer programming)]]) - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Encapsulation wikipedia]"
      },
      "after": "8bfb68a26b2317a6",
      "date": 1491953107533
    },
    {
      "type": "edit",
      "id": "8bfb68a26b2317a6",
      "item": {
        "type": "paragraph",
        "id": "8bfb68a26b2317a6",
        "text": "<b>Methods may also be designed public, private, or intermediate levels such as <code>protected</code> (which typically allows access from other objects of the same class, but not objects of a different class).  In other languages (like Python) this is enforced only by convention (for example, <code>private</code> methods may have names that start with an [[underscore]]).  Encapsulation prevents external code from being concerned with the internal workings of an object.  "
      },
      "date": 1491953114004
    },
    {
      "type": "edit",
      "id": "8bfb68a26b2317a6",
      "item": {
        "type": "html",
        "id": "8bfb68a26b2317a6",
        "text": "<b>Methods may also be designed public, private, or intermediate levels such as <code>protected</code> (which typically allows access from other objects of the same class, but not objects of a different class).  In other languages (like Python) this is enforced only by convention (for example, <code>private</code> methods may have names that start with an [[underscore]]).  Encapsulation prevents external code from being concerned with the internal workings of an object.  "
      },
      "date": 1491953115085
    },
    {
      "type": "edit",
      "id": "8bfb68a26b2317a6",
      "item": {
        "type": "html",
        "id": "8bfb68a26b2317a6",
        "text": "Methods may also be designed public, private, or intermediate levels such as <code>protected</code> (which typically allows access from other objects of the same class, but not objects of a different class).  In other languages (like Python) this is enforced only by convention (for example, <code>private</code> methods may have names that start with an [[underscore]]).  Encapsulation prevents external code from being concerned with the internal workings of an object.  "
      },
      "date": 1491953118500
    }
  ]
}