{
  "title": "Objects and classes",
  "story": [
    {
      "type": "paragraph",
      "id": "28cc8c41-8cfd-42de-84b9-7d972d65010a",
      "text": "Languages that support object-oriented programming typically use inheritance ([[Inheritance (object-oriented programming)]]) for code reuse and extensibility in the form of either classes ([[Class-based programming]]) or prototypes ([[Prototype-based programming]]). Those that use classes support two main concepts: - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Objects_and_classes wikipedia]"
    },
    {
      "type": "markdown",
      "id": "627f625f-2c60-4798-8ccd-f6fd44b285dc",
      "text": "* [[Class (computer science)|Class]]es - the definitions for the data format and available procedures for a given type or class of object; may also contain data and procedures (known as class methods) themselves. i.e. Classes contains the data members and member functions.\n* [[Object (computer science)|Objects]] - instances of classes"
    },
    {
      "type": "paragraph",
      "id": "7ad58c3d-8878-4273-850e-2e644ef761c2",
      "text": "Objects sometimes correspond to things found in the real world. For example, a graphics program may have objects such as \"circle\", \"square\", \"menu\". An online shopping system might have objects such as \"shopping cart\", \"customer\", and \"product\".[https://en.wikiquote.org/wiki/Grady_Booch Software Engineering with Ada] Sometimes objects represent more abstract entities, like an object that represents an open file, or an object which provides the service of translating measurements from U.S. customary to metric."
    },
    {
      "type": "paragraph",
      "id": "4b774d10-d7bd-47e7-97bc-ad134e3e4e53",
      "text": "Each object is said to be an instance ([[instance (computer science)]]) of a particular class (for example, an object with its name field set to \"Mary\" might be an instance of class Employee).  Procedures in object-oriented programming are known as methods ([[Method (computer science)]]); variables are also known as fields ([[Field (computer science)]]), members, attributes, or properties.  This leads to the following terms:"
    },
    {
      "type": "markdown",
      "id": "fcfff275-f532-4c42-9083-0d8f9dd11d29",
      "text": "* [[Class variable]]s - belong to the ''class as a whole''; there is only one copy of each one\n* [[Instance variable]]s or attributes - data that belongs to individual ''objects''; every object has its own copy of each one\n* [[Member variable]]s - refers to both the class and instance variables that are defined by a particular class\n* Class methods - belong to the ''class as a whole'' and have access only to class variables and inputs from the procedure call\n* Instance methods - belong to ''individual objects'', and have access to instance variables for the specific object they are called on, inputs, and class variables"
    },
    {
      "type": "paragraph",
      "id": "513db5f7-35d8-4956-9169-19a44b8ae8bd",
      "text": "Objects are accessed somewhat like variables with complex internal structure, and in many languages are effectively pointers ([[Pointer (computer programming)]]), serving as actual references to a single instance of said object in memory within a heap or stack.  They provide a layer of abstraction ([[Abstraction (computer science)]]) which can be used to separate internal from external code. External code can use an object by calling a specific instance method with a certain set of input parameters, read an instance variable, or write to an instance variable. Objects are created by calling a special type of method in the class known as a constructor ([[Constructor (object-oriented programming)]]).  A program may create many instances of the same class as it runs, which operate independently.  This is an easy way for the same procedures to be used on different sets of data."
    },
    {
      "type": "paragraph",
      "id": "f10eef22-4c9b-4fed-a6a1-480f82e99dd1",
      "text": "Object-oriented programming that uses classes is sometimes called [[class-based programming]], while [[prototype-based programming]] does not typically use classes. As a result, a significantly different yet analogous terminology is used to define the concepts of ''object'' and ''instance''."
    },
    {
      "type": "paragraph",
      "id": "d0482ffe-d2ae-4a3d-965f-9b7bb62f8d22",
      "text": "In some languages classes and objects can be composed using other concepts like traits ([[Trait (computer programming)]]) and mixins ([[Mixin]])."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Objects and classes"
      },
      "date": 1466430920571,
      "source": {
        "pageTitle": "Object-oriented programming",
        "pageSlug": "Object-oriented programming",
        "url": "https://en.wikipedia.org/wiki/Object_Oriented_Programming#Objects_and_classes",
        "date": 1466430920571,
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 726062889,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466430928051
    }
  ]
}