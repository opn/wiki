{
  "title": "Composition, inheritance, and delegation",
  "story": [
    {
      "type": "paragraph",
      "id": "1cce4a5c-3ac0-460d-a838-062590de138e",
      "text": "Objects can contain other objects in their instance variables; this is known as [[object composition]].  For example, an object in the Employee class might contain (point to) an object in the Address class, in addition to its own instance variables like \"first_name\" and \"position\".  Object composition is used to represent \"has-a\" relationships: every employee has an address, so every Employee object has a place to store an Address object - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Composition,_inheritance,_and_delegation wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "94c507c3-8bf1-495d-aefc-e1642e768c63",
      "text": "Languages that support classes almost always support inheritance ([[inheritance (object-oriented programming)]]).  This allows classes to be arranged in a hierarchy that represents \"is-a-type-of\" relationships.  For example, class Employee might inherit from class Person.  All the data and methods available to the parent class also appear in the child class with the same names.  For example, class Person might define variables \"first_name\" and \"last_name\" with method \"make_full_name()\".  These will also be available in class Employee, which might add the variables \"position\" and \"salary\".  This technique allows easy re-use of the same procedures and data definitions, in addition to potentially mirroring real-world relationships in an intuitive way.  These classes and subclasses correspond to sets and subsets in [[mathematical logic]]. Rather than utilizing database tables and programming subroutines, the developer utilizes objects the user may be more familiar with: objects from their application domain.[ Object Oriented Software Engineering]"
    },
    {
      "type": "paragraph",
      "id": "bccf26b1-d66e-4b3d-bc75-559042e474fa",
      "text": "Subclasses can override the methods defined by superclasses.  [[Multiple inheritance]] is allowed in some languages, though this can make resolving overrides complicated.  Some languages have special support for [[mixin]]s, though in any language with multiple inheritance, a mixin is simply a class that does not represent an is-a-type-of relationship.  Mixins are typically used to add the same methods to multiple classes.  For example, class UnicodeConversionMixin might provide a method unicode_to_ascii() when included in class FileReader and class WebPageScraper, which don't share a common parent."
    },
    {
      "type": "paragraph",
      "id": "8eb5ed7a-69de-4d46-8ec9-26fd82bb28b3",
      "text": "[[Abstract class]]es cannot be instantiated into objects; they exist only for the purpose of inheritance into other \"concrete\" classes which can be instantiated.  In Java, the <code>final ([[final (Java)]])</code> keyword can be used to prevent a class from being subclassed."
    },
    {
      "type": "paragraph",
      "id": "5f2ef50c-6ca3-4058-a5a9-9f5f870c2c6c",
      "text": "The doctrine of [[composition over inheritance]] advocates implementing has-a relationships using composition instead of inheritance.  For example, instead of inheriting from class Person, class Employee could give each Employee object an internal Person object, which it then has the opportunity to hide from external code even if class Person has many public attributes or methods.  Some languages, like Go ([[Go (programming language)]]) do not support inheritance at all."
    },
    {
      "type": "paragraph",
      "id": "926824fa-ab89-4f98-aa0e-a3b7dff73fb6",
      "text": "The \"[[open/closed principle]]\" advocates that classes and functions \"should be open for extension, but closed for modification\"."
    },
    {
      "type": "paragraph",
      "id": "c3a69f71-bd3b-4f94-b8b6-efdbc405e9fd",
      "text": "Delegation ([[Delegation (programming)]]) is another language feature that can be used as an alternative to inheritance."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Composition, inheritance, and delegation"
      },
      "date": 1466430994879,
      "source": {
        "pageTitle": "Object-oriented programming",
        "pageSlug": "Object-oriented programming",
        "url": "https://en.wikipedia.org/wiki/Object_Oriented_Programming#Composition,_inheritance,_and_delegation",
        "date": 1466430994878,
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 726062889,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466430998922
    }
  ]
}