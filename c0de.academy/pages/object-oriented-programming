{
  "title": "Object-oriented programming",
  "story": [
    {
      "type": "paragraph",
      "id": "0a39d7bc-09c1-456d-8a3d-57b8a4a15dbe",
      "text": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods - [https://en.wikipedia.org/wiki/Object_Oriented_Programming wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "78c20d2b8ea45956",
      "text": "A feature of objects is that an object's procedures can access and often modify the data fields of the object with which they are associated (objects have a notion of \"this\" or \"self\"). "
    },
    {
      "type": "paragraph",
      "id": "48f1dd57974a05f5",
      "text": "In OOP, computer programs are designed by making them out of objects that interact with one another. There is significant diversity of OOP languages, but the most popular ones are class-based, meaning that objects are instances of classes, which typically also determine their type."
    },
    {
      "type": "paragraph",
      "id": "e2ce043b-92ca-4b6e-bdfb-42b8455fc210",
      "text": "Many of the most widely used programming languages are multi-paradigm programming languages that support object-oriented programming to a greater or lesser degree, typically in combination with imperative, procedural programming. Significant object-oriented languages include Java, C++, C#, Python, PHP, Ruby, Perl, Delphi, Objective-C, Swift, Common Lisp, and Smalltalk."
    },
    {
      "type": "paragraph",
      "id": "1c61358c-47dd-42e4-8ac0-572975e4af89",
      "text": "Object-oriented programming uses objects, but not all of the associated techniques and structures are supported directly in languages which claim to support OOP.  The features listed below are, however, common among languages considered strongly class- and object-oriented (or [[multi-paradigm]] with OOP support), with notable exceptions mentioned. - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Features wikipedia]"
    },
    {
      "type": "markdown",
      "id": "93f8bc2c-cd3a-40a7-ab71-e55a5a943015",
      "text": "# Features\n* [[Objects and classes]]\n* [[Message passing]]\n* [[Encapsulation]]\n* [[Composition, inheritance, and delegation]]\n* [[Polymorphism]]\n* [[Open recursion]]"
    },
    {
      "type": "markdown",
      "id": "81d53c05-b0a7-4ac5-b0c6-d63ed55365ef",
      "text": "# Not-quite object oreinted"
    },
    {
      "type": "paragraph",
      "id": "74cae4271d99ba74",
      "text": "Languages with [[abstract data type]] support which may be used to resemble OO programming, but without all features of object-orientation. This includes [[Object-based programming]]) and [[Prototype-based programming]] languages. Examples: [[JavaScript]], [[Lua (programming language)]], [[Modula-2]], and the [[CLU (programming language)]]."
    },
    {
      "type": "paragraph",
      "id": "762c6c04-ed5b-42e5-aee4-cd8d876ae662",
      "text": "In recent years, object-oriented programming has become especially popular in [[dynamic programming language]]s. Python ([[Python (programming language)]]), PowerShell ([[Windows_PowerShell]]), Ruby ([[Ruby (programming language)]]) and Groovy ([[Groovy (programming language)]]) are dynamic languages built on OOP principles, while [[Perl]] and [[PHP]] have been adding object-oriented features since Perl 5 and PHP 4, and [[ColdFusion]] since version 6 - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#OOP_in_dynamic_languages wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "f6a1ccd3-730b-4fe4-921a-705cc1a3c568",
      "text": "The [[Document Object Model]] of [[HTML]], [[XHTML]], and [[XML]] documents on the Internet has bindings to the popular [[JavaScript]]/[[ECMAScript]] language. JavaScript is perhaps the best known [[prototype-based programming]] language, which employs cloning from prototypes rather than inheriting from a class (contrast to [[class-based programming]]). Before [[ECMAScript]] 6, only a prototype-based object model was supported. Another scripting language that takes this approach is Lua ([[Lua (programming language)]])."
    },
    {
      "type": "markdown",
      "id": "fb6daad9776ba6cd",
      "text": "# History"
    },
    {
      "type": "paragraph",
      "id": "3b2d274e-6b40-4294-8374-0c53a0962ba9",
      "text": "Terminology invoking \"objects\" and \"oriented\" in the modern sense of object-oriented programming made its first appearance at [[MIT]] in the late 1950s and early 1960s. In the environment of the [[artificial intelligence]] group, as early as 1960, \"object\" could refer to identified items ([[LISP]] atoms) with properties (attributes);<ref>{{Cite journal - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#History wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "d0c34966-dead-4672-a673-8dfc8511b9e9",
      "text": "[[Alan Kay]] was later to cite a detailed understanding of LISP internals as a strong influence on his thinking in 1966.[http://www.purl.org/stefan_ram/pub/doc_kay_oop_en Dr. Alan Kay on the Meaning of \"Object-Oriented Programming\"]"
    },
    {
      "type": "paragraph",
      "id": "70a75943-caab-46f9-9a50-ac1f985bda97",
      "text": "Another early MIT example was [[Sketchpad]] created by [[Ivan Sutherland]] in 1960â€“61; in the glossary of the 1963 technical report based on his dissertation about Sketchpad, Sutherland defined notions of \"object\" and \"instance\" (with the class concept covered by \"master\" or \"definition\"), albeit specialized to graphical interaction."
    },
    {
      "type": "paragraph",
      "id": "54d1a5a8-0f37-4aaa-ab44-155937ffa92e",
      "text": "Also, an MIT [[ALGOL]] version, AED-0, established a direct link between data structures (\"plexes\", in that dialect) and procedures, prefiguring what were later termed \"messages\", \"methods\", and \"member functions\"."
    },
    {
      "type": "paragraph",
      "id": "aaac738e-c3bc-46e4-adcd-344aa81ce54d",
      "text": "The formal programming concept of objects was introduced in the mid-1960s with [[Simula]] 67, a major revision of Simula I, a programming language designed for [[discrete event simulation]], created by [[Ole-Johan Dahl]] and [[Kristen Nygaard]] of the [[Norwegian Computing Center]] in [[Oslo]]."
    },
    {
      "type": "paragraph",
      "id": "9ba49b1f-713e-4c59-aa59-a10282b4aa81",
      "text": "Simula introduced the notion of classes and instances or objects (as well as subclasses, virtual procedures, coroutines, and discrete event simulation) as part of an explicit programming paradigm. The language also used automatic garbage collection ([[garbage collection (computer science)]]) that had been invented earlier for the [[functional programming]] language Lisp ([[Lisp (programming language)]]). <!-- The invention of automatic garbage collection is often erroneously attributed to OOP --> Simula was used for physical modeling, such as models to study and improve the movement of ships and their content through cargo ports. The ideas of Simula 67 influenced many later languages, including Smalltalk, derivatives of LISP ([[CLOS]]), [[Object Pascal]], and [[C++]]."
    },
    {
      "type": "paragraph",
      "id": "eaca3af7-d83d-43cd-b276-8a44fcbd24a0",
      "text": "The [[Smalltalk]] language, which was developed at [[Xerox PARC]] (by [[Alan Kay]] and others) in the 1970s, introduced the term ''object-oriented programming'' to represent the pervasive use of objects and messages as the basis for computation. Smalltalk creators were influenced by the ideas introduced in Simula 67, but Smalltalk was designed to be a fully dynamic system in which classes could be created and modified dynamically rather than statically as in Simula 67.[http://gagne.homedns.org/~tgagne/contrib/EarlyHistoryST.html The Early History of Smalltalk] Smalltalk and with it OOP were introduced to a wider audience by the August 1981 issue of ''Byte Magazine ([[Byte (magazine)]])''."
    },
    {
      "type": "paragraph",
      "id": "486f82bb-2f12-4360-8239-dd6ff46faf53",
      "text": "In the 1970s, Kay's Smalltalk work had influenced the Lisp community ([[Lisp (programming language)#Language innovations]]) to incorporate object-based techniques ([[Lisp (programming language)#Object systems]]) that were introduced to developers via the [[Lisp machine]]. Experimentation with various extensions to Lisp (such as LOOPS and Flavors ([[Flavors (programming language)]]) introducing [[multiple inheritance]] and [[mixins]]) eventually led to the [[Common Lisp Object System]], which integrates functional programming and object-oriented programming and allows extension via a [[Meta-object protocol]]. In the 1980s, there were a few attempts to design processor architectures that included hardware support for objects in memory but these were not successful. Examples include the [[Intel iAPX 432]] and the Linn Smart ([[Linn Products]]) [[Rekursiv]]."
    },
    {
      "type": "paragraph",
      "id": "4d36df67-3b94-452c-82fb-f44c7bb222c1",
      "text": "In 1985, [[Bertrand Meyer]] produced the first design of the Eiffel language ([[Eiffel (programming language)]]). Focused on software quality, Eiffel is among the purely object-oriented languages, but differs in the sense that the language itself is not only a programming language, but a notation supporting the entire software lifecycle. Meyer described the Eiffel software development method, based on a small number of key ideas from software engineering and computer science, in [[Object-Oriented Software Construction]]. Essential to the quality focus of Eiffel is Meyer's reliability mechanism, [[Design by Contract]], which is an integral part of both the method and language."
    },
    {
      "type": "paragraph",
      "id": "cacc7893-f5b9-4523-8265-ab6e11133709",
      "text": "Object-oriented programming developed as the dominant programming methodology in the early and mid 1990s when programming languages supporting the techniques became widely available. These included Visual [[FoxPro]] 3.0, [[C++]], and Delphi ([[Embarcadero Delphi]]). Its dominance was further enhanced by the rising popularity of [[graphical user interface]]s, which rely heavily upon object-oriented programming techniques. An example of a closely related dynamic GUI library and OOP language can be found in the Cocoa ([[Cocoa (software)]]) frameworks on [[Mac OS X]], written in [[Objective-C]], an object-oriented, dynamic messaging extension to C based on Smalltalk. OOP toolkits also enhanced the popularity of [[event-driven programming]] (although this concept is not limited to OOP)."
    },
    {
      "type": "paragraph",
      "id": "a0b5fd29-c0d2-4d6a-896c-5ab0fb712823",
      "text": "More recently, a number of languages have emerged that are primarily object-oriented, but that are also compatible with procedural methodology. Two such languages are Python ([[Python (programming language)]]) and Ruby ([[Ruby programming language]]). Probably the most commercially important recent object-oriented languages are Java ([[Java (programming language)]]), developed by [[Sun Microsystems]], as well as C# ([[C Sharp (programming language)]]) and [[Visual Basic.NET]] (VB.NET), both designed for Microsoft's .NET ([[.NET Framework]]) platform. Each of these two frameworks shows, in its own way, the benefit of using OOP by creating an abstraction from implementation. VB.NET and C# support cross-language inheritance, allowing classes defined in one language to subclass classes defined in the other language."
    },
    {
      "type": "markdown",
      "id": "3e252290f5796f1c",
      "text": "# Critisisms"
    },
    {
      "type": "paragraph",
      "id": "ef780bfa-53d1-4e08-b8e5-3622c11a6efb",
      "text": "The OOP paradigm has been criticised for a number of reasons, including not meeting its stated goals of reusability and modularity, and for overemphasising one aspect of software design and modelling (data/objects) at the expense of other important aspects (computation/algorithms) - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Criticism wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "d905c4a3-f9a6-457a-a6e4-a2db69d6665a",
      "text": "[[Rich Hickey]], creator of [[Clojure]], described object systems as overly simplistic models of the real world. He emphasized the inability of OOP to model time properly, which is getting increasingly problematic as software systems become more concurrent."
    },
    {
      "type": "paragraph",
      "id": "24be61bb-91d0-453c-9ec4-e8d1ea965f32",
      "text": "[[Eric S. Raymond]], has been critical of claims that present object-oriented programming as the \"One True Solution\", and has written that object-oriented programming languages tend to encourage thickly layered programs that destroy transparency. Raymond compares this unfavourably to the approach taken with [[Unix]] and the [[C (programming language)]]. - [http://www.catb.org/esr/writings/taoup/html/unix_and_oo.html catb.org] "
    },
    {
      "type": "markdown",
      "id": "14e64ce3-1015-485a-ae3b-530b3a20f617",
      "text": "# See also\n* [[History]]\n* [[OOP languages]]\n* [[Design patterns]]\n* [[Criticism]]\n* [[Formal semantics]]\n* [[See also]]\n* [[References]]\n* [[Further reading]]\n* [[External links]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Object-oriented programming"
      },
      "date": 1466430824627,
      "source": {
        "pageTitle": "Object-oriented programming",
        "pageSlug": "Object-oriented programming",
        "url": "https://en.wikipedia.org/wiki/Object_Oriented_Programming",
        "date": 1466430824627,
        "link_dictionary": {
          "wiki_links": {
            "OOP languages": {
              "section_number": 10,
              "section_level": 2,
              "dot_number": 3
            },
            "References": {
              "section_number": 26,
              "section_level": 2,
              "dot_number": 8
            },
            "External links": {
              "section_number": 28,
              "section_level": 2,
              "dot_number": 10
            },
            "Design patterns": {
              "section_number": 13,
              "section_level": 2,
              "dot_number": 4
            },
            "Features": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "History": {
              "section_number": 9,
              "section_level": 2,
              "dot_number": 2
            },
            "See also": {
              "section_number": 23,
              "section_level": 2,
              "dot_number": 7
            },
            "Further reading": {
              "section_number": 27,
              "section_level": 2,
              "dot_number": 9
            },
            "Formal semantics": {
              "section_number": 22,
              "section_level": 2,
              "dot_number": 6
            },
            "Criticism": {
              "section_number": 21,
              "section_level": 2,
              "dot_number": 5
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 726062889,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466430830123,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "fork",
      "date": 1466430848241
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1c61358c-47dd-42e4-8ac0-572975e4af89",
        "text": "Object-oriented programming uses objects, but not all of the associated techniques and structures are supported directly in languages which claim to support OOP.  The features listed below are, however, common among languages considered strongly class- and object-oriented (or [[multi-paradigm]] with OOP support), with notable exceptions mentioned. - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Features wikipedia]"
      },
      "after": "e2ce043b-92ca-4b6e-bdfb-42b8455fc210",
      "id": "1c61358c-47dd-42e4-8ac0-572975e4af89",
      "date": 1466430870855
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "93f8bc2c-cd3a-40a7-ab71-e55a5a943015",
        "text": "# See also\n* [[Shared with non-OOP predecessor languages]]\n* [[Objects and classes]]\n* [[Dynamic dispatch/message passing]]\n* [[Encapsulation]]\n* [[Composition, inheritance, and delegation]]\n* [[Polymorphism]]\n* [[Open recursion]]"
      },
      "after": "1c61358c-47dd-42e4-8ac0-572975e4af89",
      "id": "93f8bc2c-cd3a-40a7-ab71-e55a5a943015",
      "date": 1466430883696
    },
    {
      "type": "edit",
      "id": "93f8bc2c-cd3a-40a7-ab71-e55a5a943015",
      "item": {
        "type": "markdown",
        "id": "93f8bc2c-cd3a-40a7-ab71-e55a5a943015",
        "text": "# See also\n* [[Shared with non-OOP predecessor languages]]\n* [[Objects and classes]]\n* [[Message passing]]\n* [[Encapsulation]]\n* [[Composition, inheritance, and delegation]]\n* [[Polymorphism]]\n* [[Open recursion]]"
      },
      "date": 1466430958455
    },
    {
      "type": "edit",
      "id": "93f8bc2c-cd3a-40a7-ab71-e55a5a943015",
      "item": {
        "type": "markdown",
        "id": "93f8bc2c-cd3a-40a7-ab71-e55a5a943015",
        "text": "# Features\n* [[Objects and classes]]\n* [[Message passing]]\n* [[Encapsulation]]\n* [[Composition, inheritance, and delegation]]\n* [[Polymorphism]]\n* [[Open recursion]]"
      },
      "date": 1466431058338
    },
    {
      "type": "edit",
      "id": "14e64ce3-1015-485a-ae3b-530b3a20f617",
      "item": {
        "type": "markdown",
        "id": "14e64ce3-1015-485a-ae3b-530b3a20f617",
        "text": "# See also\n* [[History]]\n* [[OOP languages]]\n* [[Design patterns]]\n* [[Criticism]]\n* [[Formal semantics]]\n* [[See also]]\n* [[References]]\n* [[Further reading]]\n* [[External links]]"
      },
      "date": 1466431062266
    },
    {
      "type": "edit",
      "id": "0a39d7bc-09c1-456d-8a3d-57b8a4a15dbe",
      "item": {
        "type": "paragraph",
        "id": "0a39d7bc-09c1-456d-8a3d-57b8a4a15dbe",
        "text": "Object-oriented programming (OOP) is a programming paradigm based on the concept of \"objects\", which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods - [https://en.wikipedia.org/wiki/Object_Oriented_Programming wikipedia]"
      },
      "date": 1466431173185
    },
    {
      "type": "add",
      "id": "78c20d2b8ea45956",
      "item": {
        "type": "paragraph",
        "id": "78c20d2b8ea45956",
        "text": "A feature of objects is that an object's procedures can access and often modify the data fields of the object with which they are associated (objects have a notion of \"this\" or \"self\"). "
      },
      "after": "0a39d7bc-09c1-456d-8a3d-57b8a4a15dbe",
      "date": 1466431178736
    },
    {
      "type": "add",
      "id": "48f1dd57974a05f5",
      "item": {
        "type": "paragraph",
        "id": "48f1dd57974a05f5",
        "text": "In OOP, computer programs are designed by making them out of objects that interact with one another. There is significant diversity of OOP languages, but the most popular ones are class-based, meaning that objects are instances of classes, which typically also determine their type."
      },
      "after": "78c20d2b8ea45956",
      "date": 1466431180578
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3b2d274e-6b40-4294-8374-0c53a0962ba9",
        "text": "Terminology invoking \"objects\" and \"oriented\" in the modern sense of object-oriented programming made its first appearance at [[MIT]] in the late 1950s and early 1960s. In the environment of the [[artificial intelligence]] group, as early as 1960, \"object\" could refer to identified items ([[LISP]] atoms) with properties (attributes);<ref>{{Cite journal - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#History wikipedia]"
      },
      "after": "93f8bc2c-cd3a-40a7-ab71-e55a5a943015",
      "id": "3b2d274e-6b40-4294-8374-0c53a0962ba9",
      "date": 1466431379553
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d0c34966-dead-4672-a673-8dfc8511b9e9",
        "text": "[[Alan Kay]] was later to cite a detailed understanding of LISP internals as a strong influence on his thinking in 1966.[http://www.purl.org/stefan_ram/pub/doc_kay_oop_en Dr. Alan Kay on the Meaning of \"Object-Oriented Programming\"]"
      },
      "after": "3b2d274e-6b40-4294-8374-0c53a0962ba9",
      "id": "d0c34966-dead-4672-a673-8dfc8511b9e9",
      "date": 1466431394949
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "70a75943-caab-46f9-9a50-ac1f985bda97",
        "text": "Another early MIT example was [[Sketchpad]] created by [[Ivan Sutherland]] in 1960â€“61; in the glossary of the 1963 technical report based on his dissertation about Sketchpad, Sutherland defined notions of \"object\" and \"instance\" (with the class concept covered by \"master\" or \"definition\"), albeit specialized to graphical interaction."
      },
      "after": "d0c34966-dead-4672-a673-8dfc8511b9e9",
      "id": "70a75943-caab-46f9-9a50-ac1f985bda97",
      "date": 1466431410447
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "54d1a5a8-0f37-4aaa-ab44-155937ffa92e",
        "text": "Also, an MIT [[ALGOL]] version, AED-0, established a direct link between data structures (\"plexes\", in that dialect) and procedures, prefiguring what were later termed \"messages\", \"methods\", and \"member functions\"."
      },
      "after": "70a75943-caab-46f9-9a50-ac1f985bda97",
      "id": "54d1a5a8-0f37-4aaa-ab44-155937ffa92e",
      "date": 1466431414803
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "aaac738e-c3bc-46e4-adcd-344aa81ce54d",
        "text": "The formal programming concept of objects was introduced in the mid-1960s with [[Simula]] 67, a major revision of Simula I, a programming language designed for [[discrete event simulation]], created by [[Ole-Johan Dahl]] and [[Kristen Nygaard]] of the [[Norwegian Computing Center]] in [[Oslo]]."
      },
      "after": "54d1a5a8-0f37-4aaa-ab44-155937ffa92e",
      "id": "aaac738e-c3bc-46e4-adcd-344aa81ce54d",
      "date": 1466431424830
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9ba49b1f-713e-4c59-aa59-a10282b4aa81",
        "text": "Simula introduced the notion of classes and instances or objects (as well as subclasses, virtual procedures, coroutines, and discrete event simulation) as part of an explicit programming paradigm. The language also used automatic garbage collection ([[garbage collection (computer science)]]) that had been invented earlier for the [[functional programming]] language Lisp ([[Lisp (programming language)]]). <!-- The invention of automatic garbage collection is often erroneously attributed to OOP --> Simula was used for physical modeling, such as models to study and improve the movement of ships and their content through cargo ports. The ideas of Simula 67 influenced many later languages, including Smalltalk, derivatives of LISP ([[CLOS]]), [[Object Pascal]], and [[C++]]."
      },
      "after": "aaac738e-c3bc-46e4-adcd-344aa81ce54d",
      "id": "9ba49b1f-713e-4c59-aa59-a10282b4aa81",
      "date": 1466431444904
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "eaca3af7-d83d-43cd-b276-8a44fcbd24a0",
        "text": "The [[Smalltalk]] language, which was developed at [[Xerox PARC]] (by [[Alan Kay]] and others) in the 1970s, introduced the term ''object-oriented programming'' to represent the pervasive use of objects and messages as the basis for computation. Smalltalk creators were influenced by the ideas introduced in Simula 67, but Smalltalk was designed to be a fully dynamic system in which classes could be created and modified dynamically rather than statically as in Simula 67.[http://gagne.homedns.org/~tgagne/contrib/EarlyHistoryST.html The Early History of Smalltalk] Smalltalk and with it OOP were introduced to a wider audience by the August 1981 issue of ''Byte Magazine ([[Byte (magazine)]])''."
      },
      "after": "9ba49b1f-713e-4c59-aa59-a10282b4aa81",
      "id": "eaca3af7-d83d-43cd-b276-8a44fcbd24a0",
      "date": 1466431448840
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "486f82bb-2f12-4360-8239-dd6ff46faf53",
        "text": "In the 1970s, Kay's Smalltalk work had influenced the Lisp community ([[Lisp (programming language)#Language innovations]]) to incorporate object-based techniques ([[Lisp (programming language)#Object systems]]) that were introduced to developers via the [[Lisp machine]]. Experimentation with various extensions to Lisp (such as LOOPS and Flavors ([[Flavors (programming language)]]) introducing [[multiple inheritance]] and [[mixins]]) eventually led to the [[Common Lisp Object System]], which integrates functional programming and object-oriented programming and allows extension via a [[Meta-object protocol]]. In the 1980s, there were a few attempts to design processor architectures that included hardware support for objects in memory but these were not successful. Examples include the [[Intel iAPX 432]] and the Linn Smart ([[Linn Products]]) [[Rekursiv]]."
      },
      "after": "eaca3af7-d83d-43cd-b276-8a44fcbd24a0",
      "id": "486f82bb-2f12-4360-8239-dd6ff46faf53",
      "date": 1466431463017
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4d36df67-3b94-452c-82fb-f44c7bb222c1",
        "text": "In 1985, [[Bertrand Meyer]] produced the first design of the Eiffel language ([[Eiffel (programming language)]]). Focused on software quality, Eiffel is among the purely object-oriented languages, but differs in the sense that the language itself is not only a programming language, but a notation supporting the entire software lifecycle. Meyer described the Eiffel software development method, based on a small number of key ideas from software engineering and computer science, in [[Object-Oriented Software Construction]]. Essential to the quality focus of Eiffel is Meyer's reliability mechanism, [[Design by Contract]], which is an integral part of both the method and language."
      },
      "after": "486f82bb-2f12-4360-8239-dd6ff46faf53",
      "id": "4d36df67-3b94-452c-82fb-f44c7bb222c1",
      "date": 1466431471071
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "cacc7893-f5b9-4523-8265-ab6e11133709",
        "text": "Object-oriented programming developed as the dominant programming methodology in the early and mid 1990s when programming languages supporting the techniques became widely available. These included Visual [[FoxPro]] 3.0, [[C++]], and Delphi ([[Embarcadero Delphi]]). Its dominance was further enhanced by the rising popularity of [[graphical user interface]]s, which rely heavily upon object-oriented programming techniques. An example of a closely related dynamic GUI library and OOP language can be found in the Cocoa ([[Cocoa (software)]]) frameworks on [[Mac OS X]], written in [[Objective-C]], an object-oriented, dynamic messaging extension to C based on Smalltalk. OOP toolkits also enhanced the popularity of [[event-driven programming]] (although this concept is not limited to OOP)."
      },
      "after": "4d36df67-3b94-452c-82fb-f44c7bb222c1",
      "id": "cacc7893-f5b9-4523-8265-ab6e11133709",
      "date": 1466431508287
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a0b5fd29-c0d2-4d6a-896c-5ab0fb712823",
        "text": "More recently, a number of languages have emerged that are primarily object-oriented, but that are also compatible with procedural methodology. Two such languages are Python ([[Python (programming language)]]) and Ruby ([[Ruby programming language]]). Probably the most commercially important recent object-oriented languages are Java ([[Java (programming language)]]), developed by [[Sun Microsystems]], as well as C# ([[C Sharp (programming language)]]) and [[Visual Basic.NET]] (VB.NET), both designed for Microsoft's .NET ([[.NET Framework]]) platform. Each of these two frameworks shows, in its own way, the benefit of using OOP by creating an abstraction from implementation. VB.NET and C# support cross-language inheritance, allowing classes defined in one language to subclass classes defined in the other language."
      },
      "after": "cacc7893-f5b9-4523-8265-ab6e11133709",
      "id": "a0b5fd29-c0d2-4d6a-896c-5ab0fb712823",
      "date": 1466431531799
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "81d53c05-b0a7-4ac5-b0c6-d63ed55365ef",
        "text": "*Languages with [[abstract data type]] support which may be used to resemble OO programming, but without all features of object-orientation. This includes object-''based'' ([[object-based]]) and prototype-based ([[Prototype-based programming]]) languages. Examples: [[JavaScript]], Lua ([[Lua (programming language)]]), [[Modula-2]], CLU ([[CLU (programming language)]])."
      },
      "after": "93f8bc2c-cd3a-40a7-ab71-e55a5a943015",
      "id": "81d53c05-b0a7-4ac5-b0c6-d63ed55365ef",
      "date": 1466431676154
    },
    {
      "type": "edit",
      "id": "81d53c05-b0a7-4ac5-b0c6-d63ed55365ef",
      "item": {
        "type": "paragraph",
        "id": "81d53c05-b0a7-4ac5-b0c6-d63ed55365ef",
        "text": "# Not-quite object oreinted"
      },
      "date": 1466431700256
    },
    {
      "type": "edit",
      "id": "81d53c05-b0a7-4ac5-b0c6-d63ed55365ef",
      "item": {
        "type": "markdown",
        "id": "81d53c05-b0a7-4ac5-b0c6-d63ed55365ef",
        "text": "# Not-quite object oreinted"
      },
      "date": 1466431701738
    },
    {
      "type": "add",
      "id": "74cae4271d99ba74",
      "item": {
        "type": "paragraph",
        "id": "74cae4271d99ba74",
        "text": "Languages with [[abstract data type]] support which may be used to resemble OO programming, but without all features of object-orientation. This includes [[Object-based programming]]) and [[Prototype-based programming]] languages. Examples: [[JavaScript]], [[Lua (programming language)]], [[Modula-2]], and the [[CLU (programming language)]]."
      },
      "after": "81d53c05-b0a7-4ac5-b0c6-d63ed55365ef",
      "date": 1466431809510
    },
    {
      "type": "add",
      "id": "fb6daad9776ba6cd",
      "item": {
        "type": "paragraph",
        "id": "fb6daad9776ba6cd",
        "text": "# History"
      },
      "after": "74cae4271d99ba74",
      "date": 1466431812182
    },
    {
      "type": "edit",
      "id": "fb6daad9776ba6cd",
      "item": {
        "type": "markdown",
        "id": "fb6daad9776ba6cd",
        "text": "# History"
      },
      "date": 1466431813319
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "762c6c04-ed5b-42e5-aee4-cd8d876ae662",
        "text": "In recent years, object-oriented programming has become especially popular in [[dynamic programming language]]s. Python ([[Python (programming language)]]), PowerShell ([[Windows_PowerShell]]), Ruby ([[Ruby (programming language)]]) and Groovy ([[Groovy (programming language)]]) are dynamic languages built on OOP principles, while [[Perl]] and [[PHP]] have been adding object-oriented features since Perl 5 and PHP 4, and [[ColdFusion]] since version 6 - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#OOP_in_dynamic_languages wikipedia]"
      },
      "after": "74cae4271d99ba74",
      "id": "762c6c04-ed5b-42e5-aee4-cd8d876ae662",
      "date": 1466431870856
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f6a1ccd3-730b-4fe4-921a-705cc1a3c568",
        "text": "The [[Document Object Model]] of [[HTML]], [[XHTML]], and [[XML]] documents on the Internet has bindings to the popular [[JavaScript]]/[[ECMAScript]] language. JavaScript is perhaps the best known [[prototype-based programming]] language, which employs cloning from prototypes rather than inheriting from a class (contrast to [[class-based programming]]). Before [[ECMAScript]] 6, only a prototype-based object model was supported. Another scripting language that takes this approach is Lua ([[Lua (programming language)]])."
      },
      "after": "762c6c04-ed5b-42e5-aee4-cd8d876ae662",
      "id": "f6a1ccd3-730b-4fe4-921a-705cc1a3c568",
      "date": 1466431873631
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d905c4a3-f9a6-457a-a6e4-a2db69d6665a",
        "text": "[[Rich Hickey]], creator of [[Clojure]], described object systems as overly simplistic models of the real world. He emphasized the inability of OOP to model time properly, which is getting increasingly problematic as software systems become more concurrent."
      },
      "after": "a0b5fd29-c0d2-4d6a-896c-5ab0fb712823",
      "id": "d905c4a3-f9a6-457a-a6e4-a2db69d6665a",
      "date": 1466432046005
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "24be61bb-91d0-453c-9ec4-e8d1ea965f32",
        "text": "[[Eric S. Raymond]], a [[Unix]] programmer and [[open-source software]] advocate, has been critical of claims that present object-oriented programming as the \"One True Solution\", and has written that object-oriented programming languages tend to encourage thickly layered programs that destroy transparency.[http://www.catb.org/esr/writings/taoup/html/unix_and_oo.html The Art of Unix Programming: Unix and Object-Oriented Languages] Raymond compares this unfavourably to the approach taken with Unix and the C programming language ([[C (programming language)]]).<ref name=\"Eric S. Raymond 2003\"/>"
      },
      "after": "d905c4a3-f9a6-457a-a6e4-a2db69d6665a",
      "id": "24be61bb-91d0-453c-9ec4-e8d1ea965f32",
      "date": 1466432085774
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ef780bfa-53d1-4e08-b8e5-3622c11a6efb",
        "text": "The OOP paradigm has been criticised for a number of reasons, including not meeting its stated goals of reusability and modularity,<ref name=\"badprop\"/><ref name=\"armstrongjoe\"/> and for overemphasizing one aspect of software design and modeling (data/objects) at the expense of other important aspects (computation/algorithms).<ref name=\"stepanov\"/><ref name=\"hickey\"/> - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Criticism wikipedia]"
      },
      "after": "a0b5fd29-c0d2-4d6a-896c-5ab0fb712823",
      "id": "ef780bfa-53d1-4e08-b8e5-3622c11a6efb",
      "date": 1466432103632
    },
    {
      "type": "add",
      "id": "3e252290f5796f1c",
      "item": {
        "type": "paragraph",
        "id": "3e252290f5796f1c",
        "text": "# Critisisms"
      },
      "after": "a0b5fd29-c0d2-4d6a-896c-5ab0fb712823",
      "date": 1466432126964
    },
    {
      "type": "edit",
      "id": "3e252290f5796f1c",
      "item": {
        "type": "markdown",
        "id": "3e252290f5796f1c",
        "text": "# Critisisms"
      },
      "date": 1466432128202
    },
    {
      "type": "edit",
      "id": "ef780bfa-53d1-4e08-b8e5-3622c11a6efb",
      "item": {
        "type": "paragraph",
        "id": "ef780bfa-53d1-4e08-b8e5-3622c11a6efb",
        "text": "The OOP paradigm has been criticised for a number of reasons, including not meeting its stated goals of reusability and modularity, and for overemphasising one aspect of software design and modelling (data/objects) at the expense of other important aspects (computation/algorithms) - [https://en.wikipedia.org/wiki/Object_Oriented_Programming#Criticism wikipedia]"
      },
      "date": 1466432168160
    },
    {
      "type": "edit",
      "id": "24be61bb-91d0-453c-9ec4-e8d1ea965f32",
      "item": {
        "type": "paragraph",
        "id": "24be61bb-91d0-453c-9ec4-e8d1ea965f32",
        "text": "[[Eric S. Raymond]], a [[Unix]] programmer and [[open-source software]] advocate, has been critical of claims that present object-oriented programming as the \"One True Solution\", and has written that object-oriented programming languages tend to encourage thickly layered programs that destroy transparency - [http://www.catb.org/esr/writings/taoup/html/unix_and_oo.html catb.org] "
      },
      "date": 1466432204823
    },
    {
      "type": "add",
      "id": "59bc883789a52093",
      "item": {
        "type": "paragraph",
        "id": "59bc883789a52093",
        "text": "Raymond compares this unfavourably to the approach taken with Unix and the C programming language ([[C (programming language)]]).<ref name=\"Eric S. Raymond 2003\"/>"
      },
      "after": "24be61bb-91d0-453c-9ec4-e8d1ea965f32",
      "date": 1466432205318
    },
    {
      "type": "remove",
      "id": "59bc883789a52093",
      "date": 1466432227039
    },
    {
      "type": "edit",
      "id": "24be61bb-91d0-453c-9ec4-e8d1ea965f32",
      "item": {
        "type": "paragraph",
        "id": "24be61bb-91d0-453c-9ec4-e8d1ea965f32",
        "text": "[[Eric S. Raymond]], has been critical of claims that present object-oriented programming as the \"One True Solution\", and has written that object-oriented programming languages tend to encourage thickly layered programs that destroy transparency. Raymond compares this unfavourably to the approach taken with [[Unix]] and the [[C (programming language)]]. - [http://www.catb.org/esr/writings/taoup/html/unix_and_oo.html catb.org] "
      },
      "date": 1466432270794
    }
  ]
}