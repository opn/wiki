{
  "title": "Benefits of JWT's",
  "story": [
    {
      "type": "paragraph",
      "id": "37814feaa4c58be2",
      "text": "There are a number of benefits to using [[Jason Web Tokens]]:"
    },
    {
      "type": "markdown",
      "id": "5649aab56ce24252",
      "text": "- **Cross-domain** / CORS: cookies + CORS don't play well across different domains. A token-based approach allows you to make AJAX calls to any server, on any domain because you use an HTTP header to transmit the user information.\n\n- **Stateless** (a.k.a. Server side scalability): there is no need to keep a session store, the token is a self-contanined entity that conveys all the user information. The rest of the state lives in cookies or local storage on the client side.\n\n- **CDN**: you can serve all the assets of your app from a CDN (e.g. javascript, HTML, images, etc.), and your server side is just the API.\n\n- **Decoupling**: you are not tied to a particular authentication scheme. The token might be generated anywhere, hence your API can be called from anywhere with a single way of authenticating those calls.\nMobile ready: when you start working on a native platform (iOS, Android, Windows 8, etc.) cookies are not ideal when consuming a secure API (you have to deal with cookie containers). Adopting a token-based approach simplifies this a lot.\n\n- **CSRF**: since you are not relying on cookies, you don't need to protect against cross site requests (e.g. it would not be possible to <iframe> your site, generate a POST request and re-use the existing authentication cookie because there will be none).\n\n- **Performance**: we are not presenting any hard perf benchmarks here, but a network roundtrip (e.g. finding a session on database) is likely to take more time than calculating an HMACSHA256 to validate a token and parsing its contents.\n\n- **Login page is not an special case**: If you are using Protractor to write your functional tests, you don't need to handle any special case for login.\n\n- **Standard-based**: your API could accepts a standard JSON Web Token (JWT). This is a standard and there are multiple backend libraries (.NET, Ruby, Java, Python, PHP) and companies backing their infrastructure (e.g. Firebase, Google, Microsoft). As an example, Firebase allows their customers to use any authentication mechanism, as long as you generate a JWT with certain pre-defined properties, and signed with the shared secret to call their API."
    }
  ],
  "journal": [
    {
      "type": "edit",
      "id": "37814feaa4c58be2",
      "item": {
        "type": "paragraph",
        "id": "37814feaa4c58be2",
        "text": "There are a number of benefits to using [[Jason Web Tokens]]:"
      },
      "date": 1502463653357
    },
    {
      "type": "move",
      "order": [
        "37814feaa4c58be2",
        "5649aab56ce24252"
      ],
      "id": "37814feaa4c58be2",
      "date": 1502463632092
    },
    {
      "item": {
        "type": "factory",
        "id": "37814feaa4c58be2"
      },
      "id": "37814feaa4c58be2",
      "type": "add",
      "after": "5649aab56ce24252",
      "date": 1502463630369
    },
    {
      "type": "edit",
      "id": "5649aab56ce24252",
      "item": {
        "type": "markdown",
        "id": "5649aab56ce24252",
        "text": "- **Cross-domain** / CORS: cookies + CORS don't play well across different domains. A token-based approach allows you to make AJAX calls to any server, on any domain because you use an HTTP header to transmit the user information.\n\n- **Stateless** (a.k.a. Server side scalability): there is no need to keep a session store, the token is a self-contanined entity that conveys all the user information. The rest of the state lives in cookies or local storage on the client side.\n\n- **CDN**: you can serve all the assets of your app from a CDN (e.g. javascript, HTML, images, etc.), and your server side is just the API.\n\n- **Decoupling**: you are not tied to a particular authentication scheme. The token might be generated anywhere, hence your API can be called from anywhere with a single way of authenticating those calls.\nMobile ready: when you start working on a native platform (iOS, Android, Windows 8, etc.) cookies are not ideal when consuming a secure API (you have to deal with cookie containers). Adopting a token-based approach simplifies this a lot.\n\n- **CSRF**: since you are not relying on cookies, you don't need to protect against cross site requests (e.g. it would not be possible to <iframe> your site, generate a POST request and re-use the existing authentication cookie because there will be none).\n\n- **Performance**: we are not presenting any hard perf benchmarks here, but a network roundtrip (e.g. finding a session on database) is likely to take more time than calculating an HMACSHA256 to validate a token and parsing its contents.\n\n- **Login page is not an special case**: If you are using Protractor to write your functional tests, you don't need to handle any special case for login.\n\n- **Standard-based**: your API could accepts a standard JSON Web Token (JWT). This is a standard and there are multiple backend libraries (.NET, Ruby, Java, Python, PHP) and companies backing their infrastructure (e.g. Firebase, Google, Microsoft). As an example, Firebase allows their customers to use any authentication mechanism, as long as you generate a JWT with certain pre-defined properties, and signed with the shared secret to call their API."
      },
      "date": 1502463628111
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "5649aab56ce24252",
        "text": "# [[Benefits of JWT's]]\n\n- **Cross-domain** / CORS: cookies + CORS don't play well across different domains. A token-based approach allows you to make AJAX calls to any server, on any domain because you use an HTTP header to transmit the user information.\n\n- **Stateless** (a.k.a. Server side scalability): there is no need to keep a session store, the token is a self-contanined entity that conveys all the user information. The rest of the state lives in cookies or local storage on the client side.\n\n- **CDN**: you can serve all the assets of your app from a CDN (e.g. javascript, HTML, images, etc.), and your server side is just the API.\n\n- **Decoupling**: you are not tied to a particular authentication scheme. The token might be generated anywhere, hence your API can be called from anywhere with a single way of authenticating those calls.\nMobile ready: when you start working on a native platform (iOS, Android, Windows 8, etc.) cookies are not ideal when consuming a secure API (you have to deal with cookie containers). Adopting a token-based approach simplifies this a lot.\n\n- **CSRF**: since you are not relying on cookies, you don't need to protect against cross site requests (e.g. it would not be possible to <iframe> your site, generate a POST request and re-use the existing authentication cookie because there will be none).\n\n- **Performance**: we are not presenting any hard perf benchmarks here, but a network roundtrip (e.g. finding a session on database) is likely to take more time than calculating an HMACSHA256 to validate a token and parsing its contents.\n\n- **Login page is not an special case**: If you are using Protractor to write your functional tests, you don't need to handle any special case for login.\n\n- **Standard-based**: your API could accepts a standard JSON Web Token (JWT). This is a standard and there are multiple backend libraries (.NET, Ruby, Java, Python, PHP) and companies backing their infrastructure (e.g. Firebase, Google, Microsoft). As an example, Firebase allows their customers to use any authentication mechanism, as long as you generate a JWT with certain pre-defined properties, and signed with the shared secret to call their API."
      },
      "id": "5649aab56ce24252",
      "date": 1502463617479
    },
    {
      "type": "create",
      "item": {
        "title": "Benefits of JWT's",
        "story": []
      },
      "date": 1502463614438
    },
    {
      "type": "fork",
      "site": "hosting.permanent.wiki",
      "date": 1510693200734
    }
  ]
}