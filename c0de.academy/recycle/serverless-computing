{
  "title": "Serverless computing",
  "story": [
    {
      "type": "markdown",
      "id": "ebb982b5-a96b-47ab-92f8-dfd7a306483b",
      "text": "# Advantages"
    },
    {
      "type": "markdown",
      "id": "8da6f816-30f6-4da4-a6e6-5891892e2fef",
      "text": "# Cost"
    },
    {
      "type": "paragraph",
      "id": "21d8e7afcbcc8f38",
      "text": "Serverless computing is more cost-effective than renting or purchasing a fixed quantity of servers, which generally involves significant periods of underutilization or idle time."
    },
    {
      "type": "paragraph",
      "id": "e2a00210bc8858f0",
      "text": "It can even be more cost-efficient than provisioning an autoscaling group ([[autoscaling]]), due to more efficient bin-packing ([[Bin packing problem]]) of the underlying machine resources."
    },
    {
      "type": "markdown",
      "id": "a942e3fa-554f-4b2c-a9ea-36dcb2db84e6",
      "text": "# Operations"
    },
    {
      "type": "paragraph",
      "id": "1a85c49c-43cb-4813-84b4-edeb1ff86851",
      "text": "In addition, a serverless architecture means that developers and operators do not need to spend time setting up and tuning autoscaling policies or systems; the cloud provider is responsible for ensuring that the capacity always meets the demand."
    },
    {
      "type": "markdown",
      "id": "c4b59a38-6da8-4e09-ae0d-f44aa1aee9c8",
      "text": "# Productivity"
    },
    {
      "type": "paragraph",
      "id": "71c08a04-94b5-40b4-b74d-530bef4c3b07",
      "text": "In serverless computing, the units of code exposed to the outside world are simple functions ([[subroutine]]). This means that typically, the programmer does not have to worry about multithreading ([[multithreading (software)]]) or directly handling [[HTTP]] requests in their code, simplifying the task of back-end software development."
    },
    {
      "type": "markdown",
      "id": "4d227e5a-9adb-4e33-a3de-f34ee96888b2",
      "text": "# See also\n* [[Serverless runtimes]]\n* [[Serverless databases]]\n* [[Disadvantages]]\n* [[Serverless frameworks]]\n* [[References]]\n* [[Further reading]]"
    },
    {
      "type": "markdown",
      "id": "76cdd5280f396de8",
      "text": "# Conclusion"
    },
    {
      "type": "paragraph",
      "id": "8dbd66e1d962b3c3",
      "text": "Serverless, despite the confusing name, is a style of architecture where we rely to a smaller extent than usual on running our own server side systems as part of our applications. We do this through two techniques - Backend as a Service (BaaS), where we tightly integrate third party remote application services directly into the front-end of our apps, and Functions as a Service (FaaS), which moves server side code from long running components to ephemeral function instances.\n\nServerless is very unlikely to be the correct approach for every problem, so be wary of anyone who says it will replace all of our existing architectures. And be even more careful if you take the plunge into Serverless systems now, especially in the FaaS realm. While there are riches (of scaling and saved deployment effort) to be plundered, there also be dragons (of debugging, monitoring) lurking right around the next corner.\n\nThose benefits shouldn't be quickly dismissed however since there are significant positive aspects to Serverless Architecture, including reduced operational and development costs, easier operational management, and reduced environmental impact. The most important benefit to me though is the reduced feedback loop of creating new application components - I’m a huge fan of ‘lean’ approaches, largely because I think there is a lot of value in getting technology in front of an end user as soon as possible to get early feedback, and the reduced time-to-market that comes with Serverless fits right in with this philosophy.\n\nServerless systems are still in their infancy. There will be many advances in the field over the coming years and it will be fascinating to see how they fit into our architectural toolkit."
    },
    {
      "type": "paragraph",
      "id": "ac412822-7ee7-421d-b1d0-7c46d855ff82",
      "text": "Serverless computing is a cloud computing execution model in which the cloud provider dynamically manages the allocation of machine resources. Pricing is based on the actual amount of resources consumed by an application, rather than on pre-purchased units of capacity. It is a form of utility computing - [https://en.wikipedia.org/wiki/Serverless_computing wikipedia]"
    },
    {
      "type": "markdown",
      "id": "bf0704e024f7038e",
      "text": "- [https://martinfowler.com/articles/serverless.html martinfowler.com]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Serverless computing",
        "story": []
      },
      "date": 1506534099963
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ac412822-7ee7-421d-b1d0-7c46d855ff82",
        "text": "Serverless computing is a cloud computing execution model in which the cloud provider dynamically manages the allocation of machine resources. Pricing is based on the actual amount of resources consumed by an application, rather than on pre-purchased units of capacity. It is a form of utility computing - [https://en.wikipedia.org/wiki/Serverless_computing wikipedia]"
      },
      "id": "ac412822-7ee7-421d-b1d0-7c46d855ff82",
      "date": 1506534131866,
      "error": {
        "type": "error",
        "msg": "Not Found",
        "response": "Page not found"
      }
    },
    {
      "type": "fork",
      "date": 1506534136296
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "4d227e5a-9adb-4e33-a3de-f34ee96888b2",
        "text": "# See also\n* [[Serverless runtimes]]\n* [[Serverless databases]]\n* [[Advantages]]\n* [[Disadvantages]]\n* [[Serverless frameworks]]\n* [[References]]\n* [[Further reading]]"
      },
      "after": "3aa7608f-5a95-40e5-aead-7041280f9a81",
      "id": "4d227e5a-9adb-4e33-a3de-f34ee96888b2",
      "date": 1506534142395
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ebb982b5-a96b-47ab-92f8-dfd7a306483b",
        "text": "Serverless computing is more cost-effective than renting or purchasing a fixed quantity of servers, which generally involves significant periods of underutilization or idle time.<ref name='techcrunch-lambda'/> It can even be more cost-efficient than provisioning an autoscaling group ([[autoscaling]]), due to more efficient bin-packing ([[Bin packing problem]]) of the underlying machine resources."
      },
      "after": "3aa7608f-5a95-40e5-aead-7041280f9a81",
      "id": "ebb982b5-a96b-47ab-92f8-dfd7a306483b",
      "date": 1506534176855
    },
    {
      "type": "edit",
      "id": "4d227e5a-9adb-4e33-a3de-f34ee96888b2",
      "item": {
        "type": "markdown",
        "id": "4d227e5a-9adb-4e33-a3de-f34ee96888b2",
        "text": "# See also\n* [[Serverless runtimes]]\n* [[Serverless databases]]\n* [[Disadvantages]]\n* [[Serverless frameworks]]\n* [[References]]\n* [[Further reading]]"
      },
      "date": 1506534182119
    },
    {
      "type": "edit",
      "id": "ebb982b5-a96b-47ab-92f8-dfd7a306483b",
      "item": {
        "type": "paragraph",
        "id": "ebb982b5-a96b-47ab-92f8-dfd7a306483b",
        "text": "# Advantages"
      },
      "date": 1506534192477
    },
    {
      "type": "add",
      "id": "21d8e7afcbcc8f38",
      "item": {
        "type": "paragraph",
        "id": "21d8e7afcbcc8f38",
        "text": "Serverless computing is more cost-effective than renting or purchasing a fixed quantity of servers, which generally involves significant periods of underutilization or idle time."
      },
      "after": "ebb982b5-a96b-47ab-92f8-dfd7a306483b",
      "date": 1506534200836
    },
    {
      "type": "edit",
      "id": "ebb982b5-a96b-47ab-92f8-dfd7a306483b",
      "item": {
        "type": "markdown",
        "id": "ebb982b5-a96b-47ab-92f8-dfd7a306483b",
        "text": "# Advantages"
      },
      "date": 1506534205024
    },
    {
      "type": "add",
      "id": "e2a00210bc8858f0",
      "item": {
        "type": "paragraph",
        "id": "e2a00210bc8858f0",
        "text": "It can even be more cost-efficient than provisioning an autoscaling group ([[autoscaling]]), due to more efficient bin-packing ([[Bin packing problem]]) of the underlying machine resources."
      },
      "after": "21d8e7afcbcc8f38",
      "date": 1506534206035
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "8da6f816-30f6-4da4-a6e6-5891892e2fef",
        "text": "# Cost"
      },
      "after": "ebb982b5-a96b-47ab-92f8-dfd7a306483b",
      "id": "8da6f816-30f6-4da4-a6e6-5891892e2fef",
      "date": 1506534216076
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "a942e3fa-554f-4b2c-a9ea-36dcb2db84e6",
        "text": "# Operations"
      },
      "after": "e2a00210bc8858f0",
      "id": "a942e3fa-554f-4b2c-a9ea-36dcb2db84e6",
      "date": 1506534219831
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1a85c49c-43cb-4813-84b4-edeb1ff86851",
        "text": "In addition, a serverless architecture means that developers and operators do not need to spend time setting up and tuning autoscaling policies or systems; the cloud provider is responsible for ensuring that the capacity always meets the demand.<ref name=\"techcrunch-lambda\" /><ref name=\"techcrunch-azure\" />"
      },
      "after": "a942e3fa-554f-4b2c-a9ea-36dcb2db84e6",
      "id": "1a85c49c-43cb-4813-84b4-edeb1ff86851",
      "date": 1506534222182
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c4b59a38-6da8-4e09-ae0d-f44aa1aee9c8",
        "text": "# Productivity"
      },
      "after": "1a85c49c-43cb-4813-84b4-edeb1ff86851",
      "id": "c4b59a38-6da8-4e09-ae0d-f44aa1aee9c8",
      "date": 1506534224903
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "71c08a04-94b5-40b4-b74d-530bef4c3b07",
        "text": "In serverless computing, the units of code exposed to the outside world are simple functions ([[subroutine]]). This means that typically, the programmer does not have to worry about multithreading ([[multithreading (software)]]) or directly handling [[HTTP]] requests in their code, simplifying the task of back-end software development."
      },
      "after": "c4b59a38-6da8-4e09-ae0d-f44aa1aee9c8",
      "id": "71c08a04-94b5-40b4-b74d-530bef4c3b07",
      "date": 1506534227359
    },
    {
      "type": "edit",
      "id": "1a85c49c-43cb-4813-84b4-edeb1ff86851",
      "item": {
        "type": "paragraph",
        "id": "1a85c49c-43cb-4813-84b4-edeb1ff86851",
        "text": "In addition, a serverless architecture means that developers and operators do not need to spend time setting up and tuning autoscaling policies or systems; the cloud provider is responsible for ensuring that the capacity always meets the demand."
      },
      "date": 1506534233620
    },
    {
      "type": "add",
      "id": "bf0704e024f7038e",
      "item": {
        "type": "paragraph",
        "id": "bf0704e024f7038e",
        "text": "See: - [https://martinfowler.com/articles/serverless.html martinfowler.com]"
      },
      "after": "ac412822-7ee7-421d-b1d0-7c46d855ff82",
      "date": 1506535305006
    },
    {
      "type": "edit",
      "id": "bf0704e024f7038e",
      "item": {
        "type": "markdown",
        "id": "bf0704e024f7038e",
        "text": "See: - [https://martinfowler.com/articles/serverless.html martinfowler.com]"
      },
      "date": 1506535306765
    },
    {
      "type": "edit",
      "id": "bf0704e024f7038e",
      "item": {
        "type": "markdown",
        "id": "bf0704e024f7038e",
        "text": "See: \n\n- [https://martinfowler.com/articles/serverless.html martinfowler.com]"
      },
      "date": 1506535311902
    },
    {
      "type": "edit",
      "id": "bf0704e024f7038e",
      "item": {
        "type": "markdown",
        "id": "bf0704e024f7038e",
        "text": "- [https://martinfowler.com/articles/serverless.html martinfowler.com]"
      },
      "date": 1506535320701
    },
    {
      "item": {
        "type": "factory",
        "id": "76cdd5280f396de8"
      },
      "id": "76cdd5280f396de8",
      "type": "add",
      "after": "4d227e5a-9adb-4e33-a3de-f34ee96888b2",
      "date": 1506536742575
    },
    {
      "type": "edit",
      "id": "76cdd5280f396de8",
      "item": {
        "type": "paragraph",
        "id": "76cdd5280f396de8",
        "text": "# Conclusion\n\nServerless, despite the confusing name, is a style of architecture where we rely to a smaller extent than usual on running our own server side systems as part of our applications. We do this through two techniques - Backend as a Service (BaaS), where we tightly integrate third party remote application services directly into the front-end of our apps, and Functions as a Service (FaaS), which moves server side code from long running components to ephemeral function instances.\n\nServerless is very unlikely to be the correct approach for every problem, so be wary of anyone who says it will replace all of our existing architectures. And be even more careful if you take the plunge into Serverless systems now, especially in the FaaS realm. While there are riches (of scaling and saved deployment effort) to be plundered, there also be dragons (of debugging, monitoring) lurking right around the next corner.\n\nThose benefits shouldn't be quickly dismissed however since there are significant positive aspects to Serverless Architecture, including reduced operational and development costs, easier operational management, and reduced environmental impact. The most important benefit to me though is the reduced feedback loop of creating new application components - I’m a huge fan of ‘lean’ approaches, largely because I think there is a lot of value in getting technology in front of an end user as soon as possible to get early feedback, and the reduced time-to-market that comes with Serverless fits right in with this philosophy.\n\nServerless systems are still in their infancy. There will be many advances in the field over the coming years and it will be fascinating to see how they fit into our architectural toolkit."
      },
      "date": 1506536755482
    },
    {
      "type": "edit",
      "id": "76cdd5280f396de8",
      "item": {
        "type": "paragraph",
        "id": "76cdd5280f396de8",
        "text": "# Conclusion"
      },
      "date": 1506536774803
    },
    {
      "type": "add",
      "id": "8dbd66e1d962b3c3",
      "item": {
        "type": "paragraph",
        "id": "8dbd66e1d962b3c3",
        "text": "Serverless, despite the confusing name, is a style of architecture where we rely to a smaller extent than usual on running our own server side systems as part of our applications. We do this through two techniques - Backend as a Service (BaaS), where we tightly integrate third party remote application services directly into the front-end of our apps, and Functions as a Service (FaaS), which moves server side code from long running components to ephemeral function instances.\n\nServerless is very unlikely to be the correct approach for every problem, so be wary of anyone who says it will replace all of our existing architectures. And be even more careful if you take the plunge into Serverless systems now, especially in the FaaS realm. While there are riches (of scaling and saved deployment effort) to be plundered, there also be dragons (of debugging, monitoring) lurking right around the next corner.\n\nThose benefits shouldn't be quickly dismissed however since there are significant positive aspects to Serverless Architecture, including reduced operational and development costs, easier operational management, and reduced environmental impact. The most important benefit to me though is the reduced feedback loop of creating new application components - I’m a huge fan of ‘lean’ approaches, largely because I think there is a lot of value in getting technology in front of an end user as soon as possible to get early feedback, and the reduced time-to-market that comes with Serverless fits right in with this philosophy.\n\nServerless systems are still in their infancy. There will be many advances in the field over the coming years and it will be fascinating to see how they fit into our architectural toolkit."
      },
      "after": "76cdd5280f396de8",
      "date": 1506536778386
    },
    {
      "type": "edit",
      "id": "76cdd5280f396de8",
      "item": {
        "type": "markdown",
        "id": "76cdd5280f396de8",
        "text": "# Conclusion"
      },
      "date": 1506536782532
    }
  ]
}