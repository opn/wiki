{
  "title": "Oracle",
  "story": [
    {
      "type": "paragraph",
      "id": "4869a4bdaf7c5437",
      "text": "An oracle, in the blockchain sense, is a third party which sends to your on-chain smart contract some specific data your smart contract code cannot fetch by itself. As the oracle is a centralized party, you shouldn’t take its response for granted."
    },
    {
      "type": "paragraph",
      "id": "632ba08d6a7dd898",
      "text": "One of the more popular proposals for implementing smart contracts differently from the way they are typically presented in Ethereum is through the concept of oracles. "
    },
    {
      "type": "paragraph",
      "id": "890f4ac4554ee871",
      "text": "Essentially, instead of a long-running contract being run directly on the blockchain, all funds that are intended to go into the contract would instead go into an M-of-N multisig address controlled by a set of specialized entities called “oracles”, and the contract code would be simultaneously sent to all of these entities. "
    },
    {
      "type": "paragraph",
      "id": "a146818aef23d77e",
      "text": "Every time someone wants to send a message to the contract, they would send the message to the oracles. The oracles would run the code, and if the code execution leads to a withdrawal from the contract to some particular address then the oracles circulate a transaction sending the funds and sign it - [https://blog.ethereum.org/2014/07/22/ethereum-and-oracles/ blog.ethereum.org]"
    },
    {
      "type": "reference",
      "id": "110eb7bb53473463",
      "site": "cryptoacademy.org",
      "slug": "oraclize",
      "title": "Oraclize",
      "text": "Oraclize is a service by which you can have some bitcoin transactions take place based on the occurrence of some verifiable real-life event."
    },
    {
      "type": "paragraph",
      "id": "d88ad3fca6553536",
      "text": "For example, if you ask an oracle to give you the last trading price of ETH/USD the oracle needs to fetch this data from some exchanges on the Internet and than send this data back to you. While doing this the oracle might compromise the exchange data and send back to you a compromised value. "
    },
    {
      "type": "paragraph",
      "id": "5eb87f718be33ecd",
      "text": "This is the reason why the oracle cannot be trusted by itself. It is important to trust the data-feed provider (in our example this is the exchange trading the ETH/USD pair) but this can easily be mitigated by using different data-sources and and using them to determine consensus."
    },
    {
      "type": "markdown",
      "id": "75cd49c2747b75b7",
      "text": "# How Can We Trust an Oracle"
    },
    {
      "type": "paragraph",
      "id": "7a483561b1dc6410",
      "text": "But how can we trust the oracle not to alter this data in the first place? This is achievable using the same mitigation technique we just explained above for data-sources or by using a cryptographic proof such as the TLSNotary one - [https://github.com/tlsnotary/tlsnotary github]"
    },
    {
      "type": "paragraph",
      "id": "781eea6ce5197fd7",
      "text": "Here is a long strange discussion of Oracles - [http://www.truthcoin.info/blog/contracts-oracles-sidechains/ truthcoin.info]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Oracle",
        "story": []
      },
      "date": 1439120724745
    },
    {
      "item": {
        "type": "factory",
        "id": "632ba08d6a7dd898"
      },
      "id": "632ba08d6a7dd898",
      "type": "add",
      "date": 1439120726279
    },
    {
      "type": "edit",
      "id": "632ba08d6a7dd898",
      "item": {
        "type": "paragraph",
        "id": "632ba08d6a7dd898",
        "text": "- [https://blog.ethereum.org/2014/07/22/ethereum-and-oracles/ blog.ethereum.org]"
      },
      "date": 1439120742135
    },
    {
      "type": "edit",
      "id": "632ba08d6a7dd898",
      "item": {
        "type": "paragraph",
        "id": "632ba08d6a7dd898",
        "text": "One of the more popular proposals for implementing smart contracts differently from the way they are typically presented in Ethereum is through the concept of oracles. Essentially, instead of a long-running contract being run directly on the blockchain, all funds that are intended to go into the contract would instead go into an M-of-N multisig address controlled by a set of specialized entities called “oracles”, and the contract code would be simultaneously sent to all of these entities. Every time someone wants to send a message to the contract, they would send the message to the oracles. The oracles would run the code, and if the code execution leads to a withdrawal from the contract to some particular address then the oracles circulate a transaction sending the funds and sign it - [https://blog.ethereum.org/2014/07/22/ethereum-and-oracles/ blog.ethereum.org]"
      },
      "date": 1439120799517
    },
    {
      "type": "edit",
      "id": "632ba08d6a7dd898",
      "item": {
        "type": "paragraph",
        "id": "632ba08d6a7dd898",
        "text": "One of the more popular proposals for implementing smart contracts differently from the way they are typically presented in Ethereum is through the concept of oracles. "
      },
      "date": 1439120807940
    },
    {
      "type": "add",
      "id": "890f4ac4554ee871",
      "item": {
        "type": "paragraph",
        "id": "890f4ac4554ee871",
        "text": "Essentially, instead of a long-running contract being run directly on the blockchain, all funds that are intended to go into the contract would instead go into an M-of-N multisig address controlled by a set of specialized entities called “oracles”, and the contract code would be simultaneously sent to all of these entities. "
      },
      "after": "632ba08d6a7dd898",
      "date": 1439120813193
    },
    {
      "type": "add",
      "id": "a146818aef23d77e",
      "item": {
        "type": "paragraph",
        "id": "a146818aef23d77e",
        "text": "Every time someone wants to send a message to the contract, they would send the message to the oracles. The oracles would run the code, and if the code execution leads to a withdrawal from the contract to some particular address then the oracles circulate a transaction sending the funds and sign it - [https://blog.ethereum.org/2014/07/22/ethereum-and-oracles/ blog.ethereum.org]"
      },
      "after": "890f4ac4554ee871",
      "date": 1439120816309
    },
    {
      "item": {
        "type": "factory",
        "id": "110eb7bb53473463"
      },
      "id": "110eb7bb53473463",
      "type": "add",
      "after": "a146818aef23d77e",
      "date": 1454856798209
    },
    {
      "type": "edit",
      "id": "110eb7bb53473463",
      "item": {
        "type": "reference",
        "id": "110eb7bb53473463",
        "site": "cryptoacademy.org",
        "slug": "oraclize",
        "title": "Oraclize",
        "text": "Oraclize is a service by which you can have some bitcoin transactions take place based on the occurrence of some verifiable real-life event.\nIt is based on third-party services which were already acting as oracles, but not in the bitcoin sense; Oraclize brings the computable knowledge of these complex engines to the bitcoin world - [https://www.oraclize.it/home/features oraclize.it]"
      },
      "date": 1454856800381
    },
    {
      "type": "edit",
      "id": "110eb7bb53473463",
      "item": {
        "type": "reference",
        "id": "110eb7bb53473463",
        "site": "cryptoacademy.org",
        "slug": "oraclize",
        "title": "Oraclize",
        "text": "Oraclize is a service by which you can have some bitcoin transactions take place based on the occurrence of some verifiable real-life event."
      },
      "date": 1454856843815
    },
    {
      "item": {
        "type": "factory",
        "id": "4869a4bdaf7c5437"
      },
      "id": "4869a4bdaf7c5437",
      "type": "add",
      "after": "110eb7bb53473463",
      "date": 1454856992380
    },
    {
      "type": "edit",
      "id": "4869a4bdaf7c5437",
      "item": {
        "type": "paragraph",
        "id": "4869a4bdaf7c5437",
        "text": "An oracle, in the blockchain sense, is a third party which sends to your on-chain smart contract some specific data your smart contract code cannot fetch by itself. As the oracle is a centralized party, you shouldn’t take its response for granted.\n\nFor example, if you ask an oracle to give you the last trading price of ETH/USD the oracle needs to fetch this data from some exchanges on the Internet and than send this data back to you. While doing this the oracle might compromise the exchange data and send back to you a compromised value. This is the reason why the oracle cannot be trusted by itself. It is important to trust the data-feed provider (in our example this is the exchange trading the ETH/USD pair) but this can easily be mitigated by using different data-sources and and using them to determine consensus."
      },
      "date": 1454856995974
    },
    {
      "type": "add",
      "id": "7a483561b1dc6410",
      "item": {
        "type": "paragraph",
        "id": "7a483561b1dc6410",
        "text": "\nBut how can we trust the oracle not to alter this data in the first place? This is achievable using the same mitigation technique we just explained above for data-sources or by using a cryptographic proof such as the TLSNotary one."
      },
      "after": "4869a4bdaf7c5437",
      "date": 1454856997450
    },
    {
      "type": "edit",
      "id": "4869a4bdaf7c5437",
      "item": {
        "type": "paragraph",
        "id": "4869a4bdaf7c5437",
        "text": "An oracle, in the blockchain sense, is a third party which sends to your on-chain smart contract some specific data your smart contract code cannot fetch by itself. As the oracle is a centralized party, you shouldn’t take its response for granted."
      },
      "date": 1454857009400
    },
    {
      "type": "add",
      "id": "d88ad3fca6553536",
      "item": {
        "type": "paragraph",
        "id": "d88ad3fca6553536",
        "text": "For example, if you ask an oracle to give you the last trading price of ETH/USD the oracle needs to fetch this data from some exchanges on the Internet and than send this data back to you. While doing this the oracle might compromise the exchange data and send back to you a compromised value. "
      },
      "after": "4869a4bdaf7c5437",
      "date": 1454857014702
    },
    {
      "type": "add",
      "id": "5eb87f718be33ecd",
      "item": {
        "type": "paragraph",
        "id": "5eb87f718be33ecd",
        "text": "This is the reason why the oracle cannot be trusted by itself. It is important to trust the data-feed provider (in our example this is the exchange trading the ETH/USD pair) but this can easily be mitigated by using different data-sources and and using them to determine consensus."
      },
      "after": "d88ad3fca6553536",
      "date": 1454857019377
    },
    {
      "type": "move",
      "order": [
        "4869a4bdaf7c5437",
        "632ba08d6a7dd898",
        "890f4ac4554ee871",
        "a146818aef23d77e",
        "110eb7bb53473463",
        "d88ad3fca6553536",
        "5eb87f718be33ecd",
        "7a483561b1dc6410"
      ],
      "id": "4869a4bdaf7c5437",
      "date": 1454857029780
    },
    {
      "item": {
        "type": "factory",
        "id": "781eea6ce5197fd7"
      },
      "id": "781eea6ce5197fd7",
      "type": "add",
      "after": "7a483561b1dc6410",
      "date": 1454932147051
    },
    {
      "type": "edit",
      "id": "781eea6ce5197fd7",
      "item": {
        "type": "paragraph",
        "id": "781eea6ce5197fd7",
        "text": "Here is a long strange discussion of Oracles - [http://www.truthcoin.info/blog/contracts-oracles-sidechains/ truthcoin.info]"
      },
      "date": 1454932168107
    },
    {
      "type": "edit",
      "id": "7a483561b1dc6410",
      "item": {
        "type": "paragraph",
        "id": "7a483561b1dc6410",
        "text": "But how can we trust the oracle not to alter this data in the first place? This is achievable using the same mitigation technique we just explained above for data-sources or by using a cryptographic proof such as the TLSNotary one - [https://github.com/tlsnotary/tlsnotary github]"
      },
      "date": 1454932627639
    },
    {
      "type": "add",
      "id": "75cd49c2747b75b7",
      "item": {
        "type": "paragraph",
        "id": "75cd49c2747b75b7",
        "text": "# How Can We Trust an Oracle"
      },
      "after": "5eb87f718be33ecd",
      "date": 1454932648685
    },
    {
      "type": "edit",
      "id": "75cd49c2747b75b7",
      "item": {
        "type": "markdown",
        "id": "75cd49c2747b75b7",
        "text": "# How Can We Trust an Oracle"
      },
      "date": 1454932650985
    }
  ]
}