{
  "title": "Secure Multiparty Computation",
  "story": [
    {
      "type": "paragraph",
      "id": "85b118542befb048",
      "text": "In secure multiparty computation, the inputs to a [[Circuit]] are split up using an algorithm called [[Shamir’s Secret Sharing]], and a piece of the information is given to each participant."
    },
    {
      "type": "paragraph",
      "id": "ff608cac598df913",
      "text": "[[Shamir’s Secret Sharing]] can be used to split up any data into N pieces such that any K of them, but no K-1 of them, are sufficient to recover the original data – you choose what K and N are when running the algorithm. 2-of-3, 5-of-10 and 501-of-1000 are all possible. "
    },
    {
      "type": "paragraph",
      "id": "5bfdbbad7aa1f558",
      "text": "A [[Circuit]] can then be evaluated on the pieces of data in a decentralized way, such that at the end of the computation everyone has a piece of the result of the computation, but at no point during the computation does any single individual get even the slightest glimpse of what is going on. "
    },
    {
      "type": "paragraph",
      "id": "4190ad1d4265da39",
      "text": "Finally, the pieces are put together to reveal the result. The runtime of the algorithm is O(n3), meaning that the number of computational steps that it takes to evaluate a computation is roughly proportional to the cube of the number of participants; at 10 nodes, 1000 computational steps, and at 1000 nodes 1 billion steps. "
    },
    {
      "type": "paragraph",
      "id": "eae54d8dd3127266",
      "text": "A simple billion-step loop in C++ takes about twenty seconds on my own laptop, and servers can do it in a fraction of a second, so 1000 nodes is currently roughly at the limit of computational practicality."
    },
    {
      "type": "markdown",
      "id": "04a67df2bcca91e1",
      "text": "# Use of Trusted Computing"
    },
    {
      "type": "paragraph",
      "id": "f48ff58f99f3503e",
      "text": "To be truly autonomous, an agent should need to trust nobody (and nothing). But to make a trade you often need some assurance that the other side will behave as expected. People rely on the law to enforce contracts, but agents have no such recourse. Whilst clever protocols can configure incentives to ensure co-operation in some cases, trusted computing can be used to provide this assurance in the general case - [https://en.bitcoin.it/wiki/Agent#Use_of_trusted_computing.2FTPM_chips en.bitcoin.it]"
    },
    {
      "type": "reference",
      "id": "390b139fd8f9c70d",
      "site": "c0de.academy",
      "slug": "trusted-computing",
      "title": "Trusted Computing",
      "text": "With Trusted Computing, the computer will consistently behave in expected ways, and those behaviors will be enforced by computer hardware and software - [https://en.wikipedia.org/wiki/Trusted_Computing wikipedia]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Secure Multiparty Computation",
        "story": []
      },
      "date": 1431464467964
    },
    {
      "item": {
        "type": "factory",
        "id": "85b118542befb048"
      },
      "id": "85b118542befb048",
      "type": "add",
      "date": 1431464470149
    },
    {
      "type": "edit",
      "id": "85b118542befb048",
      "item": {
        "type": "paragraph",
        "id": "85b118542befb048",
        "text": "In secure multiparty computation, the inputs to a program (or, more precisely, the inputs to a simulated [[Circuit]], as secure multiparty computation cannot handle “if” statements and conditional looping) are split up using an algorithm called Shamir’s Secret Sharing, and a piece of the information is given to each participant."
      },
      "date": 1431464519625
    },
    {
      "type": "add",
      "id": "ff608cac598df913",
      "item": {
        "type": "paragraph",
        "id": "ff608cac598df913",
        "text": "[[Shamir’s Secret Sharing]] can be used to split up any data into N pieces such that any K of them, but no K-1 of them, are sufficient to recover the original data – you choose what K and N are when running the algorithm. 2-of-3, 5-of-10 and 501-of-1000 are all possible. "
      },
      "after": "85b118542befb048",
      "date": 1431464535485
    },
    {
      "type": "add",
      "id": "5bfdbbad7aa1f558",
      "item": {
        "type": "paragraph",
        "id": "5bfdbbad7aa1f558",
        "text": "A [[Circuit]] can then be evaluated on the pieces of data in a decentralized way, such that at the end of the computation everyone has a piece of the result of the computation, but at no point during the computation does any single individual get even the slightest glimpse of what is going on. Finally, the pieces are put together to reveal the result. The runtime of the algorithm is O(n3), meaning that the number of computational steps that it takes to evaluate a computation is roughly proportional to the cube of the number of participants; at 10 nodes, 1000 computational steps, and at 1000 nodes 1 billion steps. A simple billion-step loop in C++ takes about twenty seconds on my own laptop, and servers can do it in a fraction of a second, so 1000 nodes is currently roughly at the limit of computational practicality."
      },
      "after": "ff608cac598df913",
      "date": 1431464548871
    },
    {
      "type": "edit",
      "id": "85b118542befb048",
      "item": {
        "type": "paragraph",
        "id": "85b118542befb048",
        "text": "In secure multiparty computation, the inputs to a [[Circuit]] are split up using an algorithm called [[Shamir’s Secret Sharing]], and a piece of the information is given to each participant."
      },
      "date": 1431464598879
    },
    {
      "type": "edit",
      "id": "5bfdbbad7aa1f558",
      "item": {
        "type": "paragraph",
        "id": "5bfdbbad7aa1f558",
        "text": "A [[Circuit]] can then be evaluated on the pieces of data in a decentralized way, such that at the end of the computation everyone has a piece of the result of the computation, but at no point during the computation does any single individual get even the slightest glimpse of what is going on. "
      },
      "date": 1431464732133
    },
    {
      "type": "add",
      "id": "4190ad1d4265da39",
      "item": {
        "type": "paragraph",
        "id": "4190ad1d4265da39",
        "text": "Finally, the pieces are put together to reveal the result. The runtime of the algorithm is O(n3), meaning that the number of computational steps that it takes to evaluate a computation is roughly proportional to the cube of the number of participants; at 10 nodes, 1000 computational steps, and at 1000 nodes 1 billion steps. "
      },
      "after": "5bfdbbad7aa1f558",
      "date": 1431464751481
    },
    {
      "type": "add",
      "id": "eae54d8dd3127266",
      "item": {
        "type": "paragraph",
        "id": "eae54d8dd3127266",
        "text": "A simple billion-step loop in C++ takes about twenty seconds on my own laptop, and servers can do it in a fraction of a second, so 1000 nodes is currently roughly at the limit of computational practicality."
      },
      "after": "4190ad1d4265da39",
      "date": 1431464776960
    },
    {
      "item": {
        "type": "factory",
        "id": "04a67df2bcca91e1"
      },
      "id": "04a67df2bcca91e1",
      "type": "add",
      "after": "eae54d8dd3127266",
      "date": 1439073093115
    },
    {
      "type": "edit",
      "id": "04a67df2bcca91e1",
      "item": {
        "type": "paragraph",
        "id": "04a67df2bcca91e1",
        "text": "# Use of Trusted Computing"
      },
      "date": 1439073122969
    },
    {
      "type": "add",
      "id": "f48ff58f99f3503e",
      "item": {
        "type": "paragraph",
        "id": "f48ff58f99f3503e",
        "text": "- [https://en.bitcoin.it/wiki/Agent#Use_of_trusted_computing.2FTPM_chips en.bitcoin.it]"
      },
      "after": "04a67df2bcca91e1",
      "date": 1439073137406
    },
    {
      "type": "edit",
      "id": "04a67df2bcca91e1",
      "item": {
        "type": "markdown",
        "id": "04a67df2bcca91e1",
        "text": "# Use of Trusted Computing"
      },
      "date": 1439073140115
    },
    {
      "type": "edit",
      "id": "f48ff58f99f3503e",
      "item": {
        "type": "paragraph",
        "id": "f48ff58f99f3503e",
        "text": "To be truly autonomous, an agent should need to trust nobody (and nothing). But to make a trade you often need some assurance that the other side will behave as expected. People rely on the law to enforce contracts, but agents have no such recourse. Whilst clever protocols can configure incentives to ensure co-operation in some cases, trusted computing can be used to provide this assurance in the general case - [https://en.bitcoin.it/wiki/Agent#Use_of_trusted_computing.2FTPM_chips en.bitcoin.it]"
      },
      "date": 1439073169841
    },
    {
      "item": {
        "type": "factory",
        "id": "390b139fd8f9c70d"
      },
      "id": "390b139fd8f9c70d",
      "type": "add",
      "after": "f48ff58f99f3503e",
      "date": 1439073202520
    },
    {
      "type": "edit",
      "id": "390b139fd8f9c70d",
      "item": {
        "type": "reference",
        "id": "390b139fd8f9c70d",
        "site": "c0de.academy",
        "slug": "trusted-computing",
        "title": "Trusted Computing",
        "text": "With Trusted Computing, the computer will consistently behave in expected ways, and those behaviors will be enforced by computer hardware and software - [https://en.wikipedia.org/wiki/Trusted_Computing wikipedia]"
      },
      "date": 1439073204702
    }
  ]
}