{
  "title": "Merkle tree",
  "story": [
    {
      "id": "68292241b5f44f38",
      "text": "In cryptography and computer science, a hash tree or Merkle tree is a tree in which every non-leaf node is labelled with the hash of the labels of its children nodes. Hash trees are useful because they allow efficient and secure verification of the contents of large data structures. Hash trees are a generalization of hash lists and [[Hash Chain]]s  - [https://en.wikipedia.org/wiki/Merkle_Tree wikipedia]",
      "type": "paragraph"
    },
    {
      "type": "html",
      "id": "f7fee238-f5cc-48ad-8393-1fe8f38c863a",
      "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;'>\n<a href='https://commons.wikimedia.org/wiki/File:Hash_Tree.svg' target='_blank'>\n<img style='display:block; margin:auto; width:100%;'\nsrc='https://upload.wikimedia.org/wikipedia/commons/9/95/Hash_Tree.svg'>\n</a>\n\n<p class=caption>\nDiagram of a binary hash tree.\nOriginal illustration by David GÃ¶thberg, Sweden, released to public domain as a PNG here. Converted to SVG by User:Azaghal. - [https://commons.wikimedia.org/wiki/File:Hash_Tree.svg wikimedia]\n[https://commons.wikimedia.org/wiki/File:Hash_Tree.svg - wikimedia]\n</p></div>"
    },
    {
      "type": "paragraph",
      "id": "76733e37-a723-4daf-a1be-d770c7aa037d",
      "text": "Demonstrating that a leaf node is a part of the given hash tree requires processing an amount of data proportional to the logarithm of the number of nodes of the tree; this contrasts with hash lists, where the amount is proportional to the number of nodes."
    },
    {
      "type": "paragraph",
      "id": "957c9352-2adb-4385-b33f-c5bf986e2c8f",
      "text": "The concept of hash trees is named after Ralph Merkle who patented it in 1979."
    },
    {
      "type": "paragraph",
      "id": "6292713044b1c7fc",
      "text": "Both git repositories and bitcoin are specialized Merkle trees. Merkle trees are incredibly useful and general; they are used in many kinds of verification, especially of large chunks of data."
    },
    {
      "type": "html",
      "id": "305f2be7ab7967db",
      "text": "<blockquote>The terminology used in #bitcoin-wizards is to call it a merkelized dag, or [[merkle-dag]]. Similarly, we also refer to \"Merkelized Abstract Syntax Trees\", a way of hashing code originally proposed by Pieter Wuille and Russel O'connor that will probably be added to Bitcoin's scripting system eventually. Pretty much any data structure can have hash functions added to it to \"merkelize\" it, producing an authenticated data structure - [[Peter Todd]]</blockquote>"
    },
    {
      "type": "markdown",
      "id": "4cd474f0-6978-4d05-b49c-d33f4a276607",
      "text": "# See also\n\n\n"
    },
    {
      "type": "markdown",
      "id": "33a5c0cd2d4f304a",
      "text": "- [[Hash Chain]]\n"
    },
    {
      "type": "markdown",
      "id": "b36e182b428720b9",
      "text": "* [[Directed Acyclic Graph]]\n* [[Uses]]\n* [[Overview]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Merkle tree"
      },
      "date": 1466675846577,
      "source": {
        "pageTitle": "Merkle tree",
        "pageSlug": "Merkle tree",
        "url": "https://en.wikipedia.org/wiki/Merkle_Tree",
        "date": 1466675846577,
        "link_dictionary": {
          "wiki_links": {
            "Overview": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "External links": {
              "section_number": 8,
              "section_level": 2,
              "dot_number": 6
            },
            "References": {
              "section_number": 6,
              "section_level": 2,
              "dot_number": 4
            },
            "See also": {
              "section_number": 5,
              "section_level": 2,
              "dot_number": 3
            },
            "Uses": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Further reading": {
              "section_number": 7,
              "section_level": 2,
              "dot_number": 5
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 725108425,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466675851076
    },
    {
      "type": "edit",
      "id": "4cd474f0-6978-4d05-b49c-d33f4a276607",
      "item": {
        "type": "markdown",
        "id": "4cd474f0-6978-4d05-b49c-d33f4a276607",
        "text": "# See also\n\n* [[Directed Acyclic Graph]]\n* [[Uses]]\n* [[Overview]]\n* [[See also]]\n* [[References]]\n* [[Further reading]]\n* [[External links]]"
      },
      "date": 1467041777968
    },
    {
      "type": "fork",
      "site": "future.fedwiki.org",
      "date": 1470994624458
    },
    {
      "type": "remove",
      "id": "973dba25-ddd7-41a8-9c39-402ade06cb3c",
      "date": 1470994630082
    },
    {
      "type": "fork",
      "site": "wiki.parliamentofthings.org",
      "date": 1512133136900
    },
    {
      "type": "fork",
      "site": "graph.liquiddemocracy.org",
      "date": 1522998220135
    },
    {
      "type": "edit",
      "id": "4cd474f0-6978-4d05-b49c-d33f4a276607",
      "item": {
        "type": "markdown",
        "id": "4cd474f0-6978-4d05-b49c-d33f4a276607",
        "text": "# See also\n\n* [[Directed Acyclic Graph]]\n* [[Uses]]\n* [[Overview]]"
      },
      "date": 1522998228158
    },
    {
      "type": "add",
      "item": {
        "id": "68292241b5f44f38",
        "text": "In cryptography and computer science, a hash tree or Merkle tree is a tree in which every non-leaf node is labelled with the hash of the labels of its children nodes. Hash trees are useful because they allow efficient and secure verification of the contents of large data structures. Hash trees are a generalization of hash lists and [[Hash Chain]]s.",
        "type": "paragraph"
      },
      "id": "68292241b5f44f38",
      "date": 1522998263131
    },
    {
      "type": "remove",
      "id": "83cadd92-d2fb-4d50-a673-dff43d3eb148",
      "date": 1522998269365
    },
    {
      "type": "edit",
      "id": "68292241b5f44f38",
      "item": {
        "id": "68292241b5f44f38",
        "text": "In cryptography and computer science, a hash tree or Merkle tree is a tree in which every non-leaf node is labelled with the hash of the labels of its children nodes. Hash trees are useful because they allow efficient and secure verification of the contents of large data structures. Hash trees are a generalization of hash lists and [[Hash Chain]]s  - [https://en.wikipedia.org/wiki/Merkle_Tree wikipedia]",
        "type": "paragraph"
      },
      "date": 1522998273401
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6292713044b1c7fc",
        "text": "Both git repositories and bitcoin are specialized Merkle trees. Merkle trees are incredibly useful and general; they are used in many kinds of verification, especially of large chunks of data."
      },
      "after": "957c9352-2adb-4385-b33f-c5bf986e2c8f",
      "id": "6292713044b1c7fc",
      "date": 1522998282047
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "305f2be7ab7967db",
        "text": "The terminology used in #bitcoin-wizards is to call it a merkelized dag, or merkle-dag. Similarly, we also refer to \"Merkelized Abstract Syntax Trees\", a way of hashing code originally proposed by Pieter Wuille and Russel O'connor that will probably be added to Bitcoin's scripting system eventually. Pretty much any data structure can have hash functions added to it to \"merkelize\" it, producing an authenticated data structure - [Peter Todd"
      },
      "after": "6292713044b1c7fc",
      "id": "305f2be7ab7967db",
      "date": 1522998284689
    },
    {
      "type": "edit",
      "id": "305f2be7ab7967db",
      "item": {
        "type": "paragraph",
        "id": "305f2be7ab7967db",
        "text": "<blockquote>The terminology used in #bitcoin-wizards is to call it a merkelized dag, or [[merkle-dag]]. Similarly, we also refer to \"Merkelized Abstract Syntax Trees\", a way of hashing code originally proposed by Pieter Wuille and Russel O'connor that will probably be added to Bitcoin's scripting system eventually. Pretty much any data structure can have hash functions added to it to \"merkelize\" it, producing an authenticated data structure - [Peter Todd]]</blockquote>"
      },
      "date": 1522998335345
    },
    {
      "type": "edit",
      "id": "305f2be7ab7967db",
      "item": {
        "type": "html",
        "id": "305f2be7ab7967db",
        "text": "<blockquote>The terminology used in #bitcoin-wizards is to call it a merkelized dag, or [[merkle-dag]]. Similarly, we also refer to \"Merkelized Abstract Syntax Trees\", a way of hashing code originally proposed by Pieter Wuille and Russel O'connor that will probably be added to Bitcoin's scripting system eventually. Pretty much any data structure can have hash functions added to it to \"merkelize\" it, producing an authenticated data structure - [Peter Todd]]</blockquote>"
      },
      "date": 1522998336067
    },
    {
      "type": "edit",
      "id": "305f2be7ab7967db",
      "item": {
        "type": "html",
        "id": "305f2be7ab7967db",
        "text": "<blockquote>The terminology used in #bitcoin-wizards is to call it a merkelized dag, or [[merkle-dag]]. Similarly, we also refer to \"Merkelized Abstract Syntax Trees\", a way of hashing code originally proposed by Pieter Wuille and Russel O'connor that will probably be added to Bitcoin's scripting system eventually. Pretty much any data structure can have hash functions added to it to \"merkelize\" it, producing an authenticated data structure - [[Peter Todd]]</blockquote>"
      },
      "date": 1522998344050
    },
    {
      "type": "edit",
      "id": "4cd474f0-6978-4d05-b49c-d33f4a276607",
      "item": {
        "type": "markdown",
        "id": "4cd474f0-6978-4d05-b49c-d33f4a276607",
        "text": "# See also\n\n\n"
      },
      "date": 1522998362934
    },
    {
      "type": "add",
      "id": "33a5c0cd2d4f304a",
      "item": {
        "type": "markdown",
        "id": "33a5c0cd2d4f304a",
        "text": "- [[Hash Chain]]\n"
      },
      "after": "4cd474f0-6978-4d05-b49c-d33f4a276607",
      "date": 1522998364580
    },
    {
      "type": "add",
      "id": "b36e182b428720b9",
      "item": {
        "type": "markdown",
        "id": "b36e182b428720b9",
        "text": "* [[Directed Acyclic Graph]]\n* [[Uses]]\n* [[Overview]]"
      },
      "after": "33a5c0cd2d4f304a",
      "date": 1522998365011
    }
  ]
}