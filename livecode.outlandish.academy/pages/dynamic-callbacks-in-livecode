{
  "title": "Dynamic Callbacks in Livecode",
  "story": [
    {
      "type": "paragraph",
      "id": "277ef320e80b6494",
      "text": "There is nothing STOPPING us from implementing named callbacks in the current fashion or passing the named callback references dynamically as you and I mentioned, but from experience trying it this way I feel like it makes maintaining large projects built this way a lot more difficult. "
    },
    {
      "type": "paragraph",
      "id": "3fbb1a6fc864fbaa",
      "text": "I ended up completely redoing most of the livecode stuff I've written in this way early on because it was getting to be a nightmare to maintain a completely separate callback functions rather than the sort\nof nested structure you get in node with callbacks. It takes a lot of discipline in placement and grouping of the code that is related in this way to come back later and make sense of it. In summary: it can be done,\nbut that doesn't mean that it SHOULD be done."
    },
    {
      "type": "paragraph",
      "id": "ca0d9e5bf30a354c",
      "text": "Also, this was something really neat I've used recently to make node work in-process with some .NET applications we have. Something that does this\nwith node and LC would indeed be the bees knees - [http://www.hanselman.com/blog/ItsJustASoftwareIssueEdgejsBringsNodeAndNETTogetherOnThreePlatforms.aspx hanselman.com]"
    },
    {
      "type": "paragraph",
      "id": "7ac75e4a350d4f38",
      "text": "Specifically the part about it allowing us to write node extensions in C# in addition to the standard C and C++ way of doing it. I'd love to be able\nto hook node into extensions written in livecode."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Dynamic Callbacks in Livecode",
        "story": []
      },
      "date": 1428486011924
    },
    {
      "item": {
        "type": "factory",
        "id": "277ef320e80b6494"
      },
      "id": "277ef320e80b6494",
      "type": "add",
      "date": 1428486013643
    },
    {
      "type": "edit",
      "id": "277ef320e80b6494",
      "item": {
        "type": "paragraph",
        "id": "277ef320e80b6494",
        "text": "There is nothing STOPPING us from implementing named callbacks in the current fashion or passing the named callback references dynamically as you and I mentioned, but from experience trying it this way I feel like it makes maintaining large projects built this way a lot more difficult. "
      },
      "date": 1428486061349
    },
    {
      "type": "add",
      "id": "3fbb1a6fc864fbaa",
      "item": {
        "type": "paragraph",
        "id": "3fbb1a6fc864fbaa",
        "text": "I ended up completely redoing most of the livecode stuff I've written in this way early on because it was getting to be a nightmare to maintain a completely separate callback functions rather than the sort\nof nested structure you get in node with callbacks. It takes a lot of discipline in placement and grouping of the code that is related in this way to come back later and make sense of it. In summary: it can be done,\nbut that doesn't mean that it SHOULD be done."
      },
      "after": "277ef320e80b6494",
      "date": 1428486074148
    },
    {
      "type": "add",
      "id": "ca0d9e5bf30a354c",
      "item": {
        "type": "paragraph",
        "id": "ca0d9e5bf30a354c",
        "text": "Also, this was something really neat I've used recently to make node work in-process with some .NET applications we have. Something that does this\nwith node and LC would indeed be the bees knees."
      },
      "after": "3fbb1a6fc864fbaa",
      "date": 1428486090164
    },
    {
      "type": "edit",
      "id": "ca0d9e5bf30a354c",
      "item": {
        "type": "paragraph",
        "id": "ca0d9e5bf30a354c",
        "text": "Also, this was something really neat I've used recently to make node work in-process with some .NET applications we have. Something that does this\nwith node and LC would indeed be the bees knees - [http://www.hanselman.com/blog/ItsJustASoftwareIssueEdgejsBringsNodeAndNETTogetherOnThreePlatforms.aspx adfs]"
      },
      "date": 1428486104773
    },
    {
      "type": "add",
      "id": "7ac75e4a350d4f38",
      "item": {
        "type": "paragraph",
        "id": "7ac75e4a350d4f38",
        "text": "Specifically the part about it allowing us to write node extensions in C# in addition to the standard C and C++ way of doing it. I'd love to be able\nto hook node into extensions written in livecode."
      },
      "after": "ca0d9e5bf30a354c",
      "date": 1428486120729
    },
    {
      "type": "edit",
      "id": "ca0d9e5bf30a354c",
      "item": {
        "type": "paragraph",
        "id": "ca0d9e5bf30a354c",
        "text": "Also, this was something really neat I've used recently to make node work in-process with some .NET applications we have. Something that does this\nwith node and LC would indeed be the bees knees - [http://www.hanselman.com/blog/ItsJustASoftwareIssueEdgejsBringsNodeAndNETTogetherOnThreePlatforms.aspx hanselman.com]"
      },
      "date": 1428486137941
    }
  ]
}