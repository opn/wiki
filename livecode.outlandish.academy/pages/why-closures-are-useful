{
  "title": "Why Closures Are Useful",
  "story": [
    {
      "type": "paragraph",
      "id": "b11610b351814e2d",
      "text": "As for anonymous callbacks, I totally agree. "
    },
    {
      "type": "paragraph",
      "id": "6eb9830802386f31",
      "text": "Most early Node development had to overcome the callback hell that these patterns introduce. However,\nalmost all of the [[NodeJS]] projects and libraries I've worked with leveraged them heavily or exclusively. "
    },
    {
      "type": "paragraph",
      "id": "0d637b0041ef87a5",
      "text": "Promsies seem to have become the standard way\nof dealing with the callback hell that node was so famous for for a long time. "
    },
    {
      "type": "paragraph",
      "id": "2a0ec25f373ff0f5",
      "text": "Why does node use anonymous functions over the method you linked to in the article? - [http://toddmotto.com/avoiding-anonymous-javascript-functions/ toddmotto.com]"
    },
    {
      "type": "paragraph",
      "id": "86f7ba9e1d9ddea1",
      "text": "Anonymous functions are marked for [[Garbage Collection]] immediately after being returned. All other functions at the global scope\nrun the risk of needlessly using memory after they run. "
    },
    {
      "type": "paragraph",
      "id": "e99b09e9270dbe37",
      "text": "I've gotten into some hairy situations with memory management with these kinds of named\ncallbacks (specifically for database access and return of lots of results when not scoped correctly)."
    },
    {
      "type": "paragraph",
      "id": "47c46c548d1d0db6",
      "text": "Passing a function (not just a name of a function to be used with a send or\na dispatch later on) as a parameter even in your article still demonstrates\nsomething LC just can't do currently. In the article he's still using\nclosures, it's just got a name instead of being anonymous. It's still a\nclosure. LC has ways to accomplish similar things by passing names of\nfunctions and using dispatch, but I think it's not exactly the same.\nClosures are part of the reason node.js works the way it does and closures\nare one of the pirmary reasons javascript was chosen for node. It's\ncertainly possible to do async without them, but closures are what makes it\neasy and kind of a fundamental principle to working in node.js."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Why Closures Are Useful",
        "story": []
      },
      "date": 1428485813066
    },
    {
      "item": {
        "type": "factory",
        "id": "b11610b351814e2d"
      },
      "id": "b11610b351814e2d",
      "type": "add",
      "date": 1428485814617
    },
    {
      "type": "edit",
      "id": "b11610b351814e2d",
      "item": {
        "type": "paragraph",
        "id": "b11610b351814e2d",
        "text": "As for anonymous callbacks, I totally agree. "
      },
      "date": 1428485845081
    },
    {
      "type": "add",
      "id": "6eb9830802386f31",
      "item": {
        "type": "paragraph",
        "id": "6eb9830802386f31",
        "text": "Most early Node development had to overcome the callback hell that these patterns introduce. However,\nalmost all of the nodejs projects and libraries I've worked with leveraged them heavily or exclusively. "
      },
      "after": "b11610b351814e2d",
      "date": 1428485852633
    },
    {
      "type": "add",
      "id": "0d637b0041ef87a5",
      "item": {
        "type": "paragraph",
        "id": "0d637b0041ef87a5",
        "text": "Promsies seem to have become the standard way\nof dealing with the callback hell that node was so famous for for a long time. "
      },
      "after": "6eb9830802386f31",
      "date": 1428485861398
    },
    {
      "type": "add",
      "id": "2a0ec25f373ff0f5",
      "item": {
        "type": "paragraph",
        "id": "2a0ec25f373ff0f5",
        "text": "Why does node use anonymous functions over the method you linked to in the article? Anonymous functions are marked for [[Garbage Collection]] immediately after being returned. All other functions at the global scope\nrun the risk of needlessly using memory after they run. I've gotten into some hairy situations with memory management with these kinds of named\ncallbacks (specifically for database access and return of lots of results when not scoped correctly)."
      },
      "after": "0d637b0041ef87a5",
      "date": 1428485889716
    },
    {
      "type": "add",
      "id": "47c46c548d1d0db6",
      "item": {
        "type": "paragraph",
        "id": "47c46c548d1d0db6",
        "text": "Passing a function (not just a name of a function to be used with a send or\na dispatch later on) as a parameter even in your article still demonstrates\nsomething LC just can't do currently. In the article he's still using\nclosures, it's just got a name instead of being anonymous. It's still a\nclosure. LC has ways to accomplish similar things by passing names of\nfunctions and using dispatch, but I think it's not exactly the same.\nClosures are part of the reason node.js works the way it does and closures\nare one of the pirmary reasons javascript was chosen for node. It's\ncertainly possible to do async without them, but closures are what makes it\neasy and kind of a fundamental principle to working in node.js."
      },
      "after": "2a0ec25f373ff0f5",
      "date": 1428485892959
    },
    {
      "type": "edit",
      "id": "2a0ec25f373ff0f5",
      "item": {
        "type": "paragraph",
        "id": "2a0ec25f373ff0f5",
        "text": "Why does node use anonymous functions over the method you linked to in the article? Anonymous functions are marked for [[Garbage Collection]] immediately after being returned. All other functions at the global scope\nrun the risk of needlessly using memory after they run. "
      },
      "date": 1428485895674
    },
    {
      "type": "add",
      "id": "e99b09e9270dbe37",
      "item": {
        "type": "paragraph",
        "id": "e99b09e9270dbe37",
        "text": "I've gotten into some hairy situations with memory management with these kinds of named\ncallbacks (specifically for database access and return of lots of results when not scoped correctly)."
      },
      "after": "2a0ec25f373ff0f5",
      "date": 1428485903000
    },
    {
      "type": "edit",
      "id": "6eb9830802386f31",
      "item": {
        "type": "paragraph",
        "id": "6eb9830802386f31",
        "text": "Most early Node development had to overcome the callback hell that these patterns introduce. However,\nalmost all of the [[NodeJS]] projects and libraries I've worked with leveraged them heavily or exclusively. "
      },
      "date": 1428485911920
    },
    {
      "type": "edit",
      "id": "2a0ec25f373ff0f5",
      "item": {
        "type": "paragraph",
        "id": "2a0ec25f373ff0f5",
        "text": "Why does node use anonymous functions over the method you linked to in the article? - [http://toddmotto.com/avoiding-anonymous-javascript-functions/ fas]"
      },
      "date": 1428486220453
    },
    {
      "type": "add",
      "id": "86f7ba9e1d9ddea1",
      "item": {
        "type": "paragraph",
        "id": "86f7ba9e1d9ddea1",
        "text": "Anonymous functions are marked for [[Garbage Collection]] immediately after being returned. All other functions at the global scope\nrun the risk of needlessly using memory after they run. "
      },
      "after": "2a0ec25f373ff0f5",
      "date": 1428486224481
    },
    {
      "type": "edit",
      "id": "2a0ec25f373ff0f5",
      "item": {
        "type": "paragraph",
        "id": "2a0ec25f373ff0f5",
        "text": "Why does node use anonymous functions over the method you linked to in the article? - [http://toddmotto.com/avoiding-anonymous-javascript-functions/ toddmotto.com]"
      },
      "date": 1428486233824
    }
  ]
}