{
  "title": "Federated Microservice",
  "story": [
    {
      "type": "paragraph",
      "id": "90dc137eeb6cbb69",
      "text": "Here we explore how we might implement a [[microservice]] architecture in a federated way."
    },
    {
      "type": "markdown",
      "id": "373a8313a3bcf31e",
      "text": "# Round Robin DNS"
    },
    {
      "type": "paragraph",
      "id": "76ea6d422ab689d6",
      "text": "A first thought is that we could use [[round-robin dns]] as an easy initial implementation."
    },
    {
      "type": "paragraph",
      "id": "5d94722a3ec5b604320e4e080bd96e08",
      "text": "In its simplest implementation, Round-robin DNS works by responding to DNS requests not only with a single potential IP address, but with one out of a list of potential IP addresses corresponding to several servers that host identical services. "
    },
    {
      "type": "paragraph",
      "id": "3c253c5e072f6b02909ca36818cb2a7c",
      "text": "Although easy to implement, round robin DNS has problematic drawbacks, such as those arising from record caching in the DNS hierarchy itself, as well as client-side address caching and reuse, the combination of which can be difficult to manage.  "
    },
    {
      "type": "paragraph",
      "id": "1d380f351684eb8c",
      "text": "Round robin DNS should not solely be relied upon for service availability. If a service at one of the addresses in the list fails, the DNS will continue to hand out that address and clients will still attempt to reach the inoperable service."
    },
    {
      "type": "markdown",
      "id": "0c476e791645548a",
      "text": "# Implementation"
    },
    {
      "type": "paragraph",
      "id": "d6bc0ca892bf7508",
      "text": "If we assign a single microservice which is designed to simply rotate DNS setting for a domain (passed as a parameter to that service)."
    },
    {
      "type": "paragraph",
      "id": "b5fe30f0a96fb008",
      "text": "After a n calls for example to a micorservice \"echo\" we can simply call the [[Robin Microservice]] to change the DNS settings for the rest API route to the \"echo\" microservice."
    },
    {
      "type": "paragraph",
      "id": "353a1f19513c7dd7",
      "text": "We can then have another [[Round Microservice]] whose job it is to rotate a list of functioning IP addresses for a given microservice. The [[Round Microservice]] would ping each of the services in it's list for a given microservice, and see if they are online and functioning. "
    },
    {
      "type": "paragraph",
      "id": "5f920e1e74a52655",
      "text": "It could also accept calls to add or delete items to the list (baisc [[CRUD]] operations), and serve as a framework for regularly and rondomly testing the microservices on offer. "
    },
    {
      "type": "paragraph",
      "id": "a3dc90b390186939",
      "text": "Given that we already have a full API for DNS servers on both [[Digital Ocean]] and [[Dynadot]], creating the [[Round-robin Microservices]] would not be difficult."
    },
    {
      "type": "markdown",
      "id": "5af5cffc3f255689",
      "text": "# Alternative implementations"
    },
    {
      "type": "paragraph",
      "id": "99b3660a6a95deba",
      "text": "We could simply maintain lists of available services in wiki. The wiki client itself can then choose a round-robin IP address for the [[transporter]] from a list that either it itself stores (in it's markup} or that if fetches from a [[Wiki JSON Object]]."
    },
    {
      "type": "paragraph",
      "id": "41e183a3e1cc43d0",
      "text": "The latter has the advantage in that is comes with it's own [[RESTful]] service that would allow server side round robin rotation of the ordered JSON using the same sort of mechanism as above."
    }
  ],
  "journal": [
    {
      "type": "fork",
      "date": 1511366021281
    },
    {
      "item": {
        "type": "factory",
        "id": "90dc137eeb6cbb69"
      },
      "id": "90dc137eeb6cbb69",
      "type": "add",
      "date": 1511366027452
    },
    {
      "type": "edit",
      "id": "90dc137eeb6cbb69",
      "item": {
        "type": "paragraph",
        "id": "90dc137eeb6cbb69",
        "text": "Here we explore how we might implement a [[microservice]] architecture in a federated way."
      },
      "date": 1511367214574
    },
    {
      "type": "add",
      "id": "373a8313a3bcf31e",
      "item": {
        "type": "paragraph",
        "id": "373a8313a3bcf31e",
        "text": "# Round Robin DNS"
      },
      "after": "90dc137eeb6cbb69",
      "date": 1511367279662
    },
    {
      "type": "fork",
      "site": "transport.fedwiki.org",
      "date": 1511367339325
    },
    {
      "type": "edit",
      "id": "373a8313a3bcf31e",
      "item": {
        "type": "markdown",
        "id": "373a8313a3bcf31e",
        "text": "# Round Robin DNS"
      },
      "date": 1511367340803
    },
    {
      "item": {
        "type": "factory",
        "id": "76ea6d422ab689d6"
      },
      "id": "76ea6d422ab689d6",
      "type": "add",
      "after": "373a8313a3bcf31e",
      "date": 1511367343875
    },
    {
      "type": "edit",
      "id": "76ea6d422ab689d6",
      "item": {
        "type": "paragraph",
        "id": "76ea6d422ab689d6",
        "text": "A first thought is that we could use [[round-robin dns]] as an easy initial implementation."
      },
      "date": 1511367384274
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5d94722a3ec5b604320e4e080bd96e08",
        "text": "In its simplest implementation, Round-robin DNS works by responding to DNS requests not only with a single potential IP address, but with one out of a list of potential IP addresses corresponding to several servers that host identical services. "
      },
      "after": "76ea6d422ab689d6",
      "id": "5d94722a3ec5b604320e4e080bd96e08",
      "date": 1511367400874
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3c253c5e072f6b02909ca36818cb2a7c",
        "text": "Although easy to implement, round robin DNS has problematic drawbacks, such as those arising from record caching in the DNS hierarchy itself, as well as client-side address caching and reuse, the combination of which can be difficult to manage.  Round robin DNS should not solely be relied upon for service availability. If a service at one of the addresses in the list fails, the DNS will continue to hand out that address and clients will still attempt to reach the inoperable service."
      },
      "after": "5d94722a3ec5b604320e4e080bd96e08",
      "id": "3c253c5e072f6b02909ca36818cb2a7c",
      "date": 1511367455383
    },
    {
      "type": "edit",
      "id": "3c253c5e072f6b02909ca36818cb2a7c",
      "item": {
        "type": "paragraph",
        "id": "3c253c5e072f6b02909ca36818cb2a7c",
        "text": "Although easy to implement, round robin DNS has problematic drawbacks, such as those arising from record caching in the DNS hierarchy itself, as well as client-side address caching and reuse, the combination of which can be difficult to manage.  "
      },
      "date": 1511367504732
    },
    {
      "type": "add",
      "id": "1d380f351684eb8c",
      "item": {
        "type": "paragraph",
        "id": "1d380f351684eb8c",
        "text": "Round robin DNS should not solely be relied upon for service availability. If a service at one of the addresses in the list fails, the DNS will continue to hand out that address and clients will still attempt to reach the inoperable service."
      },
      "after": "3c253c5e072f6b02909ca36818cb2a7c",
      "date": 1511367505492
    },
    {
      "item": {
        "type": "factory",
        "id": "0c476e791645548a"
      },
      "id": "0c476e791645548a",
      "type": "add",
      "after": "1d380f351684eb8c",
      "date": 1511367558073
    },
    {
      "type": "edit",
      "id": "0c476e791645548a",
      "item": {
        "type": "markdown",
        "id": "0c476e791645548a",
        "text": "# Implementation"
      },
      "date": 1511367571688
    },
    {
      "item": {
        "type": "factory",
        "id": "d6bc0ca892bf7508"
      },
      "id": "d6bc0ca892bf7508",
      "type": "add",
      "after": "0c476e791645548a",
      "date": 1511367573123
    },
    {
      "type": "edit",
      "id": "d6bc0ca892bf7508",
      "item": {
        "type": "paragraph",
        "id": "d6bc0ca892bf7508",
        "text": "If we assign a single microservice which is designed to simply rotate DNS setting for a domain (passed as a parameter to that service)."
      },
      "date": 1511367746255
    },
    {
      "type": "add",
      "id": "b5fe30f0a96fb008",
      "item": {
        "type": "paragraph",
        "id": "b5fe30f0a96fb008",
        "text": "After a n calls for example to a micorservice \"echo\" we can simply call the [[Robin Micorservice]] to change the DNS settings for the rest API route to the \"echo\" microservice."
      },
      "after": "d6bc0ca892bf7508",
      "date": 1511367853992
    },
    {
      "type": "add",
      "id": "353a1f19513c7dd7",
      "item": {
        "type": "paragraph",
        "id": "353a1f19513c7dd7",
        "text": "We can then have another [[Round Microservice]] whose job it is to rotate a list of functioning IP addresses for a given microservice. The [[Round Microservice]] would ping each of the services in it's list for a given microservice, and see if they are online and functioning. It could also accept calls to add or delete items to the list (baisc [[CRUD]] operations), and serve as a framework for regularly and rondomly testing the microservices on offer. "
      },
      "after": "b5fe30f0a96fb008",
      "date": 1511368050706
    },
    {
      "type": "edit",
      "id": "353a1f19513c7dd7",
      "item": {
        "type": "paragraph",
        "id": "353a1f19513c7dd7",
        "text": "We can then have another [[Round Microservice]] whose job it is to rotate a list of functioning IP addresses for a given microservice. The [[Round Microservice]] would ping each of the services in it's list for a given microservice, and see if they are online and functioning. "
      },
      "date": 1511368058611
    },
    {
      "type": "add",
      "id": "5f920e1e74a52655",
      "item": {
        "type": "paragraph",
        "id": "5f920e1e74a52655",
        "text": "It could also accept calls to add or delete items to the list (baisc [[CRUD]] operations), and serve as a framework for regularly and rondomly testing the microservices on offer. "
      },
      "after": "353a1f19513c7dd7",
      "date": 1511368059137
    },
    {
      "item": {
        "type": "factory",
        "id": "a3dc90b390186939"
      },
      "id": "a3dc90b390186939",
      "type": "add",
      "after": "5f920e1e74a52655",
      "date": 1511368100453
    },
    {
      "type": "edit",
      "id": "a3dc90b390186939",
      "item": {
        "type": "paragraph",
        "id": "a3dc90b390186939",
        "text": "Given that we already have a full API for DNS servers on both [[Digital Ocean]] and [[Dynadot]], creating the [[Round-robin Microservices]] would not be difficult."
      },
      "date": 1511368175183
    },
    {
      "item": {
        "type": "factory",
        "id": "5af5cffc3f255689"
      },
      "id": "5af5cffc3f255689",
      "type": "add",
      "after": "a3dc90b390186939",
      "date": 1511368185577
    },
    {
      "item": {
        "type": "factory",
        "id": "99b3660a6a95deba"
      },
      "id": "99b3660a6a95deba",
      "type": "add",
      "after": "5af5cffc3f255689",
      "date": 1511368206421
    },
    {
      "type": "edit",
      "id": "5af5cffc3f255689",
      "item": {
        "type": "markdown",
        "id": "5af5cffc3f255689",
        "text": "# Alternative implementations"
      },
      "date": 1511368207581
    },
    {
      "type": "edit",
      "id": "99b3660a6a95deba",
      "item": {
        "type": "paragraph",
        "id": "99b3660a6a95deba",
        "text": "We could simply maintain lists of available services in wiki. The wiki client itself can then choose a round-robin IP address for the [[transporter]] from a list that either it itself stores (in it's markup} or that if fetches from a [[Wiki JSON Object]]"
      },
      "date": 1511368329876
    },
    {
      "type": "edit",
      "id": "99b3660a6a95deba",
      "item": {
        "type": "paragraph",
        "id": "99b3660a6a95deba",
        "text": "We could simply maintain lists of available services in wiki. The wiki client itself can then choose a round-robin IP address for the [[transporter]] from a list that either it itself stores (in it's markup} or that if fetches from a [[Wiki JSON Object]]."
      },
      "date": 1511368336205
    },
    {
      "type": "add",
      "id": "41e183a3e1cc43d0",
      "item": {
        "type": "paragraph",
        "id": "41e183a3e1cc43d0",
        "text": "The latter has the advantage in that is comes with it's own [[RESTful]] service that would allow server side round robin rotation of the ordered JSON using the same sort of mechanism as above."
      },
      "after": "99b3660a6a95deba",
      "date": 1511368391023
    },
    {
      "type": "fork",
      "site": "c0de.academy",
      "date": 1511368402708
    },
    {
      "type": "edit",
      "id": "b5fe30f0a96fb008",
      "item": {
        "type": "paragraph",
        "id": "b5fe30f0a96fb008",
        "text": "After a n calls for example to a micorservice \"echo\" we can simply call the [[Robin Microservice]] to change the DNS settings for the rest API route to the \"echo\" microservice."
      },
      "date": 1511371539732
    }
  ]
}