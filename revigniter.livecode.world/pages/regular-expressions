{
  "title": "Regular Expressions",
  "story": [
    {
      "type": "paragraph",
      "id": "133764532a536132",
      "text": "Here we describe how yo can use regular expressions in revIgniter [[URI Routing]]."
    },
    {
      "text": "If you prefer you can use regular expressions to define your routing rules. Any valid regular expression is allowed, as are back-references up to 10 ($1 - $10).",
      "id": "c4c94f22a02cde27",
      "type": "paragraph"
    },
    {
      "text": "[[Note]]:  If you use back-references you must use the dollar syntax.",
      "id": "6b5341569b8d2e08",
      "type": "paragraph"
    },
    {
      "text": "A typical RegEx route might look something like this:",
      "id": "9352be91c1214481",
      "type": "paragraph"
    },
    {
      "text": "put \"$1/id_$2\" into gRoute[2][\"products/([a-z]+)/(\\d+)\"]",
      "id": "a55cb68cdeee57db",
      "type": "code"
    },
    {
      "text": "In the above example, a URI similar to products/shirts/123 would instead call the shirts controller and the id_123 handler.",
      "id": "ebd4ed398d204b94",
      "type": "paragraph"
    },
    {
      "text": "You can also mix and match wildcards with regular expressions.",
      "id": "bf3ec37d846ecbde",
      "type": "paragraph"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Regular Expressions",
        "story": []
      },
      "date": 1459796293677
    },
    {
      "item": {
        "type": "factory",
        "id": "133764532a536132"
      },
      "id": "133764532a536132",
      "type": "add",
      "date": 1459796300619
    },
    {
      "type": "edit",
      "id": "133764532a536132",
      "item": {
        "type": "paragraph",
        "id": "133764532a536132",
        "text": "Here we describe how yo can use regular expressions in revIgniter [[URI Routing]]."
      },
      "date": 1459796309648
    },
    {
      "type": "add",
      "item": {
        "text": "If you prefer you can use regular expressions to define your routing rules. Any valid regular expression is allowed, as are back-references up to 10 ($1 - $10).",
        "id": "c4c94f22a02cde27",
        "type": "paragraph"
      },
      "after": "133764532a536132",
      "id": "c4c94f22a02cde27",
      "date": 1459796317366
    },
    {
      "type": "add",
      "item": {
        "text": "[[Note]]:  If you use back-references you must use the dollar syntax.",
        "id": "6b5341569b8d2e08",
        "type": "paragraph"
      },
      "after": "c4c94f22a02cde27",
      "id": "6b5341569b8d2e08",
      "date": 1459796319354
    },
    {
      "type": "add",
      "item": {
        "text": "A typical RegEx route might look something like this:",
        "id": "9352be91c1214481",
        "type": "paragraph"
      },
      "after": "6b5341569b8d2e08",
      "id": "9352be91c1214481",
      "date": 1459796321178
    },
    {
      "type": "add",
      "item": {
        "text": "put \"$1/id_$2\" into gRoute[2][\"products/([a-z]+)/(\\d+)\"]",
        "id": "a55cb68cdeee57db",
        "type": "code"
      },
      "after": "9352be91c1214481",
      "id": "a55cb68cdeee57db",
      "date": 1459796324177
    },
    {
      "type": "add",
      "item": {
        "text": "In the above example, a URI similar to products/shirts/123 would instead call the shirts controller and the id_123 handler.",
        "id": "ebd4ed398d204b94",
        "type": "paragraph"
      },
      "after": "a55cb68cdeee57db",
      "id": "ebd4ed398d204b94",
      "date": 1459796326887
    },
    {
      "type": "add",
      "item": {
        "text": "You can also mix and match wildcards with regular expressions.",
        "id": "bf3ec37d846ecbde",
        "type": "paragraph"
      },
      "after": "ebd4ed398d204b94",
      "id": "bf3ec37d846ecbde",
      "date": 1459796329407
    }
  ]
}