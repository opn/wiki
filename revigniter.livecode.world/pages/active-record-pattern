{
  "title": "Active record pattern",
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Active record pattern"
      },
      "date": 1459764793576,
      "source": {
        "pageTitle": "Active record pattern",
        "pageSlug": "Active_record_pattern",
        "url": "https://en.wikipedia.org/wiki/Active_record_pattern",
        "date": 1459764793576,
        "link_dictionary": {
          "wiki_links": {
            "Criticism": {
              "section_number": 7,
              "section_level": 2,
              "dot_number": 2
            },
            "See also": {
              "section_number": 10,
              "section_level": 2,
              "dot_number": 3
            },
            "External links": {
              "section_number": 12,
              "section_level": 2,
              "dot_number": 5
            },
            "References": {
              "section_number": 11,
              "section_level": 2,
              "dot_number": 4
            },
            "Implementations": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 710781389,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1459764807287
    },
    {
      "type": "edit",
      "id": "e4155a80-a519-45d8-bd34-769bf0934d87",
      "item": {
        "type": "markdown",
        "id": "e4155a80-a519-45d8-bd34-769bf0934d87",
        "text": "# See also\n* [[Implementations]]\n* [[See also]]\n* [[References]]\n* [[External links]]"
      },
      "date": 1459764864100
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e30171e5-31fc-4b82-ae04-8085cca98326",
        "text": "Due to the coupling of database interaction and application logic when using the active record pattern, unit testing an active record object without a database becomes difficult. The negative effects on testability in the active record pattern can be minimized by using mocking ([[mock object]]) or [[dependency injection]] frameworks to substitute the real data tier with a simulated one  - [https://en.wikipedia.org/wiki/Active_record_pattern#Criticism wikipedia]"
      },
      "after": "e4155a80-a519-45d8-bd34-769bf0934d87",
      "id": "e30171e5-31fc-4b82-ae04-8085cca98326",
      "date": 1459764872824
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "f0a3a2fb-2c8b-457f-aa6c-95092e3f9c3c",
        "text": "# Single Responsibility Principle and Separation of Concerns"
      },
      "after": "e30171e5-31fc-4b82-ae04-8085cca98326",
      "id": "f0a3a2fb-2c8b-457f-aa6c-95092e3f9c3c",
      "date": 1459764875852
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "adcc3946-ce05-4997-a285-fa6cacf5a6ea",
        "text": "Another critique of the active record pattern is that, also due to the strong coupling of database interaction and application logic, an active record object does not follow the"
      },
      "after": "f0a3a2fb-2c8b-457f-aa6c-95092e3f9c3c",
      "id": "adcc3946-ce05-4997-a285-fa6cacf5a6ea",
      "date": 1459764879485
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5910eb26-0c33-46fe-8d13-d2ac69dd11e8",
        "text": "[[single responsibility principle]] and [[separation of concerns]] as opposed to [[multitier architecture]] which properly addresses these practices. Because of this, the active record pattern is best and most often employed in simple applications that are all forms-over-data with CRUD functionality, or only as one part of an architecture. Typically that part is data access and why several ORMs implement the active record pattern."
      },
      "after": "adcc3946-ce05-4997-a285-fa6cacf5a6ea",
      "id": "5910eb26-0c33-46fe-8d13-d2ac69dd11e8",
      "date": 1459764883163
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "68444504-811b-4546-923a-8ce7b73dbff6",
        "text": "# See also\n* [[Testability]]\n* [[Single Responsibility Principle and Separation of Concerns]]"
      },
      "after": "5910eb26-0c33-46fe-8d13-d2ac69dd11e8",
      "id": "68444504-811b-4546-923a-8ce7b73dbff6",
      "date": 1459764893901
    },
    {
      "type": "edit",
      "id": "e30171e5-31fc-4b82-ae04-8085cca98326",
      "item": {
        "type": "paragraph",
        "id": "e30171e5-31fc-4b82-ae04-8085cca98326",
        "text": "# Criticism"
      },
      "date": 1459764915995
    },
    {
      "type": "add",
      "id": "0b969d073a536db1",
      "item": {
        "type": "paragraph",
        "id": "0b969d073a536db1",
        "text": "Due to the coupling of database interaction and application logic when using the active record pattern, unit testing an active record object without a database becomes difficult. The negative effects on testability in the active record pattern can be minimized by using mocking ([[mock object]]) or [[dependency injection]] frameworks to substitute the real data tier with a simulated one  - [https://en.wikipedia.org/wiki/Active_record_pattern#Criticism wikipedia]"
      },
      "after": "e30171e5-31fc-4b82-ae04-8085cca98326",
      "date": 1459764917541
    },
    {
      "type": "edit",
      "id": "e30171e5-31fc-4b82-ae04-8085cca98326",
      "item": {
        "type": "markdown",
        "id": "e30171e5-31fc-4b82-ae04-8085cca98326",
        "text": "# Criticism"
      },
      "date": 1459764918776
    },
    {
      "type": "move",
      "order": [
        "2ebd4235-fdd4-4053-883b-7698969a49d4",
        "e4155a80-a519-45d8-bd34-769bf0934d87",
        "b8ebbf92-8e90-4b99-897e-6e66bfe704ba",
        "dd794c7a-d5f5-4b41-b1d7-e158093c521a",
        "e30171e5-31fc-4b82-ae04-8085cca98326",
        "0b969d073a536db1",
        "f0a3a2fb-2c8b-457f-aa6c-95092e3f9c3c",
        "adcc3946-ce05-4997-a285-fa6cacf5a6ea",
        "5910eb26-0c33-46fe-8d13-d2ac69dd11e8",
        "68444504-811b-4546-923a-8ce7b73dbff6"
      ],
      "id": "e4155a80-a519-45d8-bd34-769bf0934d87",
      "date": 1459764931638
    },
    {
      "type": "edit",
      "id": "2ebd4235-fdd4-4053-883b-7698969a49d4",
      "item": {
        "type": "paragraph",
        "id": "2ebd4235-fdd4-4053-883b-7698969a49d4",
        "text": "In software engineering, the active record pattern is an architectural pattern found in software that stores in-memory object data in relational databases. It was named by [[Martin Fowler]] in his 2003 book Patterns of Enterprise Application Architecture. "
      },
      "date": 1459764961077
    },
    {
      "type": "add",
      "id": "8f439ae08eb6df93",
      "item": {
        "type": "paragraph",
        "id": "8f439ae08eb6df93",
        "text": "The interface of an object conforming to this pattern would include functions such as Insert, Update, and Delete, plus properties that correspond more or less directly to the columns in the underlying database table - [https://en.wikipedia.org/wiki/Active_record_pattern wikipedia]"
      },
      "after": "2ebd4235-fdd4-4053-883b-7698969a49d4",
      "date": 1459764961446
    }
  ],
  "story": [
    {
      "type": "paragraph",
      "id": "2ebd4235-fdd4-4053-883b-7698969a49d4",
      "text": "In software engineering, the active record pattern is an architectural pattern found in software that stores in-memory object data in relational databases. It was named by [[Martin Fowler]] in his 2003 book Patterns of Enterprise Application Architecture. "
    },
    {
      "type": "paragraph",
      "id": "8f439ae08eb6df93",
      "text": "The interface of an object conforming to this pattern would include functions such as Insert, Update, and Delete, plus properties that correspond more or less directly to the columns in the underlying database table - [https://en.wikipedia.org/wiki/Active_record_pattern wikipedia]"
    },
    {
      "type": "markdown",
      "id": "e4155a80-a519-45d8-bd34-769bf0934d87",
      "text": "# See also\n* [[Implementations]]\n* [[See also]]\n* [[References]]\n* [[External links]]"
    },
    {
      "type": "paragraph",
      "id": "b8ebbf92-8e90-4b99-897e-6e66bfe704ba",
      "text": "The active record pattern is an approach to accessing data in a database. A database table or view is wrapped into a class. Thus, an object instance is tied to a single row in the table. After creation of an object, a new row is added to the table upon save. Any object loaded gets its information from the database. When an object is updated the corresponding row in the table is also updated. The wrapper class implements accessor methods or properties for each column in the table or view."
    },
    {
      "type": "paragraph",
      "id": "dd794c7a-d5f5-4b41-b1d7-e158093c521a",
      "text": "This pattern is commonly used by object persistence tools, and in object-relational mapping (ORM). Typically, foreign key relationships will be exposed as an object instance of the appropriate type via a property."
    },
    {
      "type": "markdown",
      "id": "e30171e5-31fc-4b82-ae04-8085cca98326",
      "text": "# Criticism"
    },
    {
      "type": "paragraph",
      "id": "0b969d073a536db1",
      "text": "Due to the coupling of database interaction and application logic when using the active record pattern, unit testing an active record object without a database becomes difficult. The negative effects on testability in the active record pattern can be minimized by using mocking ([[mock object]]) or [[dependency injection]] frameworks to substitute the real data tier with a simulated one  - [https://en.wikipedia.org/wiki/Active_record_pattern#Criticism wikipedia]"
    },
    {
      "type": "markdown",
      "id": "f0a3a2fb-2c8b-457f-aa6c-95092e3f9c3c",
      "text": "# Single Responsibility Principle and Separation of Concerns"
    },
    {
      "type": "paragraph",
      "id": "adcc3946-ce05-4997-a285-fa6cacf5a6ea",
      "text": "Another critique of the active record pattern is that, also due to the strong coupling of database interaction and application logic, an active record object does not follow the"
    },
    {
      "type": "paragraph",
      "id": "5910eb26-0c33-46fe-8d13-d2ac69dd11e8",
      "text": "[[single responsibility principle]] and [[separation of concerns]] as opposed to [[multitier architecture]] which properly addresses these practices. Because of this, the active record pattern is best and most often employed in simple applications that are all forms-over-data with CRUD functionality, or only as one part of an architecture. Typically that part is data access and why several ORMs implement the active record pattern."
    },
    {
      "type": "markdown",
      "id": "68444504-811b-4546-923a-8ce7b73dbff6",
      "text": "# See also\n* [[Testability]]\n* [[Single Responsibility Principle and Separation of Concerns]]"
    }
  ]
}