{
  "journal": [
    {
      "date": 1426949925685,
      "item": {
        "story": "",
        "title": "MLT Multimedia Framework"
      },
      "type": "create"
    },
    {
      "date": 1426949927776,
      "id": "ef7968472f90d6e1",
      "item": {
        "id": "ef7968472f90d6e1",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1426957738886,
      "id": "ef7968472f90d6e1",
      "item": {
        "id": "ef7968472f90d6e1",
        "text": "\n    Small, clean API with minimal dependencies (POSIX and C99)\n    Modular design for the addition of new components\n    Simple integration with other multimedia libraries and applications\n    Supports the authoring and manipulation (ala DOM) of time-based media including playlists, multiple tracks, filters, and transitions\n    Serialization and deserialization of authored projects\n    Doxygen-based API Documentation\n    High-level language bindings for C++, C#, Java, Lua, Perl, PHP, Python, Ruby, and TCL\n    Multi-core and GPU processing\n    Cross-platform: Linux, BSD, Mac OS X (MacPorts), Windows (MinGW)\n    Licensed under the LGPLv2.1 ",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1426958238215,
      "id": "ef7968472f90d6e1",
      "item": {
        "id": "ef7968472f90d6e1",
        "text": "MLT is written in C. ",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "after": "ef7968472f90d6e1",
      "date": 1426958286791,
      "id": "a3611c2d2873aa3b",
      "item": {
        "id": "a3611c2d2873aa3b",
        "text": "<UL><LI>    Small, clean API with minimal dependencies (POSIX and C99)</LI><LI>\n    Modular design for the addition of new components</LI><LI>\n    Simple integration with other multimedia libraries and applications</LI><LI>\n    Supports the authoring and manipulation (ala DOM) of time-based media including playlists, multiple tracks, filters, and transitions</LI><LI>\n    Serialization and deserialization of authored projects</LI></UL>\n    Doxygen-based API Documentation\n    High-level language bindings for C++, C#, Java, Lua, Perl, PHP, Python, Ruby, and TCL\n    Multi-core and GPU processing\n    Cross-platform: Linux, BSD, Mac OS X (MacPorts), Windows (MinGW)\n    Licensed under the LGPLv2.1 ",
        "type": "paragraph"
      },
      "type": "add"
    },
    {
      "date": 1426958288599,
      "id": "a3611c2d2873aa3b",
      "item": {
        "id": "a3611c2d2873aa3b",
        "text": "<UL><LI>    Small, clean API with minimal dependencies (POSIX and C99)</LI><LI>\n    Modular design for the addition of new components</LI><LI>\n    Simple integration with other multimedia libraries and applications</LI><LI>\n    Supports the authoring and manipulation (ala DOM) of time-based media including playlists, multiple tracks, filters, and transitions</LI><LI>\n    Serialization and deserialization of authored projects</LI></UL>\n    Doxygen-based API Documentation\n    High-level language bindings for C++, C#, Java, Lua, Perl, PHP, Python, Ruby, and TCL\n    Multi-core and GPU processing\n    Cross-platform: Linux, BSD, Mac OS X (MacPorts), Windows (MinGW)\n    Licensed under the LGPLv2.1 ",
        "type": "html"
      },
      "type": "edit"
    },
    {
      "date": 1426958327440,
      "id": "a3611c2d2873aa3b",
      "item": {
        "id": "a3611c2d2873aa3b",
        "text": "<UL><LI>    Small, clean API with minimal dependencies (POSIX and C99)</LI><LI>\n    Modular design for the addition of new components</LI><LI>\n    Simple integration with other multimedia libraries and applications</LI><LI>\n    Supports the authoring and manipulation (ala DOM) of time-based media including playlists, multiple tracks, filters, and transitions</LI><LI>\n    Serialization and deserialization of authored projects</LI><LI>\n    Doxygen-based API Documentation</LI><LI>\n    High-level language bindings for C++, C#, Java, Lua, Perl, PHP, Python, Ruby, and TCL</LI><LI>\n    Multi-core and GPU processing</LI><LI>\n    Cross-platform: Linux, BSD, Mac OS X (MacPorts), Windows (MinGW)</LI><LI>\n    Licensed under the LGPLv2.1</LI></UL>",
        "type": "html"
      },
      "type": "edit"
    },
    {
      "date": 1426958400135,
      "id": "a3611c2d2873aa3b",
      "item": {
        "id": "a3611c2d2873aa3b",
        "text": "<UL><LI>    Small, clean API with minimal dependencies (POSIX and C99)</LI><LI>\n    Modular design for the addition of new components</LI><LI>\n    Simple integration with other multimedia libraries and applications</LI><LI>\n    Supports the authoring and manipulation (ala DOM) of time-based media including playlists, multiple tracks, filters, and transitions</LI><LI>\n    Serialization and deserialization of authored projects</LI><LI>\n    Doxygen-based API Documentation</LI><LI>\n    High-level language bindings for C++, C#, Java, Lua, Perl, PHP, Python, Ruby, and TCL</LI><LI>\n    Multi-core and GPU processing</LI><LI>\n    Cross-platform: Linux, BSD, Mac OS X, Windows (MinGW)</LI><LI>\n    Licensed under the LGPLv2.1</LI></UL>",
        "type": "html"
      },
      "type": "edit"
    },
    {
      "after": "a3611c2d2873aa3b",
      "date": 1426958422179,
      "id": "64e4e6fb5bdb1fe3",
      "item": {
        "id": "64e4e6fb5bdb1fe3",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1426958426191,
      "id": "64e4e6fb5bdb1fe3",
      "item": {
        "id": "64e4e6fb5bdb1fe3",
        "text": "brew install mlt",
        "type": "code"
      },
      "type": "edit"
    },
    {
      "after": "64e4e6fb5bdb1fe3",
      "date": 1426958482295,
      "id": "1fcc249f359431aa",
      "item": {
        "id": "1fcc249f359431aa",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1426958492376,
      "id": "1fcc249f359431aa",
      "item": {
        "id": "1fcc249f359431aa",
        "text": "MLT is an open source multimedia framework, designed and developed for television broadcasting. It provides a toolkit for broadcasters, video editors, media players, transcoders, web streamers and many more types of applications. The functionality of the system is provided via an assortment of ready to use tools, XML authoring components, and an extensible plug-in based API - [dfas dfsa]",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1426958530275,
      "id": "1fcc249f359431aa",
      "item": {
        "id": "1fcc249f359431aa",
        "text": "MLT is an open source multimedia framework, designed and developed for television broadcasting. It provides a toolkit for broadcasters, video editors, media players, transcoders, web streamers and many more types of applications. The functionality of the system is provided via an assortment of ready to use tools, XML authoring components, and an extensible plug-in based API - [http://www.mltframework.org mltframework.org]",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1426958533182,
      "id": "1fcc249f359431aa",
      "order": [
        "1fcc249f359431aa",
        "ef7968472f90d6e1",
        "a3611c2d2873aa3b",
        "64e4e6fb5bdb1fe3"
      ],
      "type": "move"
    },
    {
      "date": 1426958559743,
      "id": "1fcc249f359431aa",
      "item": {
        "id": "1fcc249f359431aa",
        "text": "MLT is an open source multimedia framework, designed and developed for television broadcasting. It provides a toolkit for broadcasters, video editors, media players, transcoders, web streamers and many more types of applications - [http://www.mltframework.org mltframework.org]",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "after": "1fcc249f359431aa",
      "date": 1426958563318,
      "id": "5316e8ea495afbb1",
      "item": {
        "id": "5316e8ea495afbb1",
        "text": "The functionality of the system is provided via an assortment of ready to use tools, XML authoring components, and an extensible plug-in based API.",
        "type": "paragraph"
      },
      "type": "add"
    },
    {
      "date": 1427128878975,
      "site": "livecode.viral.academy",
      "type": "fork"
    },
    {
      "item": {
        "type": "factory",
        "id": "03b868a93f6d59ce"
      },
      "id": "03b868a93f6d59ce",
      "type": "add",
      "after": "64e4e6fb5bdb1fe3",
      "date": 1509052292667
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "5316e8ea495afbb1",
        "ef7968472f90d6e1",
        "a3611c2d2873aa3b",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3"
      ],
      "id": "64e4e6fb5bdb1fe3",
      "date": 1509052296233
    },
    {
      "type": "edit",
      "id": "03b868a93f6d59ce",
      "item": {
        "type": "markdown",
        "id": "03b868a93f6d59ce",
        "text": "#Installation"
      },
      "date": 1509052302012
    },
    {
      "item": {
        "type": "factory",
        "id": "170a619ed02e50f2"
      },
      "id": "170a619ed02e50f2",
      "type": "add",
      "after": "64e4e6fb5bdb1fe3",
      "date": 1509052305270
    },
    {
      "type": "edit",
      "id": "170a619ed02e50f2",
      "item": {
        "type": "markdown",
        "id": "170a619ed02e50f2",
        "text": "# See also\n\n- [[Shotcut]]"
      },
      "date": 1509052319453
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "03b868a93f6d59ce",
        "5316e8ea495afbb1",
        "ef7968472f90d6e1",
        "a3611c2d2873aa3b",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "03b868a93f6d59ce",
      "date": 1509052327474
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "5316e8ea495afbb1",
        "ef7968472f90d6e1",
        "a3611c2d2873aa3b",
        "170a619ed02e50f2"
      ],
      "id": "64e4e6fb5bdb1fe3",
      "date": 1509052329481
    },
    {
      "type": "edit",
      "id": "5316e8ea495afbb1",
      "item": {
        "id": "5316e8ea495afbb1",
        "text": "# Functionality",
        "type": "paragraph"
      },
      "date": 1509052344311
    },
    {
      "type": "add",
      "id": "e31473ce65f69274",
      "item": {
        "type": "paragraph",
        "id": "e31473ce65f69274",
        "text": "The functionality of the system is provided via an assortment of ready to use tools, XML authoring components, and an extensible plug-in based API."
      },
      "after": "5316e8ea495afbb1",
      "date": 1509052344694
    },
    {
      "type": "edit",
      "id": "5316e8ea495afbb1",
      "item": {
        "id": "5316e8ea495afbb1",
        "text": "# Functionality",
        "type": "markdown"
      },
      "date": 1509052345761
    },
    {
      "type": "fork",
      "site": "video.outlandish.academy",
      "date": 1509487371216
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "64e4e6fb5bdb1fe3",
        "5316e8ea495afbb1",
        "e31473ce65f69274",
        "ef7968472f90d6e1",
        "a3611c2d2873aa3b",
        "03b868a93f6d59ce",
        "170a619ed02e50f2"
      ],
      "id": "03b868a93f6d59ce",
      "date": 1509495531890
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "5316e8ea495afbb1",
        "e31473ce65f69274",
        "ef7968472f90d6e1",
        "a3611c2d2873aa3b",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "64e4e6fb5bdb1fe3",
      "date": 1509495535157
    },
    {
      "type": "remove",
      "id": "a3611c2d2873aa3b",
      "date": 1509495568813
    },
    {
      "item": {
        "type": "factory",
        "id": "0d419719a4e24dc2"
      },
      "id": "0d419719a4e24dc2",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509495570353
    },
    {
      "type": "edit",
      "id": "0d419719a4e24dc2",
      "item": {
        "type": "markdown",
        "id": "0d419719a4e24dc2",
        "text": "<UL><LI>    Small, clean API with minimal dependencies (POSIX and C99)</LI><LI>\n    Modular design for the addition of new components</LI><LI>\n    Simple integration with other multimedia libraries and applications</LI><LI>\n    Supports the authoring and manipulation (ala DOM) of time-based media including playlists, multiple tracks, filters, and transitions</LI><LI>\n    Serialization and deserialization of authored projects</LI><LI>\n    Doxygen-based API Documentation</LI><LI>\n    High-level language bindings for C++, C#, Java, Lua, Perl, PHP, Python, Ruby, and TCL</LI><LI>\n    Multi-core and GPU processing</LI><LI>\n    Cross-platform: Linux, BSD, Mac OS X, Windows (MinGW)</LI><LI>\n    Licensed under the LGPLv2.1</LI></UL>\n\nIntegration with many libraries for multimedia including\nFFmpeg for audio/video decoding and encoding\nswfdec Flash decoder\nWebVfx for HTML5-based graphics/animation generation\nGTK+ and Qt for image loading and text rendering\nLADSPA audio plugins\nSoX audio effects\nlibsamplerate audio resampler\nJACK audio routing\nfrei0r video plugins\nSDL for desktop audio/video output\nSupports nearly all audio and video formats and codecs that FFmpeg does for both input and encoding - many with frame-accurate seeking\nSupports image sequences in any format that GDK and QImage supports including SVG and others with alpha channels\nComprehensive and optimized suite of video and audio effects including image scaling, alpha-compositing, deinterlacing, masking, motion-tracking, audio mixing, audio gain, and wipe transitions - in addition to services provided through the above libraries\nA selection of output targets/profiles including HD\nAn XML authoring schema designed to leverage the full capabilities of the system\nYAML-based metadata and schema for documentation of modules, their services, and parameters\nLive IP streaming output via FFmpeg\nHD SDI with embedded audio and HDMI input and output is available for Linux using Blackmagick Design cards and the MLT open source “decklink” module. Also, SDI output supports keying (alpha composite MLT output over live SDI input)."
      },
      "date": 1509495573800
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "5316e8ea495afbb1",
        "e31473ce65f69274",
        "ef7968472f90d6e1",
        "0d419719a4e24dc2",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "0d419719a4e24dc2",
      "date": 1509495576950
    },
    {
      "type": "edit",
      "id": "0d419719a4e24dc2",
      "item": {
        "type": "markdown",
        "id": "0d419719a4e24dc2",
        "text": "- High-level language bindings for C++, C#, Java, Lua, Perl, PHP, Python, Ruby, and TCL</LI><LI>\n- Multi-core and GPU processing</LI><LI>\n- Cross-platform: Linux, BSD, Mac OS X, Windows (MinGW)"
      },
      "date": 1509495635713
    },
    {
      "type": "edit",
      "id": "0d419719a4e24dc2",
      "item": {
        "type": "markdown",
        "id": "0d419719a4e24dc2",
        "text": "- Language bindings for C++, C#, Java, Lua, Perl, PHP, Python, Ruby, and TCL</LI><LI>\n- Multi-core and GPU processing</LI><LI>\n- Cross-platform: Linux, BSD, Mac OS X, Windows (MinGW)"
      },
      "date": 1509495644459
    },
    {
      "item": {
        "type": "factory",
        "id": "808aba9833945020"
      },
      "id": "808aba9833945020",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509495646222
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "5316e8ea495afbb1",
        "e31473ce65f69274",
        "ef7968472f90d6e1",
        "0d419719a4e24dc2",
        "808aba9833945020",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "808aba9833945020",
      "date": 1509495648490
    },
    {
      "type": "edit",
      "id": "808aba9833945020",
      "item": {
        "type": "markdown",
        "id": "808aba9833945020",
        "text": "Integration with many libraries for multimedia including:\n\n- [[FFmpeg]]\n- [[WebVfx]]\n- LADSPA audio plugins\n- [[SoX]] audio effects\n- [[JACK]] audio routing\n- [[frei0r]] video plugins\n- An XML authoring schema designed to leverage the full capabilities of the system\n- YAML-based metadata and schema for documentation of modules, their services, and parameters\n- Live IP streaming output via FFmpeg"
      },
      "date": 1509495779378
    },
    {
      "type": "add",
      "id": "30fcae60e4da10dc",
      "item": {
        "type": "paragraph",
        "id": "30fcae60e4da10dc",
        "text": "Comprehensive and optimized suite of video and audio effects including:- image scaling, alpha-compositing, deinterlacing, masking, motion-tracking, audio mixing, audio gain, and wipe transitions - in addition to services provided through the above libraries\n"
      },
      "after": "1fcc249f359431aa",
      "date": 1509495808668
    },
    {
      "type": "edit",
      "id": "30fcae60e4da10dc",
      "item": {
        "type": "markdown",
        "id": "30fcae60e4da10dc",
        "text": "Comprehensive and optimized suite of video and audio effects including:- image scaling, alpha-compositing, deinterlacing, masking, motion-tracking, audio mixing, audio gain, and wipe transitions - in addition to services provided through the above libraries\n"
      },
      "date": 1509495809533
    },
    {
      "type": "edit",
      "id": "30fcae60e4da10dc",
      "item": {
        "type": "markdown",
        "id": "30fcae60e4da10dc",
        "text": "Comprehensive and optimized suite of video and audio effects including:\n\n- image scaling\n- alpha-compositing\n- deinterlacing\n- masking\n- motion-tracking\n- audio mixing\n- audio gain, and wipe transitions"
      },
      "date": 1509495848197
    },
    {
      "type": "edit",
      "id": "170a619ed02e50f2",
      "item": {
        "type": "markdown",
        "id": "170a619ed02e50f2",
        "text": "# See also\n\n- [[Media Lovin' Toolkit]]\n- [[Shotcut]]"
      },
      "date": 1509497837129
    },
    {
      "type": "remove",
      "id": "30fcae60e4da10dc",
      "date": 1509530919908
    },
    {
      "type": "remove",
      "id": "5316e8ea495afbb1",
      "date": 1509530924459
    },
    {
      "type": "remove",
      "id": "0d419719a4e24dc2",
      "date": 1509530930386
    },
    {
      "type": "remove",
      "id": "808aba9833945020",
      "date": 1509530935322
    },
    {
      "type": "remove",
      "id": "ef7968472f90d6e1",
      "date": 1509531008659
    },
    {
      "type": "remove",
      "id": "e31473ce65f69274",
      "date": 1509531020110
    },
    {
      "type": "edit",
      "id": "1fcc249f359431aa",
      "item": {
        "id": "1fcc249f359431aa",
        "text": "[[Media Lovin' Toolkit]] (MLT) is an open source multimedia framework, designed and developed for television broadcasting. It provides a toolkit for broadcasters, video editors, media players, transcoders, web streamers and many more types of applications - [http://www.mltframework.org mltframework.org]",
        "type": "paragraph"
      },
      "date": 1509531038976
    },
    {
      "item": {
        "type": "factory",
        "id": "e8d593df0ba719db"
      },
      "id": "e8d593df0ba719db",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509531046651
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "e8d593df0ba719db",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "e8d593df0ba719db",
      "date": 1509531048252
    },
    {
      "item": {
        "type": "factory",
        "id": "fabaf57fb41b3cc7"
      },
      "id": "fabaf57fb41b3cc7",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509531049810
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "e8d593df0ba719db",
        "fabaf57fb41b3cc7",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "fabaf57fb41b3cc7",
      "date": 1509531051344
    },
    {
      "type": "edit",
      "id": "fabaf57fb41b3cc7",
      "item": {
        "type": "code",
        "id": "fabaf57fb41b3cc7",
        "text": "melt -blank 0 avformat:basevideo.flv out=3930 -move in=0 out=3930 -track -blank 630 avformat:overlayvideo.flv out=3060 -move in=0 out=2430 -filter chroma key=#00FF00 variance=0.38 -transition composite geometry=\"0%,0%:100%x100%\" halign=center valign=center out=3930 a_track=0 b_track=1 -transition composite geometry=\"0%,0%:100%x100%\" halign=left valign=top out=3060 a_track=0 b_track=2 -track \"+Sample Text.txt\" in=0 out=1440 -transition composite titles=1 start=\"299%,70%:999%x20%\" in=45 out=1440 a_track=0 b_track=2 -consumer avformat:testvideo.flv frequency=22050 fullscreen=1 fps=30 -profile dvd_ntsc"
      },
      "date": 1509531064605
    },
    {
      "type": "edit",
      "id": "e8d593df0ba719db",
      "item": {
        "type": "markdown",
        "id": "e8d593df0ba719db",
        "text": "# Add text as overlay track"
      },
      "date": 1509531104689
    },
    {
      "item": {
        "type": "factory",
        "id": "1c76b8041da3955c"
      },
      "id": "1c76b8041da3955c",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509531113846
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "e8d593df0ba719db",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "1c76b8041da3955c",
      "date": 1509531115545
    },
    {
      "type": "edit",
      "id": "1c76b8041da3955c",
      "item": {
        "type": "paragraph",
        "id": "1c76b8041da3955c",
        "text": "- [https://animeshnanda.blogspot.co.uk/2010/11/how-to-add-text-as-overlay-track-using.html blogspot]"
      },
      "date": 1509531135261
    },
    {
      "type": "edit",
      "id": "1c76b8041da3955c",
      "item": {
        "type": "paragraph",
        "id": "1c76b8041da3955c",
        "text": "You can add text as an overlay track using mtl - see example below - [https://animeshnanda.blogspot.co.uk/2010/11/how-to-add-text-as-overlay-track-using.html blogspot]"
      },
      "date": 1509531173623
    },
    {
      "item": {
        "type": "factory",
        "id": "cbf51335bf9da9eb"
      },
      "id": "cbf51335bf9da9eb",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509531242052
    },
    {
      "type": "edit",
      "id": "e8d593df0ba719db",
      "item": {
        "type": "markdown",
        "id": "e8d593df0ba719db",
        "text": "# Picture-in-picture"
      },
      "date": 1509531243296
    },
    {
      "item": {
        "type": "factory",
        "id": "a9933849078d5d95"
      },
      "id": "a9933849078d5d95",
      "type": "add",
      "after": "cbf51335bf9da9eb",
      "date": 1509531249530
    },
    {
      "type": "edit",
      "id": "cbf51335bf9da9eb",
      "item": {
        "type": "paragraph",
        "id": "cbf51335bf9da9eb",
        "text": "Use the watermark filter (easier than using multiple tracks and\ncomposite transition).\n\nSee the demo directory in MLT if you have not already, specifically,\n'mlt_bouncy'. That is an animated pip. For static, replace all of the\ncomposite.* properties with a single composite.geometry=\"x,y:wxh\".\nAlso, I suggest adding composite.progressive=1."
      },
      "date": 1509531250650
    },
    {
      "type": "edit",
      "id": "a9933849078d5d95",
      "item": {
        "type": "code",
        "id": "a9933849078d5d95",
        "text": "melt A.mp4 -filter watermark:B.mp4 composite.geometry=10%,10%,20%,20%\ncomposite.progressive=1"
      },
      "date": 1509531251668
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "e8d593df0ba719db",
        "cbf51335bf9da9eb",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2",
        "a9933849078d5d95"
      ],
      "id": "cbf51335bf9da9eb",
      "date": 1509531259868
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "e8d593df0ba719db",
        "cbf51335bf9da9eb",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "a9933849078d5d95",
      "date": 1509531265904
    },
    {
      "type": "edit",
      "id": "cbf51335bf9da9eb",
      "item": {
        "type": "paragraph",
        "id": "cbf51335bf9da9eb",
        "text": "You can use the watermark filter (easier than using multiple tracks and composite transition) to create a PIP effect - see the demo directory in MLT if you have not already, specifically,\n'mlt_bouncy'. That is an animated pip. For static, replace all of the\ncomposite.* properties with a single composite.geometry=\"x,y:wxh\". Also, I suggest adding composite.progressive=1."
      },
      "date": 1509531329488
    },
    {
      "type": "edit",
      "id": "cbf51335bf9da9eb",
      "item": {
        "type": "paragraph",
        "id": "cbf51335bf9da9eb",
        "text": "You can use the watermark filter (easier than using multiple tracks and composite transition) to create a PIP effect - see the demo directory in MLT if you have not already, specifically 'mlt_bouncy'. "
      },
      "date": 1509531370596
    },
    {
      "type": "add",
      "id": "d1b17c73d513b12f",
      "item": {
        "type": "paragraph",
        "id": "d1b17c73d513b12f",
        "text": "That is an animated pip. For static, replace all of the\ncomposite.* properties with a single composite.geometry=\"x,y:wxh\". Also, I suggest adding composite.progressive=1."
      },
      "after": "cbf51335bf9da9eb",
      "date": 1509531384378
    },
    {
      "type": "edit",
      "id": "cbf51335bf9da9eb",
      "item": {
        "type": "paragraph",
        "id": "cbf51335bf9da9eb",
        "text": "You can use the watermark filter to create a PIP effect - see the demo directory in MLT if you have not already, specifically 'mlt_bouncy'. "
      },
      "date": 1509531392748
    },
    {
      "type": "edit",
      "id": "1c76b8041da3955c",
      "item": {
        "type": "paragraph",
        "id": "1c76b8041da3955c",
        "text": "You can add text as an overlay track using mtl. Using multiple tracks and composite transition is a bit more complex than using the watermark filter. For syntax see example below - [https://animeshnanda.blogspot.co.uk/2010/11/how-to-add-text-as-overlay-track-using.html blogspot]"
      },
      "date": 1509531463903
    },
    {
      "type": "edit",
      "id": "d1b17c73d513b12f",
      "item": {
        "type": "paragraph",
        "id": "d1b17c73d513b12f",
        "text": "That is an animated pip. For static, replace all of the\ncomposite.* properties with a single composite.geometry=\"x,y:wxh\". Also, I suggest adding composite.progressive=1 - [https://sourceforge.net/p/mlt/mailman/message/25129775/ sourceforge]"
      },
      "date": 1509531506522
    },
    {
      "item": {
        "type": "factory",
        "id": "af1f49bad0104b33"
      },
      "id": "af1f49bad0104b33",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509531531940
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "af1f49bad0104b33",
        "e8d593df0ba719db",
        "cbf51335bf9da9eb",
        "d1b17c73d513b12f",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "af1f49bad0104b33",
      "date": 1509531534179
    },
    {
      "type": "edit",
      "id": "af1f49bad0104b33",
      "item": {
        "type": "markdown",
        "id": "af1f49bad0104b33",
        "text": "- MLT Documentation - [https://www.mltframework.org/docs/ mltframework.org]"
      },
      "date": 1509531550341
    },
    {
      "type": "add",
      "id": "e2b01e8f56cddef2",
      "item": {
        "type": "paragraph",
        "id": "e2b01e8f56cddef2",
        "text": "# Melt"
      },
      "after": "1fcc249f359431aa",
      "date": 1509531602672
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "af1f49bad0104b33",
        "e2b01e8f56cddef2",
        "e8d593df0ba719db",
        "cbf51335bf9da9eb",
        "d1b17c73d513b12f",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "e2b01e8f56cddef2",
      "date": 1509531605293
    },
    {
      "type": "add",
      "id": "16850141008742c6",
      "item": {
        "type": "paragraph",
        "id": "16850141008742c6",
        "text": "Melt was developed as a test tool for the MLT framework. It can be thought of as a powerful, if somewhat obscure, multitrack command line oriented video editor."
      },
      "after": "e2b01e8f56cddef2",
      "date": 1509531617450
    },
    {
      "type": "add",
      "id": "59738c4ad2534e02",
      "item": {
        "type": "paragraph",
        "id": "59738c4ad2534e02",
        "text": "The following details the usage of the tool and as a result, provides a lot of insight into the workings of the MLT framework - [asdf asfd]"
      },
      "after": "16850141008742c6",
      "date": 1509531630870
    },
    {
      "type": "edit",
      "id": "e2b01e8f56cddef2",
      "item": {
        "type": "markdown",
        "id": "e2b01e8f56cddef2",
        "text": "# Melt"
      },
      "date": 1509531635741
    },
    {
      "type": "edit",
      "id": "59738c4ad2534e02",
      "item": {
        "type": "paragraph",
        "id": "59738c4ad2534e02",
        "text": "The following details the usage of the tool and as a result, provides a lot of insight into the workings of the MLT framework - [https://www.mltframework.org/docs/melt/ mltframework.org]"
      },
      "date": 1509531646011
    },
    {
      "type": "edit",
      "id": "af1f49bad0104b33",
      "item": {
        "type": "markdown",
        "id": "af1f49bad0104b33",
        "text": "- MLT Documentation - [https://www.mltframework.org/docs/ mltframework.org]\n- MLT XML - [https://www.mltframework.org/docs/mltxml/ mltframework.org]"
      },
      "date": 1509531692254
    },
    {
      "type": "edit",
      "id": "af1f49bad0104b33",
      "item": {
        "type": "markdown",
        "id": "af1f49bad0104b33",
        "text": "- MLT Documentation - [https://www.mltframework.org/docs/ mltframework.org]\n- Melt commandline tool - [https://www.mltframework.org/docs/melt/ mltframework.org]\n- MLT XML - [https://www.mltframework.org/docs/mltxml/ mltframework.org]"
      },
      "date": 1509531721639
    },
    {
      "item": {
        "type": "factory",
        "id": "48df4793a8703033"
      },
      "id": "48df4793a8703033",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509531810541
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "af1f49bad0104b33",
        "e2b01e8f56cddef2",
        "16850141008742c6",
        "59738c4ad2534e02",
        "e8d593df0ba719db",
        "cbf51335bf9da9eb",
        "d1b17c73d513b12f",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "48df4793a8703033",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "48df4793a8703033",
      "date": 1509531814295
    },
    {
      "type": "edit",
      "id": "48df4793a8703033",
      "item": {
        "type": "markdown",
        "id": "48df4793a8703033",
        "text": "# Making nice slideshows\n\n"
      },
      "date": 1509531829947
    },
    {
      "type": "edit",
      "id": "48df4793a8703033",
      "item": {
        "type": "markdown",
        "id": "48df4793a8703033",
        "text": "# Making nice slideshows\n\nmelt \\\nphotos/.all.jpg ttl=75 \\\n-attach crop center=1 \\\n-attach affine  transition.cycle=225 transition.geometry=\"0=0,0:100%x100%;74=-100,-100:120%x120%;75=-60,-60:110%x110%;149=0:0:110%x110%;150=0,-60:110%x110%;224=-60,0:110%x110%\" \\\n-filter luma cycle=75 duration=25 \\\n-track demo/music1.ogg \\\n-transition mix\n\nThat rather complex looking transition.geometry string is just something I whipped together to add some variety to the animated pan and zooms. A front end tool could contain a collection of these strings to let the author choose a style. Also, notice the addition of automatic center cropping to remove black bars and fill the output frame with the photo image regardless its resolution and aspect ratio."
      },
      "date": 1509531924242
    },
    {
      "item": {
        "type": "factory",
        "id": "0f24f210676394b6"
      },
      "id": "0f24f210676394b6",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509531933729
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "af1f49bad0104b33",
        "e2b01e8f56cddef2",
        "16850141008742c6",
        "59738c4ad2534e02",
        "e8d593df0ba719db",
        "cbf51335bf9da9eb",
        "d1b17c73d513b12f",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "48df4793a8703033",
        "0f24f210676394b6",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "0f24f210676394b6",
      "date": 1509531936591
    },
    {
      "type": "edit",
      "id": "48df4793a8703033",
      "item": {
        "type": "markdown",
        "id": "48df4793a8703033",
        "text": "# Making nice slideshows\n\nThat rather complex looking transition.geometry string is just something I whipped together to add some variety to the animated pan and zooms. A front end tool could contain a collection of these strings to let the author choose a style. Also, notice the addition of automatic center cropping to remove black bars and fill the output frame with the photo image regardless its resolution and aspect ratio."
      },
      "date": 1509531950762
    },
    {
      "type": "edit",
      "id": "0f24f210676394b6",
      "item": {
        "type": "code",
        "id": "0f24f210676394b6",
        "text": "melt \\\nphotos/.all.jpg ttl=75 \\\n-attach crop center=1 \\\n-attach affine  transition.cycle=225 transition.geometry=\"0=0,0:100%x100%;74=-100,-100:120%x120%;75=-60,-60:110%x110%;149=0:0:110%x110%;150=0,-60:110%x110%;224=-60,0:110%x110%\" \\\n-filter luma cycle=75 duration=25 \\\n-track demo/music1.ogg \\\n-transition mix\n"
      },
      "date": 1509531952205
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "af1f49bad0104b33",
        "e2b01e8f56cddef2",
        "16850141008742c6",
        "59738c4ad2534e02",
        "e8d593df0ba719db",
        "cbf51335bf9da9eb",
        "d1b17c73d513b12f",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "0f24f210676394b6",
        "48df4793a8703033",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "0f24f210676394b6",
      "date": 1509531954223
    },
    {
      "type": "edit",
      "id": "0f24f210676394b6",
      "item": {
        "type": "code",
        "id": "0f24f210676394b6",
        "text": "melt \\\nphotos/.all.jpg ttl=75 \\\n-attach crop center=1 \\\n-attach affine  transition.cycle=225 transition.geometry=\"0=0,0:100%x100%;\n74=-100,\n-100:120%x120%;\n75=-60,\n-60:110%x110%;149=0:0:110%x110%;150=0,\n-60:110%x110%;224=-60,0:110%x110%\" \\\n-filter luma cycle=75 duration=25 \\\n-track demo/music1.ogg \\\n-transition mix\n"
      },
      "date": 1509531998688
    },
    {
      "type": "edit",
      "id": "0f24f210676394b6",
      "item": {
        "type": "code",
        "id": "0f24f210676394b6",
        "text": "melt \\\nphotos/.all.jpg ttl=75 \\\n-attach crop center=1 \\\n-attach affine  transition.cycle=225 transition.geometry=\"0=0,0:100%x100%; \\\n74=-100, \\\n-100:120%x120%; \\\n75=-60, \\\n-60:110%x110%;149=0:0:110%x110%;150=0, \\\n-60:110%x110%;224=-60,0:110%x110%\" \\\n-filter luma cycle=75 duration=25 \\\n-track demo/music1.ogg \\\n-transition mix\n"
      },
      "date": 1509532017018
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "af1f49bad0104b33",
        "e2b01e8f56cddef2",
        "16850141008742c6",
        "59738c4ad2534e02",
        "e8d593df0ba719db",
        "cbf51335bf9da9eb",
        "d1b17c73d513b12f",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "48df4793a8703033",
        "0f24f210676394b6",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "0f24f210676394b6",
      "date": 1509532029305
    },
    {
      "type": "edit",
      "id": "48df4793a8703033",
      "item": {
        "type": "markdown",
        "id": "48df4793a8703033",
        "text": "# Making nice slideshows\n\nTransition geometry can be used to create [[Ken Burns]] like effects."
      },
      "date": 1509532069043
    },
    {
      "item": {
        "type": "factory",
        "id": "5a62ac745b3decbe"
      },
      "id": "5a62ac745b3decbe",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509532071133
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "af1f49bad0104b33",
        "e2b01e8f56cddef2",
        "16850141008742c6",
        "59738c4ad2534e02",
        "e8d593df0ba719db",
        "cbf51335bf9da9eb",
        "d1b17c73d513b12f",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "48df4793a8703033",
        "0f24f210676394b6",
        "5a62ac745b3decbe",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "5a62ac745b3decbe",
      "date": 1509532072932
    },
    {
      "type": "edit",
      "id": "5a62ac745b3decbe",
      "item": {
        "type": "paragraph",
        "id": "5a62ac745b3decbe",
        "text": "That rather complex looking transition.geometry string is just something I whipped together to add some variety to the animated pan and zooms. A front end tool could contain a collection of these strings to let the author choose a style. Also, notice the addition of automatic center cropping to remove black bars and fill the output frame with the photo image regardless its resolution and aspect ratio."
      },
      "date": 1509532075195
    },
    {
      "type": "edit",
      "id": "5a62ac745b3decbe",
      "item": {
        "type": "paragraph",
        "id": "5a62ac745b3decbe",
        "text": "That rather complex looking transition.geometry string is just something I whipped together to add some variety to the animated pan and zooms. A front end tool could contain a collection of these strings to let the author choose a style. "
      },
      "date": 1509532099653
    },
    {
      "type": "add",
      "id": "08f478e6c60f93ff",
      "item": {
        "type": "paragraph",
        "id": "08f478e6c60f93ff",
        "text": "Also, notice the addition of automatic center cropping to remove black bars and fill the output frame with the photo image regardless its resolution and aspect ratio."
      },
      "after": "5a62ac745b3decbe",
      "date": 1509532101512
    },
    {
      "type": "edit",
      "id": "5a62ac745b3decbe",
      "item": {
        "type": "paragraph",
        "id": "5a62ac745b3decbe",
        "text": "That rather complex looking transition.geometry string is just something I whipped together to add some variety to the animated pan and zooms. A front end tool could contain a collection of these strings to let the author choose a style - [http://mltframework.blogspot.co.uk/2010/08/making-nice-slideshows.html blogspot]"
      },
      "date": 1509532111382
    },
    {
      "type": "edit",
      "id": "48df4793a8703033",
      "item": {
        "type": "markdown",
        "id": "48df4793a8703033",
        "text": "# Making nice slideshows\n\nTransition geometry can be used to create [[Ken Burns]] like effects - [https://stackoverflow.com/questions/38098517/mtl-framework-create-slideshow-both-with-images-and-videos stackoverflow]"
      },
      "date": 1509532217323
    },
    {
      "item": {
        "type": "factory",
        "id": "c626af26b9280882"
      },
      "id": "c626af26b9280882",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509532526333
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "af1f49bad0104b33",
        "e2b01e8f56cddef2",
        "16850141008742c6",
        "59738c4ad2534e02",
        "e8d593df0ba719db",
        "c626af26b9280882",
        "cbf51335bf9da9eb",
        "d1b17c73d513b12f",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "48df4793a8703033",
        "0f24f210676394b6",
        "5a62ac745b3decbe",
        "08f478e6c60f93ff",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "c626af26b9280882",
      "date": 1509532533425
    },
    {
      "item": {
        "type": "factory",
        "id": "860d73e10e992603"
      },
      "id": "860d73e10e992603",
      "type": "add",
      "after": "170a619ed02e50f2",
      "date": 1509532535642
    },
    {
      "type": "move",
      "order": [
        "1fcc249f359431aa",
        "af1f49bad0104b33",
        "e2b01e8f56cddef2",
        "16850141008742c6",
        "59738c4ad2534e02",
        "e8d593df0ba719db",
        "c626af26b9280882",
        "860d73e10e992603",
        "cbf51335bf9da9eb",
        "d1b17c73d513b12f",
        "a9933849078d5d95",
        "1c76b8041da3955c",
        "fabaf57fb41b3cc7",
        "48df4793a8703033",
        "0f24f210676394b6",
        "5a62ac745b3decbe",
        "08f478e6c60f93ff",
        "03b868a93f6d59ce",
        "64e4e6fb5bdb1fe3",
        "170a619ed02e50f2"
      ],
      "id": "860d73e10e992603",
      "date": 1509532540271
    },
    {
      "type": "edit",
      "id": "c626af26b9280882",
      "item": {
        "type": "paragraph",
        "id": "c626af26b9280882",
        "text": "You can use [[Openshot]] to create [[PIP effects]], and as this is based on the [[MLT Framework]] this means you can script it. One way to create / construct / explore scripting in mtl / melt is to use the [["
      },
      "date": 1509532623161
    },
    {
      "type": "edit",
      "id": "c626af26b9280882",
      "item": {
        "type": "paragraph",
        "id": "c626af26b9280882",
        "text": "You can use [[Openshot]] to create [[PIP effects]], and as this is based on the [[MLT Framework]] this means you can script it. One way to create / construct / explore scripting in mtl / melt is to use the [[Melt Command Export]] for [[OpenShot]]."
      },
      "date": 1509532657622
    },
    {
      "type": "edit",
      "id": "860d73e10e992603",
      "item": {
        "type": "video",
        "id": "860d73e10e992603",
        "text": "YOUTUBE wkFInmmXLoE\n(double-click to edit caption)\n"
      },
      "date": 1509532663715
    },
    {
      "type": "edit",
      "id": "af1f49bad0104b33",
      "item": {
        "type": "markdown",
        "id": "af1f49bad0104b33",
        "text": "- MLT Documentation - [https://www.mltframework.org/docs/ mltframework.org]\n- Melt commandline tool - [https://www.mltframework.org/docs/melt/ mltframework.org]\n- MLT XML - [https://www.mltframework.org/docs/mltxml/ mltframework.org]\n- More documentation - [https://superuser.com/questions/358082/command-line-video-editing-in-linux-cut-join-and-preview/405692#405692 superuser.com]"
      },
      "date": 1509533080333
    },
    {
      "type": "remove",
      "id": "860d73e10e992603",
      "date": 1509533249350
    },
    {
      "type": "edit",
      "id": "1fcc249f359431aa",
      "item": {
        "id": "1fcc249f359431aa",
        "text": "[[Media Lovin' Toolkit]] ([[MLT]]) is an open source multimedia framework, designed and developed for television broadcasting. It provides a toolkit for broadcasters, video editors, media players, transcoders, web streamers and many more types of applications - [http://www.mltframework.org mltframework.org]",
        "type": "paragraph"
      },
      "date": 1509802018206
    }
  ],
  "story": [
    {
      "id": "1fcc249f359431aa",
      "text": "[[Media Lovin' Toolkit]] ([[MLT]]) is an open source multimedia framework, designed and developed for television broadcasting. It provides a toolkit for broadcasters, video editors, media players, transcoders, web streamers and many more types of applications - [http://www.mltframework.org mltframework.org]",
      "type": "paragraph"
    },
    {
      "type": "markdown",
      "id": "af1f49bad0104b33",
      "text": "- MLT Documentation - [https://www.mltframework.org/docs/ mltframework.org]\n- Melt commandline tool - [https://www.mltframework.org/docs/melt/ mltframework.org]\n- MLT XML - [https://www.mltframework.org/docs/mltxml/ mltframework.org]\n- More documentation - [https://superuser.com/questions/358082/command-line-video-editing-in-linux-cut-join-and-preview/405692#405692 superuser.com]"
    },
    {
      "type": "markdown",
      "id": "e2b01e8f56cddef2",
      "text": "# Melt"
    },
    {
      "type": "paragraph",
      "id": "16850141008742c6",
      "text": "Melt was developed as a test tool for the MLT framework. It can be thought of as a powerful, if somewhat obscure, multitrack command line oriented video editor."
    },
    {
      "type": "paragraph",
      "id": "59738c4ad2534e02",
      "text": "The following details the usage of the tool and as a result, provides a lot of insight into the workings of the MLT framework - [https://www.mltframework.org/docs/melt/ mltframework.org]"
    },
    {
      "type": "markdown",
      "id": "e8d593df0ba719db",
      "text": "# Picture-in-picture"
    },
    {
      "type": "paragraph",
      "id": "c626af26b9280882",
      "text": "You can use [[Openshot]] to create [[PIP effects]], and as this is based on the [[MLT Framework]] this means you can script it. One way to create / construct / explore scripting in mtl / melt is to use the [[Melt Command Export]] for [[OpenShot]]."
    },
    {
      "type": "paragraph",
      "id": "cbf51335bf9da9eb",
      "text": "You can use the watermark filter to create a PIP effect - see the demo directory in MLT if you have not already, specifically 'mlt_bouncy'. "
    },
    {
      "type": "paragraph",
      "id": "d1b17c73d513b12f",
      "text": "That is an animated pip. For static, replace all of the\ncomposite.* properties with a single composite.geometry=\"x,y:wxh\". Also, I suggest adding composite.progressive=1 - [https://sourceforge.net/p/mlt/mailman/message/25129775/ sourceforge]"
    },
    {
      "type": "code",
      "id": "a9933849078d5d95",
      "text": "melt A.mp4 -filter watermark:B.mp4 composite.geometry=10%,10%,20%,20%\ncomposite.progressive=1"
    },
    {
      "type": "paragraph",
      "id": "1c76b8041da3955c",
      "text": "You can add text as an overlay track using mtl. Using multiple tracks and composite transition is a bit more complex than using the watermark filter. For syntax see example below - [https://animeshnanda.blogspot.co.uk/2010/11/how-to-add-text-as-overlay-track-using.html blogspot]"
    },
    {
      "type": "code",
      "id": "fabaf57fb41b3cc7",
      "text": "melt -blank 0 avformat:basevideo.flv out=3930 -move in=0 out=3930 -track -blank 630 avformat:overlayvideo.flv out=3060 -move in=0 out=2430 -filter chroma key=#00FF00 variance=0.38 -transition composite geometry=\"0%,0%:100%x100%\" halign=center valign=center out=3930 a_track=0 b_track=1 -transition composite geometry=\"0%,0%:100%x100%\" halign=left valign=top out=3060 a_track=0 b_track=2 -track \"+Sample Text.txt\" in=0 out=1440 -transition composite titles=1 start=\"299%,70%:999%x20%\" in=45 out=1440 a_track=0 b_track=2 -consumer avformat:testvideo.flv frequency=22050 fullscreen=1 fps=30 -profile dvd_ntsc"
    },
    {
      "type": "markdown",
      "id": "48df4793a8703033",
      "text": "# Making nice slideshows\n\nTransition geometry can be used to create [[Ken Burns]] like effects - [https://stackoverflow.com/questions/38098517/mtl-framework-create-slideshow-both-with-images-and-videos stackoverflow]"
    },
    {
      "type": "code",
      "id": "0f24f210676394b6",
      "text": "melt \\\nphotos/.all.jpg ttl=75 \\\n-attach crop center=1 \\\n-attach affine  transition.cycle=225 transition.geometry=\"0=0,0:100%x100%; \\\n74=-100, \\\n-100:120%x120%; \\\n75=-60, \\\n-60:110%x110%;149=0:0:110%x110%;150=0, \\\n-60:110%x110%;224=-60,0:110%x110%\" \\\n-filter luma cycle=75 duration=25 \\\n-track demo/music1.ogg \\\n-transition mix\n"
    },
    {
      "type": "paragraph",
      "id": "5a62ac745b3decbe",
      "text": "That rather complex looking transition.geometry string is just something I whipped together to add some variety to the animated pan and zooms. A front end tool could contain a collection of these strings to let the author choose a style - [http://mltframework.blogspot.co.uk/2010/08/making-nice-slideshows.html blogspot]"
    },
    {
      "type": "paragraph",
      "id": "08f478e6c60f93ff",
      "text": "Also, notice the addition of automatic center cropping to remove black bars and fill the output frame with the photo image regardless its resolution and aspect ratio."
    },
    {
      "type": "markdown",
      "id": "03b868a93f6d59ce",
      "text": "#Installation"
    },
    {
      "id": "64e4e6fb5bdb1fe3",
      "text": "brew install mlt",
      "type": "code"
    },
    {
      "type": "markdown",
      "id": "170a619ed02e50f2",
      "text": "# See also\n\n- [[Media Lovin' Toolkit]]\n- [[Shotcut]]"
    }
  ],
  "title": "MLT Multimedia Framework"
}