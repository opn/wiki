{
  "title": "Directed Acyclic Graph",
  "story": [
    {
      "type": "paragraph",
      "id": "a42f3ce8-9aa0-4ca8-9650-0752402f0158",
      "text": "In mathematics and computer science, a directed acyclic graph ([[DAG]]), is a finite directed graph with no directed cycles - [https://en.wikipedia.org/wiki/Directed_Acyclic_Graph wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "dc5ab1949274427e",
      "text": "That is, it consists of finitely many vertices and edges, with each edge directed from one vertex to another, such that there is no way to start at any vertex v and follow a consistently-directed sequence of edges that eventually loops back to v again. Equivalently, a DAG is a directed graph that has a topological ordering, a sequence of the vertices such that every edge is directed from earlier to later in the sequence."
    },
    {
      "type": "html",
      "id": "ce8af778-c857-49c6-aa7a-d0229d67d4d6",
      "text": "<div style='padding: 12px; background:#eee; width:96%; align=centered;'>\n<a href='https://commons.wikimedia.org/wiki/File:Topological_Ordering.svg' target='_blank'>\n<img style='display:block; margin:auto; width:100%;'\nsrc='https://upload.wikimedia.org/wikipedia/commons/c/c6/Topological_Ordering.svg'>\n</a>\n\n<p class=caption>\nA topological ordering of a directed acyclic graph: every edge goes from earlier in the ordering (upper left) to later in the ordering (lower right). - [https://commons.wikimedia.org/wiki/File:Topological_Ordering.svg wikimedia]\n[https://commons.wikimedia.org/wiki/File:Topological_Ordering.svg - wikimedia]\n</p></div>"
    },
    {
      "type": "paragraph",
      "id": "ef8a47fd-7aae-4351-a2a0-258c4fc560db",
      "text": "DAGs may be used to model many different kinds of information. The reachability relation in a DAG forms a partial order, and any finite partial order may be represented by a DAG using reachability. "
    },
    {
      "type": "paragraph",
      "id": "2608fa3287ba1809",
      "text": "The program evaluation and review technique uses DAGs to model the milestones and activities of large human projects, and schedule these projects to use as little total time as possible. "
    },
    {
      "type": "paragraph",
      "id": "a0507012058e1948",
      "text": "Scheduling of computer operations such as the updates to a spreadsheet or the compilation operations in a makefile can also be performed using topological orderings of DAGs. "
    },
    {
      "type": "paragraph",
      "id": "352d5d54babea497",
      "text": "Combinational logic blocks in electronic circuit design, and the operations in dataflow programming languages, involve acyclic networks of processing elements. "
    },
    {
      "type": "paragraph",
      "id": "e914e0cfc8550b2a",
      "text": "DAGs can also represent collections of events and their influence on each other, either in a probabilistic structure such as a Bayesian network or as a record of historical data such as family trees or the version histories of distributed revision control systems. "
    },
    {
      "type": "paragraph",
      "id": "c438a4e81bd0be6e",
      "text": "DAGs can also be used as a compact representation of sequence data, such as the directed acyclic word graph representation of a collection of strings, or the binary decision diagram representation of sequences of binary choices."
    },
    {
      "type": "paragraph",
      "id": "dbae2a21-6774-4cbf-a53a-77e3130773d0",
      "text": "Important polynomial time computational problems on DAGs include topological sorting (finding a topological ordering), construction of the transitive closure and transitive reduction (the largest and smallest DAGs with the same reachability relation, respectively), and the closure problem, in which the goal is to find a minimum-weight subset of vertices with no edges connecting them to the rest of the graph. Transforming a directed graph with cycles into a DAG by deleting as few vertices or edges as possible (the feedback vertex set and feedback edge set problem, respectively) is NP-hard, but any directed graph can be made into a DAG (its condensation) by contracting each strongly connected component into a single supervertex. The problems of finding shortest paths and longest paths can be solved on DAGs in linear time, in contrast to arbitrary graphs for which shortest path algorithms are slower and longest path problems are NP-hard."
    },
    {
      "type": "paragraph",
      "id": "5d916552-00b8-446c-8cf0-ff68eb58921b",
      "text": "The corresponding concept for undirected graphs is a forest, an undirected graph without cycles. Choosing an orientation for a forest produces a special kind of directed acyclic graph called a polytree. However there are many other kinds of directed acyclic graph that are not formed by orienting the edges of an undirected acyclic graph. Moreover, every undirected graph has an acyclic orientation, an assignment of a direction for its edges that makes it into a directed acyclic graph. To emphasize that DAGs are not the same thing as directed versions of undirected acyclic graphs, some authors call them acyclic directed graphs or acyclic digraphs."
    },
    {
      "type": "markdown",
      "id": "e7ddd19d-6bd0-4901-859a-e55cab3302dc",
      "text": "# See also\n* [[Merkle tree]]\n* [[Definitions]]\n* [[Mathematical properties]]\n* [[Computational problems]]\n* [[Applications]]\n* [[References]]\n* [[External links]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "story": "",
        "title": "Directed acyclic graph"
      },
      "date": 1466675899167,
      "source": {
        "pageTitle": "Directed acyclic graph",
        "pageSlug": "Directed Acyclic Graph",
        "url": "https://en.wikipedia.org/wiki/Directed_Acyclic_Graph",
        "date": 1466675899167,
        "link_dictionary": {
          "wiki_links": {
            "Definitions": {
              "section_number": 1,
              "section_level": 2,
              "dot_number": 1
            },
            "Computational problems": {
              "section_number": 7,
              "section_level": 2,
              "dot_number": 3
            },
            "External links": {
              "section_number": 20,
              "section_level": 2,
              "dot_number": 6
            },
            "References": {
              "section_number": 19,
              "section_level": 2,
              "dot_number": 5
            },
            "Mathematical properties": {
              "section_number": 2,
              "section_level": 2,
              "dot_number": 2
            },
            "Applications": {
              "section_number": 13,
              "section_level": 2,
              "dot_number": 4
            }
          },
          "default": {
            "transport": "https://livecode.world/mediawiki/importSection"
          }
        },
        "transport": "https://livecode.world/mediawiki/transportAgain",
        "rev": 725736574,
        "repo": "https://github.com/LiveCodeWorld/lib_MediaWiki"
      }
    },
    {
      "type": "fork",
      "date": 1466675902655
    },
    {
      "type": "remove",
      "id": "146eade8-4277-4f2c-9aee-da6558e552f2",
      "date": 1466749927993
    },
    {
      "type": "edit",
      "id": "a42f3ce8-9aa0-4ca8-9650-0752402f0158",
      "item": {
        "type": "paragraph",
        "id": "a42f3ce8-9aa0-4ca8-9650-0752402f0158",
        "text": "In mathematics and computer science, a directed acyclic graph (DAG), is a finite directed graph with no directed cycles. "
      },
      "date": 1467035031160
    },
    {
      "type": "add",
      "id": "dc5ab1949274427e",
      "item": {
        "type": "paragraph",
        "id": "dc5ab1949274427e",
        "text": "That is, it consists of finitely many vertices and edges, with each edge directed from one vertex to another, such that there is no way to start at any vertex v and follow a consistently-directed sequence of edges that eventually loops back to v again. Equivalently, a DAG is a directed graph that has a topological ordering, a sequence of the vertices such that every edge is directed from earlier to later in the sequence."
      },
      "after": "a42f3ce8-9aa0-4ca8-9650-0752402f0158",
      "date": 1467035037995
    },
    {
      "type": "edit",
      "id": "a42f3ce8-9aa0-4ca8-9650-0752402f0158",
      "item": {
        "type": "paragraph",
        "id": "a42f3ce8-9aa0-4ca8-9650-0752402f0158",
        "text": "In mathematics and computer science, a directed acyclic graph (DAG), is a finite directed graph with no directed cycles - [https://en.wikipedia.org/wiki/Directed_Acyclic_Graph wikipedia]"
      },
      "date": 1467035047369
    },
    {
      "type": "edit",
      "id": "ef8a47fd-7aae-4351-a2a0-258c4fc560db",
      "item": {
        "type": "paragraph",
        "id": "ef8a47fd-7aae-4351-a2a0-258c4fc560db",
        "text": "DAGs may be used to model many different kinds of information. The reachability relation in a DAG forms a partial order, and any finite partial order may be represented by a DAG using reachability. "
      },
      "date": 1467035087107
    },
    {
      "type": "add",
      "id": "2608fa3287ba1809",
      "item": {
        "type": "paragraph",
        "id": "2608fa3287ba1809",
        "text": "The program evaluation and review technique uses DAGs to model the milestones and activities of large human projects, and schedule these projects to use as little total time as possible. "
      },
      "after": "ef8a47fd-7aae-4351-a2a0-258c4fc560db",
      "date": 1467035096490
    },
    {
      "type": "add",
      "id": "a0507012058e1948",
      "item": {
        "type": "paragraph",
        "id": "a0507012058e1948",
        "text": "Scheduling of computer operations such as the updates to a spreadsheet or the compilation operations in a makefile can also be performed using topological orderings of DAGs. "
      },
      "after": "2608fa3287ba1809",
      "date": 1467035100371
    },
    {
      "type": "add",
      "id": "352d5d54babea497",
      "item": {
        "type": "paragraph",
        "id": "352d5d54babea497",
        "text": "Combinational logic blocks in electronic circuit design, and the operations in dataflow programming languages, involve acyclic networks of processing elements. "
      },
      "after": "a0507012058e1948",
      "date": 1467035103803
    },
    {
      "type": "add",
      "id": "e914e0cfc8550b2a",
      "item": {
        "type": "paragraph",
        "id": "e914e0cfc8550b2a",
        "text": "DAGs can also represent collections of events and their influence on each other, either in a probabilistic structure such as a Bayesian network or as a record of historical data such as family trees or the version histories of distributed revision control systems. "
      },
      "after": "352d5d54babea497",
      "date": 1467035111852
    },
    {
      "type": "add",
      "id": "c438a4e81bd0be6e",
      "item": {
        "type": "paragraph",
        "id": "c438a4e81bd0be6e",
        "text": "DAGs can also be used as a compact representation of sequence data, such as the directed acyclic word graph representation of a collection of strings, or the binary decision diagram representation of sequences of binary choices."
      },
      "after": "e914e0cfc8550b2a",
      "date": 1467035114797
    },
    {
      "type": "edit",
      "id": "e7ddd19d-6bd0-4901-859a-e55cab3302dc",
      "item": {
        "type": "markdown",
        "id": "e7ddd19d-6bd0-4901-859a-e55cab3302dc",
        "text": "# See also\n* [[Merkle tree]]\n* [[Definitions]]\n* [[Mathematical properties]]\n* [[Computational problems]]\n* [[Applications]]\n* [[References]]\n* [[External links]]"
      },
      "date": 1467041800641
    },
    {
      "type": "fork",
      "site": "future.fedwiki.org",
      "date": 1477674991945
    },
    {
      "type": "edit",
      "id": "a42f3ce8-9aa0-4ca8-9650-0752402f0158",
      "item": {
        "type": "paragraph",
        "id": "a42f3ce8-9aa0-4ca8-9650-0752402f0158",
        "text": "In mathematics and computer science, a directed acyclic graph ([[DAG]]), is a finite directed graph with no directed cycles - [https://en.wikipedia.org/wiki/Directed_Acyclic_Graph wikipedia]"
      },
      "date": 1503050048459
    },
    {
      "type": "fork",
      "site": "graph.fedwiki.org",
      "date": 1512133078106
    }
  ]
}